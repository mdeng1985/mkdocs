{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u5c0f\u7ad9 \u00b6 \u672c\u7ad9\u8bb0\u5f55\u4e86\u6211\u5e73\u65f6\u7684\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0, \u4e3b\u8981\u6db5\u76d6\u5982\u4e0b\u51e0\u4e2a\u65b9\u9762: \u94a2\u7434\u5b66\u4e60 ROS\u673a\u5668\u4eba\u5f00\u53d1 \u5bfc\u822a\u4e0e\u4f30\u8ba1\u7406\u8bba \u7f16\u7a0b\u4e0e\u5d4c\u5165\u5f0f\u5f00\u53d1 \u4e2a\u4eba\u65e5\u8bb0 \u5176\u4ed6\u7b49.....","title":"\u9996\u9875"},{"location":"#_1","text":"\u672c\u7ad9\u8bb0\u5f55\u4e86\u6211\u5e73\u65f6\u7684\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0, \u4e3b\u8981\u6db5\u76d6\u5982\u4e0b\u51e0\u4e2a\u65b9\u9762: \u94a2\u7434\u5b66\u4e60 ROS\u673a\u5668\u4eba\u5f00\u53d1 \u5bfc\u822a\u4e0e\u4f30\u8ba1\u7406\u8bba \u7f16\u7a0b\u4e0e\u5d4c\u5165\u5f0f\u5f00\u53d1 \u4e2a\u4eba\u65e5\u8bb0 \u5176\u4ed6\u7b49.....","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u5c0f\u7ad9"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","text":"title: 0-ROS\u7cfb\u7edf\u5b89\u88c5 author: mdeng li created: 2021-04-17 uid: 202104170835 description: tags: ros 0-ROS\u7cfb\u7edf\u5b89\u88c5 \u00b6 \u7eaf\u6b63\u7684ubuntu\u4e0b\u5b89\u88c5 \u00b6 see: Ubuntu install of ROS Melodic \u6dfb\u52a0 sources.list \u00b6 (\u6dfb\u52a0\u6e05\u534e\u7684) sudo sh -c '. /etc/lsb-release && echo \"deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros-latest.list' \u6dfb\u52a0key \u00b6 (\u53ef\u80fd\u9700\u8981\u5173\u95edss\u7684\u4ee3\u7406) sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 sudo apt-get update \u00b6 \u5982\u679c\u63d0\u793a The following signatures couldn't be verified because the public key is not available: NO_PUBKEY F42ED6FBAB17C654 , \u5219\u9700\u8981\u8fd0\u884c: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F42ED6FBAB17C654 \u5b89\u88c5ROS \u00b6 sudo apt-get install ros-melodic-desktop-full sudo apt-get install ros-melodic-desktop \u6ce8\u610f : ubuntu 18\u7248\u672c\u5bf9\u5e94\u7684ros\u7248\u672c\u4e3amelodic \u4e4b\u6240\u4ee5\u5b89\u88c5\u4e00\u4e2afull\u5b89\u88c5\u4e00\u4e2a\u666e\u901a\u7684\uff0c\u662f\u6709\u53ef\u80fd\u4f1a\u4e22\u5931\u6587\u4ef6\uff0c \u53c2\u8003 \u5982\u679c\u4e3aubuntu 20.03\uff0c\u5219\u5b89\u88c5 sudo apt install ros-noetic-desktop-full rosdep \u521d\u59cb\u5316 \u00b6 (\u53ef\u80fd\u9700\u8981\u5173\u95edss\u7684\u4ee3\u7406) sudo rosdep init rosdep update \u6ce8\u610f : init\u6709sudo\uff0cupdate\u6ca1\u6709sudo rosdep update \u7684\u4f5c\u7528\u5c31\u662f\u5728\u8d26\u6237\u7684\u6839\u76ee\u5f55\uff08 home/ubuntu \uff09\u4e0b\u5efa\u7acb .ros \u6587\u4ef6\u5939 \u5982\u679c\u63d0\u793a rosdep: command not found \u5982\u679c\u662fnoetic\u7684\u7248\u672c\uff0c\u5219\u4f1a\u63d0\u793a\u627e\u4e0d\u5230\u547d\u4ee4\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u5b89\u88c5 sudo apt install python3-rosdep \u800c\u4e0d\u662f python3-rosdep2 \u53c2\u8003 \u5982\u679c\u662fmelodic, \u5219 sudo apt install python-rosdep2 \u5982\u679c\u63d0\u793awebsite may be down,\u5219\u9700\u8981 sudo nano /etc/hosts \u52a0\u8fdb\u53bb 199.232.28.133 raw.githubusercontent.com \uff08\u524d\u8005\u4e3a\u540e\u8005\u7684IP, ip\u67e5\u8be2\u5730\u5740 \uff09 \u5982\u679c rosdep update \u63d0\u793a\u8d85\u65f6\u7b49\u4fe1\u606f\uff0c\u5219\u9700\u8981\u6302\u4ee3\u7406\uff0c\u9996\u5148\u770b\u6211\u7684\u7535\u8111-\u8bbe\u7f6e\u91cc\u7684\u4ee3\u7406\u7684\u7aef\u53e3\u662f\u5565\uff0c\u6211\u7684\u662f10801\uff0c\u5219 export https_proxy=http://127.0.0.1:10801 http_proxy=http://127.0.0.1:10801 all_proxy=socks5://127.0.0.1:10801 \uff0c\u7136\u540e\u518d\u6267\u884c rosdep update \u5373\u53ef\u3002 \u914d\u7f6e\u73af\u5883\u53d8\u91cf \u00b6 echo \"source /opt/ros/melodic/setup.bash\" >> ~/.bashrc source ~/.bashrc \u6ce8\u610f \u5982\u679c\u662fnoetic\u7248\u672c\uff0c\u5219\u5c06melodic\u6362\u6210noetic\u7248\u672c\u3002 echo \"source /opt/ros/melodic/setup.bash\" >> ~/.bashrc \u7684\u542b\u4e49\u662f\u5c06 source /opt/ros/melodic/setup.bash \u5199\u5165\u5230bashrc\u6587\u4ef6\u91cc \u53ef\u4ee5\u901a\u8fc7 export | grep ROS \u6765\u67e5\u770bROS\u73af\u5883\u53d8\u91cf\u662f\u5426\u6b63\u786e declare -x ROSLISP_PACKAGE_DIRECTORIES=\"/home/ubuntu/catkin_ws_pi/devel/share/common-lisp\" declare -x ROS_DISTRO=\"noetic\" declare -x ROS_ETC_DIR=\"/opt/ros/noetic/etc/ros\" declare -x ROS_MASTER_URI=\"http://localhost:11311\" declare -x ROS_PACKAGE_PATH=\"/home/mdeng1985/catkin_ws/src:/home/mdeng1985/CworkSpace/catkin_ws/src:/home/ubuntu/catkin_ws_pi/src:/opt/ros/noetic/share\" declare -x ROS_PYTHON_VERSION=\"3\" declare -x ROS_ROOT=\"/opt/ros/noetic/share/ros\" declare -x ROS_VERSION=\"1\" \u6784\u5efa\u5de5\u5382\u4f9d\u8d56 \u00b6 sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential \u5982\u679c\u662fnoetic\uff0c\u5219 sudo apt-get install python3-rosinstall python3-rosinstall-generator python3-wstool build-essential \u6d4b\u8bd5\uff0c\u8fd0\u884c \u00b6 roscore \u5982\u679c\u63d0\u793a started core service [/rosout] \u5219\u8868\u660e\u5b89\u88c5\u6210\u529f\u3002 \u6d4b\u8bd5\u53ef\u89c6\u5316\uff0c\u5982\u679c\u662fwsl2\u73af\u5883\uff0c\u5219\u53c2\u8003[[6-linux\u8fdc\u7a0b\u684c\u9762\u8fde\u63a5#^1d69bc]]","title":"0 ROS\u7cfb\u7edf\u5b89\u88c5"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#0-ros","text":"","title":"0-ROS\u7cfb\u7edf\u5b89\u88c5"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ubuntu","text":"see: Ubuntu install of ROS Melodic","title":"\u7eaf\u6b63\u7684ubuntu\u4e0b\u5b89\u88c5"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sourceslist","text":"(\u6dfb\u52a0\u6e05\u534e\u7684) sudo sh -c '. /etc/lsb-release && echo \"deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros-latest.list'","title":"\u6dfb\u52a0sources.list"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#key","text":"(\u53ef\u80fd\u9700\u8981\u5173\u95edss\u7684\u4ee3\u7406) sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654","title":"\u6dfb\u52a0key"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sudo-apt-get-update","text":"\u5982\u679c\u63d0\u793a The following signatures couldn't be verified because the public key is not available: NO_PUBKEY F42ED6FBAB17C654 , \u5219\u9700\u8981\u8fd0\u884c: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F42ED6FBAB17C654","title":"sudo apt-get update"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ros","text":"sudo apt-get install ros-melodic-desktop-full sudo apt-get install ros-melodic-desktop \u6ce8\u610f : ubuntu 18\u7248\u672c\u5bf9\u5e94\u7684ros\u7248\u672c\u4e3amelodic \u4e4b\u6240\u4ee5\u5b89\u88c5\u4e00\u4e2afull\u5b89\u88c5\u4e00\u4e2a\u666e\u901a\u7684\uff0c\u662f\u6709\u53ef\u80fd\u4f1a\u4e22\u5931\u6587\u4ef6\uff0c \u53c2\u8003 \u5982\u679c\u4e3aubuntu 20.03\uff0c\u5219\u5b89\u88c5 sudo apt install ros-noetic-desktop-full","title":"\u5b89\u88c5ROS"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#rosdep","text":"(\u53ef\u80fd\u9700\u8981\u5173\u95edss\u7684\u4ee3\u7406) sudo rosdep init rosdep update \u6ce8\u610f : init\u6709sudo\uff0cupdate\u6ca1\u6709sudo rosdep update \u7684\u4f5c\u7528\u5c31\u662f\u5728\u8d26\u6237\u7684\u6839\u76ee\u5f55\uff08 home/ubuntu \uff09\u4e0b\u5efa\u7acb .ros \u6587\u4ef6\u5939 \u5982\u679c\u63d0\u793a rosdep: command not found \u5982\u679c\u662fnoetic\u7684\u7248\u672c\uff0c\u5219\u4f1a\u63d0\u793a\u627e\u4e0d\u5230\u547d\u4ee4\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u5b89\u88c5 sudo apt install python3-rosdep \u800c\u4e0d\u662f python3-rosdep2 \u53c2\u8003 \u5982\u679c\u662fmelodic, \u5219 sudo apt install python-rosdep2 \u5982\u679c\u63d0\u793awebsite may be down,\u5219\u9700\u8981 sudo nano /etc/hosts \u52a0\u8fdb\u53bb 199.232.28.133 raw.githubusercontent.com \uff08\u524d\u8005\u4e3a\u540e\u8005\u7684IP, ip\u67e5\u8be2\u5730\u5740 \uff09 \u5982\u679c rosdep update \u63d0\u793a\u8d85\u65f6\u7b49\u4fe1\u606f\uff0c\u5219\u9700\u8981\u6302\u4ee3\u7406\uff0c\u9996\u5148\u770b\u6211\u7684\u7535\u8111-\u8bbe\u7f6e\u91cc\u7684\u4ee3\u7406\u7684\u7aef\u53e3\u662f\u5565\uff0c\u6211\u7684\u662f10801\uff0c\u5219 export https_proxy=http://127.0.0.1:10801 http_proxy=http://127.0.0.1:10801 all_proxy=socks5://127.0.0.1:10801 \uff0c\u7136\u540e\u518d\u6267\u884c rosdep update \u5373\u53ef\u3002","title":"rosdep \u521d\u59cb\u5316"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_1","text":"echo \"source /opt/ros/melodic/setup.bash\" >> ~/.bashrc source ~/.bashrc \u6ce8\u610f \u5982\u679c\u662fnoetic\u7248\u672c\uff0c\u5219\u5c06melodic\u6362\u6210noetic\u7248\u672c\u3002 echo \"source /opt/ros/melodic/setup.bash\" >> ~/.bashrc \u7684\u542b\u4e49\u662f\u5c06 source /opt/ros/melodic/setup.bash \u5199\u5165\u5230bashrc\u6587\u4ef6\u91cc \u53ef\u4ee5\u901a\u8fc7 export | grep ROS \u6765\u67e5\u770bROS\u73af\u5883\u53d8\u91cf\u662f\u5426\u6b63\u786e declare -x ROSLISP_PACKAGE_DIRECTORIES=\"/home/ubuntu/catkin_ws_pi/devel/share/common-lisp\" declare -x ROS_DISTRO=\"noetic\" declare -x ROS_ETC_DIR=\"/opt/ros/noetic/etc/ros\" declare -x ROS_MASTER_URI=\"http://localhost:11311\" declare -x ROS_PACKAGE_PATH=\"/home/mdeng1985/catkin_ws/src:/home/mdeng1985/CworkSpace/catkin_ws/src:/home/ubuntu/catkin_ws_pi/src:/opt/ros/noetic/share\" declare -x ROS_PYTHON_VERSION=\"3\" declare -x ROS_ROOT=\"/opt/ros/noetic/share/ros\" declare -x ROS_VERSION=\"1\"","title":"\u914d\u7f6e\u73af\u5883\u53d8\u91cf"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_2","text":"sudo apt-get install python-rosinstall python-rosinstall-generator python-wstool build-essential \u5982\u679c\u662fnoetic\uff0c\u5219 sudo apt-get install python3-rosinstall python3-rosinstall-generator python3-wstool build-essential","title":"\u6784\u5efa\u5de5\u5382\u4f9d\u8d56"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0-ROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_3","text":"roscore \u5982\u679c\u63d0\u793a started core service [/rosout] \u5219\u8868\u660e\u5b89\u88c5\u6210\u529f\u3002 \u6d4b\u8bd5\u53ef\u89c6\u5316\uff0c\u5982\u679c\u662fwsl2\u73af\u5883\uff0c\u5219\u53c2\u8003[[6-linux\u8fdc\u7a0b\u684c\u9762\u8fde\u63a5#^1d69bc]]","title":"\u6d4b\u8bd5\uff0c\u8fd0\u884c"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1-%20ROS%E7%A9%BA%E9%97%B4/","text":"title: ROS\u7a7a\u95f4 author: mdeng li created: 2021-04-17 uid: 202104172014 description: tags: ros ROS\u7a7a\u95f4 \u00b6 \u521b\u5efaROS\u7a7a\u95f4 \u00b6 \u5728sd\u5361\u4e0a\u76f4\u63a5\u64cd\u4f5c \u00b6 \u6700\u76f4\u63a5\u7684\u529e\u6cd5\u5c31\u662f\u76f4\u63a5\u5728\u6811\u8393\u6d3e\u7684\u5185\u5b58\u5361\u4e0a\u64cd\u4f5c\u3002 mkdir ~/catkin_ws_pi cd ~/catkin_ws_pi mkdir src cd ~/catkin_ws_pi catkin_make \u6302\u8f7dNAS\u7a7a\u95f4 \u00b6 \u6211\u8fd9\u91cc\u76f4\u63a5\u8fd0\u884c\u7684\u8bdd\uff0c\u63d0\u793a Permission denied: '/home/ubuntu/catkin_ws/build' \u3002\u4e0d\u592a\u597d\u89e3\u51b3\u3002 \u5982\u679c\u662f\u6811\u8393\u6d3e\uff0c\u5219 \u5148\u5207\u6362\u5230su\u8d26\u6237\uff0c\uff08\u5426\u5219\u5728\u540e\u9762catkin_make\u7684\u65f6\u5019\u4f1a\u63d0\u793a Permission denied: '/home/ubuntu/catkin_ws/build' ) \u7136\u540e\u9700\u8981\uff1a echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc source ~/.bashrc \u5982\u679c\u4e0d\u8f93\u5165\u4e0a\u9762\u7684\u8bdd\uff0c\u5219\u8fd0\u884ccatkin_make\u7684\u65f6\u5019\u627e\u4e0d\u5230\u8be5\u547d\u4ee4\u3002\u5173\u4e8e catkin_make \u6743\u9650\u95ee\u9898\uff0c\u53c2\u89c1\uff1a http://wiki.ros.org/catkin/commands/catkin_make-- sudo mount -o username=\"admin\",password=\"Hxxd1..\u5bc6\u7801x\" //192.168.0.139/NAS /mnt/nas2 ln -s /mnt/nas2/sync/mdeng/WORK/MyCode/linux_wsl/CODE/catkin_ws ~/catkin_ws cd ~/catkin_ws/ catkin_make #\u521d\u59cb\u5316\u5de5\u4f5c\u7a7a\u95f4 WSL\u4e0b\u64cd\u4f5c \u00b6 cd /mnt/d/Dropbox/mdeng/WORK/MyCode/linux_wsl/CODE mkdir -p catkin_ws/src #\u521b\u5efa\u8f6f\u94fe\u63a5 \u6e90\u5730\u5740 \u76ee\u7684\u5730\u5740 ln -s /mnt/d/Dropbox/mdeng/WORK/MyCode/linux_wsl/CODE/catkin_ws ~/catkin_ws cd ~/catkin_ws/ catkin_make #\u521d\u59cb\u5316\u5de5\u4f5c\u7a7a\u95f4 source devel/setup.bash echo $ROS_PACKAGE_PATH #\u67e5\u770b\u662f\u5426\u5305\u542b\u6709\u5de5\u4f5c\u76ee\u5f55 ROS\u7a7a\u95f4\u6587\u4ef6\u7ed3\u6784 \u00b6 catkin_ws\u7a7a\u95f4\u8bf4\u660e \u00b6 \u8fd0\u884c cd ~/catkin_ws sudo apt install tree tree \u4f1a\u770b\u5230\u901a\u8fc7tree\u547d\u4ee4\u53ef\u4ee5\u770b\u5230catkin\u5de5\u4f5c\u7a7a\u95f4\u7684\u7ed3\u6784,\u5b83\u5305\u62ec\u4e86src\u3001build\u3001devel\u4e09\u4e2a\u8def\u5f84\uff0c\u5728\u6709\u4e9b\u7f16\u8bd1\u9009\u9879\u4e0b\u4e5f\u53ef\u80fd\u5305\u62ec\u5176\u4ed6\u3002\u4f46\u8fd9\u4e09\u4e2a\u6587\u4ef6\u5939\u662fcatkin\u7f16\u8bd1\u7cfb\u7edf\u9ed8\u8ba4\u7684\u3002\u5b83\u4eec\u7684\u5177\u4f53\u4f5c\u7528\u5982\u4e0b\uff1a src/: ROS\u7684catkin\u8f6f\u4ef6\u5305\uff08\u6e90\u4ee3\u7801\u5305\uff09 build/: catkin\uff08CMake\uff09\u7684\u7f13\u5b58\u4fe1\u606f\u548c\u4e2d\u95f4\u6587\u4ef6 devel/: \u751f\u6210\u7684\u76ee\u6807\u6587\u4ef6\uff08\u5305\u62ec\u5934\u6587\u4ef6\uff0c\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u9759\u6001\u94fe\u63a5\u5e93\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u7b49\uff09\u3001\u73af\u5883\u53d8\u91cf \u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u6d41\u7a0b\u5982\u56fe\uff1a \u5728\u7f16\u8bd1\u65f6\uff0ccatkin\u7f16\u8bd1\u7cfb\u7edf\u4f1a \u9012\u5f52 \u7684\u67e5\u627e\u548c\u7f16\u8bd1 src/ \u4e0b\u7684\u6bcf\u4e00\u4e2a\u6e90\u4ee3\u7801\u5305\u3002\u56e0\u6b64\u4f60\u4e5f\u53ef\u4ee5\u628a\u51e0\u4e2a\u6e90\u4ee3\u7801\u5305\u653e\u5230\u540c\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u60f3\u4fdd\u8bc1\u5de5\u4f5c\u7a7a\u95f4\u5df2\u914d\u7f6e\u6b63\u786e\u9700\u786e\u4fddROS_PACKAGE_PATH\u73af\u5883\u53d8\u91cf\u5305\u542b\u4f60\u7684\u5de5\u4f5c\u7a7a\u95f4\u76ee\u5f55\uff0c\u91c7\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b echo $ROS_PACKAGE_PATH \uff08\u8be6\u7ec6\u8bf4\u660e\u89c1[[3-ROS\u5e38\u7528\u547d\u4ee4#ROS_PACKAGE_PATH|ROS_PACKAGE_PATH\u73af\u5883\u53d8\u91cf]]\uff09","title":"1  ROS\u7a7a\u95f4"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1-%20ROS%E7%A9%BA%E9%97%B4/#ros","text":"","title":"ROS\u7a7a\u95f4"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1-%20ROS%E7%A9%BA%E9%97%B4/#ros_1","text":"","title":"\u521b\u5efaROS\u7a7a\u95f4"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1-%20ROS%E7%A9%BA%E9%97%B4/#sd","text":"\u6700\u76f4\u63a5\u7684\u529e\u6cd5\u5c31\u662f\u76f4\u63a5\u5728\u6811\u8393\u6d3e\u7684\u5185\u5b58\u5361\u4e0a\u64cd\u4f5c\u3002 mkdir ~/catkin_ws_pi cd ~/catkin_ws_pi mkdir src cd ~/catkin_ws_pi catkin_make","title":"\u5728sd\u5361\u4e0a\u76f4\u63a5\u64cd\u4f5c"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1-%20ROS%E7%A9%BA%E9%97%B4/#nas","text":"\u6211\u8fd9\u91cc\u76f4\u63a5\u8fd0\u884c\u7684\u8bdd\uff0c\u63d0\u793a Permission denied: '/home/ubuntu/catkin_ws/build' \u3002\u4e0d\u592a\u597d\u89e3\u51b3\u3002 \u5982\u679c\u662f\u6811\u8393\u6d3e\uff0c\u5219 \u5148\u5207\u6362\u5230su\u8d26\u6237\uff0c\uff08\u5426\u5219\u5728\u540e\u9762catkin_make\u7684\u65f6\u5019\u4f1a\u63d0\u793a Permission denied: '/home/ubuntu/catkin_ws/build' ) \u7136\u540e\u9700\u8981\uff1a echo \"source /opt/ros/noetic/setup.bash\" >> ~/.bashrc source ~/.bashrc \u5982\u679c\u4e0d\u8f93\u5165\u4e0a\u9762\u7684\u8bdd\uff0c\u5219\u8fd0\u884ccatkin_make\u7684\u65f6\u5019\u627e\u4e0d\u5230\u8be5\u547d\u4ee4\u3002\u5173\u4e8e catkin_make \u6743\u9650\u95ee\u9898\uff0c\u53c2\u89c1\uff1a http://wiki.ros.org/catkin/commands/catkin_make-- sudo mount -o username=\"admin\",password=\"Hxxd1..\u5bc6\u7801x\" //192.168.0.139/NAS /mnt/nas2 ln -s /mnt/nas2/sync/mdeng/WORK/MyCode/linux_wsl/CODE/catkin_ws ~/catkin_ws cd ~/catkin_ws/ catkin_make #\u521d\u59cb\u5316\u5de5\u4f5c\u7a7a\u95f4","title":"\u6302\u8f7dNAS\u7a7a\u95f4"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1-%20ROS%E7%A9%BA%E9%97%B4/#wsl","text":"cd /mnt/d/Dropbox/mdeng/WORK/MyCode/linux_wsl/CODE mkdir -p catkin_ws/src #\u521b\u5efa\u8f6f\u94fe\u63a5 \u6e90\u5730\u5740 \u76ee\u7684\u5730\u5740 ln -s /mnt/d/Dropbox/mdeng/WORK/MyCode/linux_wsl/CODE/catkin_ws ~/catkin_ws cd ~/catkin_ws/ catkin_make #\u521d\u59cb\u5316\u5de5\u4f5c\u7a7a\u95f4 source devel/setup.bash echo $ROS_PACKAGE_PATH #\u67e5\u770b\u662f\u5426\u5305\u542b\u6709\u5de5\u4f5c\u76ee\u5f55","title":"WSL\u4e0b\u64cd\u4f5c"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1-%20ROS%E7%A9%BA%E9%97%B4/#ros_2","text":"","title":"ROS\u7a7a\u95f4\u6587\u4ef6\u7ed3\u6784"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1-%20ROS%E7%A9%BA%E9%97%B4/#catkin_ws","text":"\u8fd0\u884c cd ~/catkin_ws sudo apt install tree tree \u4f1a\u770b\u5230\u901a\u8fc7tree\u547d\u4ee4\u53ef\u4ee5\u770b\u5230catkin\u5de5\u4f5c\u7a7a\u95f4\u7684\u7ed3\u6784,\u5b83\u5305\u62ec\u4e86src\u3001build\u3001devel\u4e09\u4e2a\u8def\u5f84\uff0c\u5728\u6709\u4e9b\u7f16\u8bd1\u9009\u9879\u4e0b\u4e5f\u53ef\u80fd\u5305\u62ec\u5176\u4ed6\u3002\u4f46\u8fd9\u4e09\u4e2a\u6587\u4ef6\u5939\u662fcatkin\u7f16\u8bd1\u7cfb\u7edf\u9ed8\u8ba4\u7684\u3002\u5b83\u4eec\u7684\u5177\u4f53\u4f5c\u7528\u5982\u4e0b\uff1a src/: ROS\u7684catkin\u8f6f\u4ef6\u5305\uff08\u6e90\u4ee3\u7801\u5305\uff09 build/: catkin\uff08CMake\uff09\u7684\u7f13\u5b58\u4fe1\u606f\u548c\u4e2d\u95f4\u6587\u4ef6 devel/: \u751f\u6210\u7684\u76ee\u6807\u6587\u4ef6\uff08\u5305\u62ec\u5934\u6587\u4ef6\uff0c\u52a8\u6001\u94fe\u63a5\u5e93\uff0c\u9759\u6001\u94fe\u63a5\u5e93\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u7b49\uff09\u3001\u73af\u5883\u53d8\u91cf \u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u6d41\u7a0b\u5982\u56fe\uff1a \u5728\u7f16\u8bd1\u65f6\uff0ccatkin\u7f16\u8bd1\u7cfb\u7edf\u4f1a \u9012\u5f52 \u7684\u67e5\u627e\u548c\u7f16\u8bd1 src/ \u4e0b\u7684\u6bcf\u4e00\u4e2a\u6e90\u4ee3\u7801\u5305\u3002\u56e0\u6b64\u4f60\u4e5f\u53ef\u4ee5\u628a\u51e0\u4e2a\u6e90\u4ee3\u7801\u5305\u653e\u5230\u540c\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u60f3\u4fdd\u8bc1\u5de5\u4f5c\u7a7a\u95f4\u5df2\u914d\u7f6e\u6b63\u786e\u9700\u786e\u4fddROS_PACKAGE_PATH\u73af\u5883\u53d8\u91cf\u5305\u542b\u4f60\u7684\u5de5\u4f5c\u7a7a\u95f4\u76ee\u5f55\uff0c\u91c7\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b echo $ROS_PACKAGE_PATH \uff08\u8be6\u7ec6\u8bf4\u660e\u89c1[[3-ROS\u5e38\u7528\u547d\u4ee4#ROS_PACKAGE_PATH|ROS_PACKAGE_PATH\u73af\u5883\u53d8\u91cf]]\uff09","title":"catkin_ws\u7a7a\u95f4\u8bf4\u660e"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/2-ROS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","text":"[[ROS]] \u57fa\u7840\u77e5\u8bc6 \u00b6 ![toc] \u5305\u8def\u5f84\u548c\u8282\u70b9\u8def\u5f84\u521d\u63a2 \u00b6 example rosrun turtlesim turtlesim_node \u8fd0\u884c turtlesim \u5305\u91cc\u7684 turtlesim_node \u8282\u70b9 roscd turtlesim \u53d1\u73b0 turtlesim \u4e0b\u7684\u76ee\u5f55\u4f1a\u5207\u6362\u5230\u5305\u76ee\u5f55\u4e0b\uff0c\u4e5f\u5373 /opt/ros/melodic/share/turtlesim \uff0c \u518d ls \u4ee5\u4e0b\uff0c\u53d1\u73b0\u8be5\u5305\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u4e3a make images msg package.xml srv \u77e5\u8bc6\u70b9: - \u5305\u76ee\u5f55\u4e00\u822c\u4f4d\u4e8e /opt/ros/melodic/share/turtlesim - \u5305\u542b package.xml \u6587\u4ef6\u7684\u76ee\u5f55\u88ab\u79f0\u4e3a\u8f6f\u4ef6\u5305\u76ee\u5f55 - \u6ce8\u610f\u5230\u5305\u76ee\u5f55\u4e0b\u5e76\u6ca1\u6709\u8282\u70b9 turtlesim_node \uff0c - \u8282\u70b9\u76ee\u5f55\u4e00\u822c\u4f4d\u4e8e /opt/ros/melodic/lib \u4e0b\u9762\uff0c \u6bd4\u5982 /opt/ros/melodic/lib/turtlesim$ ls draw_square mimic turtle_teleop_key turtlesim_node","title":"2 ROS\u57fa\u7840\u77e5\u8bc6"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/2-ROS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#ros","text":"![toc]","title":"[[ROS]] \u57fa\u7840\u77e5\u8bc6"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/2-ROS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#_1","text":"example rosrun turtlesim turtlesim_node \u8fd0\u884c turtlesim \u5305\u91cc\u7684 turtlesim_node \u8282\u70b9 roscd turtlesim \u53d1\u73b0 turtlesim \u4e0b\u7684\u76ee\u5f55\u4f1a\u5207\u6362\u5230\u5305\u76ee\u5f55\u4e0b\uff0c\u4e5f\u5373 /opt/ros/melodic/share/turtlesim \uff0c \u518d ls \u4ee5\u4e0b\uff0c\u53d1\u73b0\u8be5\u5305\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u4e3a make images msg package.xml srv \u77e5\u8bc6\u70b9: - \u5305\u76ee\u5f55\u4e00\u822c\u4f4d\u4e8e /opt/ros/melodic/share/turtlesim - \u5305\u542b package.xml \u6587\u4ef6\u7684\u76ee\u5f55\u88ab\u79f0\u4e3a\u8f6f\u4ef6\u5305\u76ee\u5f55 - \u6ce8\u610f\u5230\u5305\u76ee\u5f55\u4e0b\u5e76\u6ca1\u6709\u8282\u70b9 turtlesim_node \uff0c - \u8282\u70b9\u76ee\u5f55\u4e00\u822c\u4f4d\u4e8e /opt/ros/melodic/lib \u4e0b\u9762\uff0c \u6bd4\u5982 /opt/ros/melodic/lib/turtlesim$ ls draw_square mimic turtle_teleop_key turtlesim_node","title":"\u5305\u8def\u5f84\u548c\u8282\u70b9\u8def\u5f84\u521d\u63a2"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","text":"title: 3-ROS\u5e38\u7528\u547d\u4ee4 author: mdeng li created: 2021-04-18 uid: 202104181014 description: tags: ros ROS\u5e38\u7528\u547d\u4ee4 \u00b6 \u7cfb\u7edf\u76f8\u5173 \u00b6 roswtf \u68c0\u6d4b\u5de5\u5177 \u00b6 \u68c0\u6d4b\u73af\u5883\u53d8\u91cf\u3001\u5b89\u88c5\u7684\u8282\u70b9\u7b49\u3002\u4e00\u822c\u7528\u4e8e\u5728ROS\u6ca1\u6709\u6309\u9884\u671f\u8fd0\u884c\u65f6\u7684\u68c0\u6d4b\u3002 \u8282\u70b9\u76f8\u5173 \u00b6 roscore \u8282\u70b9\u7ba1\u7406\u5668 \u00b6 \u8282\u70b9\u7ba1\u7406\u5668\u5e94\u8be5\u5728\u4f7f\u7528 ROS \u7684\u5168\u90e8\u65f6\u95f4\u5185\u6301\u7eed\u8fd0\u884c\u3002\u4e00\u4e2a\u5408 \u7406\u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\u5728\u4e00\u4e2a\u7ec8\u7aef\u542f\u52a8 roscore,\u7136\u540e\u6253\u5f00\u5176\u4ed6\u7ec8\u7aef\u8fd0\u884c \u5176\u4ed6\u7a0b\u5e8f\u3002 \u7ed3\u675f\u65f6,\u53ef\u4ee5\u901a\u8fc7\u5728 roscore \u7ec8\u7aef\u952e\u5165 Ctrl-C \u505c\u6b62\u8282\u70b9\u7ba1\u7406\u5668\u3002 TIPS: : \u6709\u65f6\u5019\u65e0\u6cd5\u542f\u52a8rviz,\u5219\u53ef\u4ee5 killall roscore \u8bd5\u8bd5 rosrun\u8fd0\u884c\u8282\u70b9 \u00b6 rosrun [package_name] [node_name] rosrun turtlesim turtlesim_node \u6ce8\u610f : \u8fd9\u6837\u5c31\u53ef\u4ee5\u4ee5\u4e0d\u540c\u7684\u8282\u70b9\u8fd0\u884c\u540c\u4e00\u4e2apackage rosrun package-name executable-name __name:=node_name \u5c06\u4f7f\u7528 node-name \u53c2\u6570\u7ed9\u51fa\u7684\u540d\u79f0\u8986\u76d6\u8282\u70b9\u7684\u9ed8 \u8ba4\u540d\u3002 rosnode \u5217\u51fa\u8282\u70b9\u3001\u7ec8\u6b62\u8282\u70b9 \u00b6 \u67e5\u770b\u8282\u70b9\u5217\u8868 rosnode list \u67e5\u770b\u7279\u5b9a\u8282\u70b9\u7684\u4fe1\u606f\uff1a rosnode info node-name \u7ec8\u6b62\u8282\u70b9: rosnode kill node-name roslaunch \u00b6 ^6df690 roslaunch \u53d8\u91cf \u00b6 \u6765\u6e90\u4e8e[[0-Tutorial Using roslaunch to start Gazebo, world files and URDF models]] You can append the following arguments to the launch files to change the behavior of Gazebo: paused Start Gazebo in a paused state (default false) use_sim_time Tells ROS nodes asking for time to get the Gazebo-published simulation time, published over the ROS topic /clock (default true) gui Launch the user interface window of Gazebo (default true) headless (deprecated) recording (previously called headless) Enable gazebo state log recording debug Start gzserver (Gazebo Server) in debug mode using gdb (default false) verbose Run gzserver and gzclient with --verbose, printing errors and warnings to the terminal (default false) server_required Terminate launch script when gzserver (Gazebo Server) exits (default false) gui_required Terminate launch script when gzclient (user interface window) exits (default false) roslaunch \u7684\u53d8\u91cf\u64cd\u4f5c\u793a\u4f8b \u00b6 roslaunch gazebo_ros empty_world.launch paused:=true use_sim_time:=false gui:=true throttled:=false recording:=false debug:=true verbose:=true gui_required:=true \u5305\u76f8\u5173 \u00b6 ROS_PACKAGE_PATH \u73af\u5883\u53d8\u91cf \u00b6 ROS_PACKAGE_PATH \u73af\u5883\u53d8\u91cf\u4e3aROS\u5305\u8def\u5f84\uff0c\u8f93\u5165 echo $ROS_PACKAGE_PATH \u6211\u7684\u5982\u4e0b: /opt/ros/noetic/share /home/mdeng1985/CworkSpace/catkin_ws/src /home/ubuntu/catkin_ws_pi/src \u5176\u4e2d\u7b2c1\u4e2a\u662f\u7cfb\u7edf\u81ea\u5e26\u7684package\u8def\u5f84\uff0c\u540e\u97622\u4e2a\u53ea\u6709\u5728catkin\u7a7a\u95f4\u4e0b\u8f93\u5165 source devel/setup.bash \u624d\u884c\u3002 TIPS : \u81ea\u5df1\u521b\u5efa\u7684\u5305\u662f\u5728src\u8def\u5f84\u4e0b\u3002\u4efb\u4f55 ROS \u80fd\u627e\u5230\u4e14\u5305\u542b package.xml\u6587\u4ef6\u7684\u76ee\u5f55\u5c31\u662f\u8f6f\u4ef6\u5305\u76ee\u5f55\uff0c\u56e0\u6b64src\u8def\u5f84\u4e0b\u6709\u51e0\u4e2apackage.xml\u6587\u4ef6\u5c31\u6709\u51e0\u4e2a\u5305\u3002 \u5982\u679c\u5e0c\u671b\u5728\u6253\u5f00\u547d\u4ee4\u884cshell\u65f6\u7684\u81ea\u52a8\u6dfb\u52a0\u73af\u5883\u53d8\u91cf\uff0c\u5219 echo \"source /home/ubuntu/catkin_ws_pi/devel/setup.bash\" >> ~/.bashrc ROSPACK \u00b6 rospack list \u5217\u51fa\u6240\u6709\u5305 rospack find roscpp \u67e5\u627eroscpp\u5305\u7684\u4f4d\u7f6e package\u4f9d\u8d56\u5173\u7cfb rospack depends <package_name> #\u4e00\u7ea7\u4f9d\u8d56 rospack depends1 <package_name> # \u95f4\u63a5\u4f9d\u8d56 \u6bd4\u5982 rospack depends1 rospy \u67e5\u770brospy\u7684\u4e00\u7ea7\u4f9d\u8d56 catkin_create_pkg \u521b\u5efa\u5305 \u00b6 \u6807\u51c6\u683c\u5f0f catkin_create_pkg package-name \u8fd9\u4e2a\u547d\u4ee4\u7684\u4f5c\u7528\u7684\u5728 \u5de5\u4f5c\u7a7a\u95f4\\src\\package-name\\ \u4e0b\u521b\u5efa\u4e86\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6 - package.xml - CMakeLists.txt \u5305\u547d\u540d\u89c4\u8303\uff1a\u53ea\u80fd\u7531\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u4e14\u9996\u5b57\u7b26\u4e3a\u5c0f\u5199\u5b57\u6bcd \u521b\u5efaPackage\u5e76\u7f16\u8bd1 cd ~/catkin_ws/src catkin_create_pkg <package_name> [ depend1 ] [ depend2 ] [ depend3 ] cd ~/catkin_ws catkin_make \u6bd4\u5982\uff1a catkin_create_pkg beginner_tutorial std_msgs rospy roscpp catkin_make\u7f16\u8bd1\u5305 \u00b6 catkin_make \u8be5\u547d\u4ee4\u4f5c\u7528\u5982\u4e0b\uff1a # \u5728\u4e00\u4e2aCMake\u9879\u76ee\u91cc mkdir build cd build cmake .. make make install # (\u53ef\u9009) \u8be6\u7ec6\u7528\u6cd5\u53c2\u8003\uff1a http://wiki.ros.org/catkin/commands/catkin_make \u5982\u679c\u53ea\u7f16\u8bd1\u67d0\u4e2a\u5305\uff1a catkin_make --only-pkg-with-deps <target_package> \u5982\u679c\u7f16\u8bd1\u53ef\u4ee5Debug\u7684\u5305\uff1a catkin_make -DCMAKE_BUILD_TYPE=Debug <target_package> rosls\u3001roscd\u67e5\u770b\u6216\u5207\u6362\u5230\u8f6f\u4ef6\u5305\u76ee\u5f55 \u00b6 \u6bd4\u5982\uff1a rosls roscpp_tutorials \u3001 roscd roscpp \u6ce8\u610f \uff1a\u53ea\u80fd\u5207\u6362\u5230\u90a3\u4e9b\u8def\u5f84\u5df2\u7ecf\u5305\u542b\u5728 ROS_PACKAGE_PATH \u73af\u5883\u53d8\u91cf\u4e2d\u7684\u8f6f\u4ef6\u5305\uff0c see echo $ROS_PACKAGE_PATH roscd beginner_tutorial/ \u5219\u5207\u6362\u5230 catkin_ws/src/beginner_tutorial/ \u76ee\u5f55\u4e0b rostopic \u548crosmsg \u00b6 rostopic -h rostopic list -h rostopic list rostopic list -v #\u5217\u51fa\u6bcf\u4e2atopic\u7684\u8be6\u7ec6\u4fe1\u606f rostopic type /turtle1/cmd_vel # \u663e\u793a\u8bdd\u9898/turtle1/cmd_vel\u7684\u6d88\u606f\u7c7b\u578b rosmsg show geometry_msgs/Twist # \u663e\u793ageometry_msgs/Twist\u6d88\u606f\u7684\u8be6\u7ec6\u60c5\u51b5 \u5411\u67d0\u8bdd\u9898\u53d1\u5e03\u6d88\u606f rostopic pub [ topic ] [ msg_type ] [ args ] rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]' # \u53ea\u53d1\u9001\u4e00\u6b21 rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]' # \u4ee51Hz\u7684\u547d\u4ee4\u62c9\u53d1\u9001 rqt_console \u00b6 rqt_plot \u00b6 rosrun rqt_plot rqt_plot \u4f7f\u7528 rqt_console\u663e\u793a\u65e5\u5fd7 \u00b6 \u8fd0\u884c\u4e24\u4e2a\u7ec8\u7aef\uff0c\u7ec8\u7aef1 rosrun rqt_console rqt_console \u7ec8\u7aef2 rosrun rqt_logger_level rqt_logger_level \u6309\u5b57\u6bcd\u7d22\u5f15 \u00b6 C \u00b6 \u5feb\u901f\u5207\u6362\u5230\u8fd0\u884croslaunch\u65f6\u7684log\u76ee\u5f55 cd ` roslaunch-logs ` R \u00b6 rospack list \u5217\u51fa\u5b89\u88c5\u7684\u6240\u6709\u8f6f\u4ef6\u5305 rospack find package-name \u67e5\u627e\u8f6f\u4ef6\u5305 rosls package-name \u67e5\u770b\u8f6f\u4ef6\u5305\u76ee\u5f55 roscd package-name \u5207\u6362\u5230\u8f6f\u4ef6\u5305\u76ee\u5f55 rosnode list \u5217\u51fa\u6b63\u5728\u8fd0\u884c\u7684\u6240\u6709\u8282\u70b9","title":"3 ROS\u5e38\u7528\u547d\u4ee4"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#ros","text":"","title":"ROS\u5e38\u7528\u547d\u4ee4"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_1","text":"","title":"\u7cfb\u7edf\u76f8\u5173"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#roswtf","text":"\u68c0\u6d4b\u73af\u5883\u53d8\u91cf\u3001\u5b89\u88c5\u7684\u8282\u70b9\u7b49\u3002\u4e00\u822c\u7528\u4e8e\u5728ROS\u6ca1\u6709\u6309\u9884\u671f\u8fd0\u884c\u65f6\u7684\u68c0\u6d4b\u3002","title":"roswtf\u68c0\u6d4b\u5de5\u5177"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_2","text":"","title":"\u8282\u70b9\u76f8\u5173"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#roscore","text":"\u8282\u70b9\u7ba1\u7406\u5668\u5e94\u8be5\u5728\u4f7f\u7528 ROS \u7684\u5168\u90e8\u65f6\u95f4\u5185\u6301\u7eed\u8fd0\u884c\u3002\u4e00\u4e2a\u5408 \u7406\u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\u5728\u4e00\u4e2a\u7ec8\u7aef\u542f\u52a8 roscore,\u7136\u540e\u6253\u5f00\u5176\u4ed6\u7ec8\u7aef\u8fd0\u884c \u5176\u4ed6\u7a0b\u5e8f\u3002 \u7ed3\u675f\u65f6,\u53ef\u4ee5\u901a\u8fc7\u5728 roscore \u7ec8\u7aef\u952e\u5165 Ctrl-C \u505c\u6b62\u8282\u70b9\u7ba1\u7406\u5668\u3002 TIPS: : \u6709\u65f6\u5019\u65e0\u6cd5\u542f\u52a8rviz,\u5219\u53ef\u4ee5 killall roscore \u8bd5\u8bd5","title":"roscore \u8282\u70b9\u7ba1\u7406\u5668"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#rosrun","text":"rosrun [package_name] [node_name] rosrun turtlesim turtlesim_node \u6ce8\u610f : \u8fd9\u6837\u5c31\u53ef\u4ee5\u4ee5\u4e0d\u540c\u7684\u8282\u70b9\u8fd0\u884c\u540c\u4e00\u4e2apackage rosrun package-name executable-name __name:=node_name \u5c06\u4f7f\u7528 node-name \u53c2\u6570\u7ed9\u51fa\u7684\u540d\u79f0\u8986\u76d6\u8282\u70b9\u7684\u9ed8 \u8ba4\u540d\u3002","title":"rosrun\u8fd0\u884c\u8282\u70b9"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#rosnode","text":"\u67e5\u770b\u8282\u70b9\u5217\u8868 rosnode list \u67e5\u770b\u7279\u5b9a\u8282\u70b9\u7684\u4fe1\u606f\uff1a rosnode info node-name \u7ec8\u6b62\u8282\u70b9: rosnode kill node-name","title":"rosnode \u5217\u51fa\u8282\u70b9\u3001\u7ec8\u6b62\u8282\u70b9"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#roslaunch","text":"^6df690","title":"roslaunch"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#roslaunch_1","text":"\u6765\u6e90\u4e8e[[0-Tutorial Using roslaunch to start Gazebo, world files and URDF models]] You can append the following arguments to the launch files to change the behavior of Gazebo: paused Start Gazebo in a paused state (default false) use_sim_time Tells ROS nodes asking for time to get the Gazebo-published simulation time, published over the ROS topic /clock (default true) gui Launch the user interface window of Gazebo (default true) headless (deprecated) recording (previously called headless) Enable gazebo state log recording debug Start gzserver (Gazebo Server) in debug mode using gdb (default false) verbose Run gzserver and gzclient with --verbose, printing errors and warnings to the terminal (default false) server_required Terminate launch script when gzserver (Gazebo Server) exits (default false) gui_required Terminate launch script when gzclient (user interface window) exits (default false)","title":"roslaunch \u53d8\u91cf"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#roslaunch_2","text":"roslaunch gazebo_ros empty_world.launch paused:=true use_sim_time:=false gui:=true throttled:=false recording:=false debug:=true verbose:=true gui_required:=true","title":"roslaunch \u7684\u53d8\u91cf\u64cd\u4f5c\u793a\u4f8b"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_3","text":"","title":"\u5305\u76f8\u5173"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#ros_package_path","text":"ROS_PACKAGE_PATH \u73af\u5883\u53d8\u91cf\u4e3aROS\u5305\u8def\u5f84\uff0c\u8f93\u5165 echo $ROS_PACKAGE_PATH \u6211\u7684\u5982\u4e0b: /opt/ros/noetic/share /home/mdeng1985/CworkSpace/catkin_ws/src /home/ubuntu/catkin_ws_pi/src \u5176\u4e2d\u7b2c1\u4e2a\u662f\u7cfb\u7edf\u81ea\u5e26\u7684package\u8def\u5f84\uff0c\u540e\u97622\u4e2a\u53ea\u6709\u5728catkin\u7a7a\u95f4\u4e0b\u8f93\u5165 source devel/setup.bash \u624d\u884c\u3002 TIPS : \u81ea\u5df1\u521b\u5efa\u7684\u5305\u662f\u5728src\u8def\u5f84\u4e0b\u3002\u4efb\u4f55 ROS \u80fd\u627e\u5230\u4e14\u5305\u542b package.xml\u6587\u4ef6\u7684\u76ee\u5f55\u5c31\u662f\u8f6f\u4ef6\u5305\u76ee\u5f55\uff0c\u56e0\u6b64src\u8def\u5f84\u4e0b\u6709\u51e0\u4e2apackage.xml\u6587\u4ef6\u5c31\u6709\u51e0\u4e2a\u5305\u3002 \u5982\u679c\u5e0c\u671b\u5728\u6253\u5f00\u547d\u4ee4\u884cshell\u65f6\u7684\u81ea\u52a8\u6dfb\u52a0\u73af\u5883\u53d8\u91cf\uff0c\u5219 echo \"source /home/ubuntu/catkin_ws_pi/devel/setup.bash\" >> ~/.bashrc","title":"ROS_PACKAGE_PATH \u73af\u5883\u53d8\u91cf"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#rospack","text":"rospack list \u5217\u51fa\u6240\u6709\u5305 rospack find roscpp \u67e5\u627eroscpp\u5305\u7684\u4f4d\u7f6e package\u4f9d\u8d56\u5173\u7cfb rospack depends <package_name> #\u4e00\u7ea7\u4f9d\u8d56 rospack depends1 <package_name> # \u95f4\u63a5\u4f9d\u8d56 \u6bd4\u5982 rospack depends1 rospy \u67e5\u770brospy\u7684\u4e00\u7ea7\u4f9d\u8d56","title":"ROSPACK"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#catkin_create_pkg","text":"\u6807\u51c6\u683c\u5f0f catkin_create_pkg package-name \u8fd9\u4e2a\u547d\u4ee4\u7684\u4f5c\u7528\u7684\u5728 \u5de5\u4f5c\u7a7a\u95f4\\src\\package-name\\ \u4e0b\u521b\u5efa\u4e86\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6 - package.xml - CMakeLists.txt \u5305\u547d\u540d\u89c4\u8303\uff1a\u53ea\u80fd\u7531\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u4e14\u9996\u5b57\u7b26\u4e3a\u5c0f\u5199\u5b57\u6bcd \u521b\u5efaPackage\u5e76\u7f16\u8bd1 cd ~/catkin_ws/src catkin_create_pkg <package_name> [ depend1 ] [ depend2 ] [ depend3 ] cd ~/catkin_ws catkin_make \u6bd4\u5982\uff1a catkin_create_pkg beginner_tutorial std_msgs rospy roscpp","title":"catkin_create_pkg\u521b\u5efa\u5305"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#catkin_make","text":"catkin_make \u8be5\u547d\u4ee4\u4f5c\u7528\u5982\u4e0b\uff1a # \u5728\u4e00\u4e2aCMake\u9879\u76ee\u91cc mkdir build cd build cmake .. make make install # (\u53ef\u9009) \u8be6\u7ec6\u7528\u6cd5\u53c2\u8003\uff1a http://wiki.ros.org/catkin/commands/catkin_make \u5982\u679c\u53ea\u7f16\u8bd1\u67d0\u4e2a\u5305\uff1a catkin_make --only-pkg-with-deps <target_package> \u5982\u679c\u7f16\u8bd1\u53ef\u4ee5Debug\u7684\u5305\uff1a catkin_make -DCMAKE_BUILD_TYPE=Debug <target_package>","title":"catkin_make\u7f16\u8bd1\u5305"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#roslsroscd","text":"\u6bd4\u5982\uff1a rosls roscpp_tutorials \u3001 roscd roscpp \u6ce8\u610f \uff1a\u53ea\u80fd\u5207\u6362\u5230\u90a3\u4e9b\u8def\u5f84\u5df2\u7ecf\u5305\u542b\u5728 ROS_PACKAGE_PATH \u73af\u5883\u53d8\u91cf\u4e2d\u7684\u8f6f\u4ef6\u5305\uff0c see echo $ROS_PACKAGE_PATH roscd beginner_tutorial/ \u5219\u5207\u6362\u5230 catkin_ws/src/beginner_tutorial/ \u76ee\u5f55\u4e0b","title":"rosls\u3001roscd\u67e5\u770b\u6216\u5207\u6362\u5230\u8f6f\u4ef6\u5305\u76ee\u5f55"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#rostopic-rosmsg","text":"rostopic -h rostopic list -h rostopic list rostopic list -v #\u5217\u51fa\u6bcf\u4e2atopic\u7684\u8be6\u7ec6\u4fe1\u606f rostopic type /turtle1/cmd_vel # \u663e\u793a\u8bdd\u9898/turtle1/cmd_vel\u7684\u6d88\u606f\u7c7b\u578b rosmsg show geometry_msgs/Twist # \u663e\u793ageometry_msgs/Twist\u6d88\u606f\u7684\u8be6\u7ec6\u60c5\u51b5 \u5411\u67d0\u8bdd\u9898\u53d1\u5e03\u6d88\u606f rostopic pub [ topic ] [ msg_type ] [ args ] rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]' # \u53ea\u53d1\u9001\u4e00\u6b21 rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]' # \u4ee51Hz\u7684\u547d\u4ee4\u62c9\u53d1\u9001","title":"rostopic \u548crosmsg"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#rqt_console","text":"","title":"rqt_console"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#rqt_plot","text":"rosrun rqt_plot rqt_plot","title":"rqt_plot"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#rqt_console_1","text":"\u8fd0\u884c\u4e24\u4e2a\u7ec8\u7aef\uff0c\u7ec8\u7aef1 rosrun rqt_console rqt_console \u7ec8\u7aef2 rosrun rqt_logger_level rqt_logger_level","title":"\u4f7f\u7528 rqt_console\u663e\u793a\u65e5\u5fd7"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_4","text":"","title":"\u6309\u5b57\u6bcd\u7d22\u5f15"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#c","text":"\u5feb\u901f\u5207\u6362\u5230\u8fd0\u884croslaunch\u65f6\u7684log\u76ee\u5f55 cd ` roslaunch-logs `","title":"C"},{"location":"ROS/0-ROS%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3-ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#r","text":"rospack list \u5217\u51fa\u5b89\u88c5\u7684\u6240\u6709\u8f6f\u4ef6\u5305 rospack find package-name \u67e5\u627e\u8f6f\u4ef6\u5305 rosls package-name \u67e5\u770b\u8f6f\u4ef6\u5305\u76ee\u5f55 roscd package-name \u5207\u6362\u5230\u8f6f\u4ef6\u5305\u76ee\u5f55 rosnode list \u5217\u51fa\u6b63\u5728\u8fd0\u884c\u7684\u6240\u6709\u8282\u70b9","title":"R"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/0-turtlesim%20package%E5%AE%9E%E8%B7%B5/","text":"turtlesim \u5b9e\u8df5 \u00b6 \u5173\u4e8epackage\u8def\u5f84\u548cnode\u8def\u5f84 \u00b6 $rospack find turtlesim /opt/ros/noetic/share/turtlesim $ roscd turtlesim cmake images msg package.xml srv $ cd /opt/ros/noetic/lib/turtlesim $ls draw_square mimic turtlesim_node turtle_teleop_key \u56e0\u6b64turtlesim\u4f4d\u4e8e /opt/ros/noetic/share/turtlesim , \u54ea\u91cc\u53c8 package.xml \uff0c\u5219\u8fd9\u4e2a\u8def\u5f84\u5c31\u662f\u5305\u7684\u8def\u5f84\u3002 \u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u8282\u70b9\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\u662f\u4f4d\u4e8e /opt/ros/noetic/lib/turtlesim \uff0c\u53ef\u4ee5\u770b\u51fa\u67094\u4e2a\u53ef\u6267\u884c\u6587\u4ef6: draw_square mimic turtlesim_node turtle_teleop_key \u8fd0\u884c\u8282\u70b9\u7684\u65b9\u5f0f \u00b6 \u8fd0\u884c turtlesim \u8282\u70b9\u7684\u4e24\u79cd\u65b9\u5f0f: rosrun turtlesim turtlesim_node cd /opt/ros/noetic/lib/turtlesim ./turtlesim_node \u4e00\u4e2a\u8282\u70b9\u4e3a\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c rosnode list \u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684\u8282\u70b9\u5217\u8868 \u6807\u51c6\u8bed\u6cd5\u5982\u4e0b\uff1a rosrun package-name executable-name TIPS: \u8282\u70b9\u540d\u79f0\u5e76\u4e0d\u4e00\u5b9a\u548c\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\u76f8\u540c\u3002\u8282\u70b9\u540d\u79f0\u662f\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u7684\uff1a rosrun package-name executable-name_name:=node-name \u8fd0\u884c turtlesim_node \u9700\u8981\u56fe\u5f62\u754c\u9762\uff0c\u56e0\u6b64\u5982\u679c\u662fwsl\u4e0b\u8fd0\u884c\uff0c\u5219 DISPLAY=:0 rosrun turtlesim turtlesim_node (see: [[6-linux\u8fdc\u7a0b\u684c\u9762\u8fde\u63a5#^1d69bc|xming\u56fe\u5f62\u5316\u663e\u793a]]) turtlesim_node \u662f\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u5b83\u5bf9\u5e94\u7684\u8282\u70b9\u540d\u4e3a turtlesim \u67e5\u770b\u8bdd\u9898\u3001\u6d88\u606f \u00b6 TIPS : \u6d88\u606f(msg)\u5b58\u653e\u5728\u8bdd\u9898(topci)\u91cc\uff0c \u5206\u4eab\u6d88\u606f\u65f6\u5019\uff0c\u53d1\u5e03\u6d88\u606f\u5230\u5bf9\u5e94\u8bdd\u9898 \u63a5\u6536\u4fe1\u606f\u65f6\uff0c\u8ba2\u9605\u8bdd\u9898 \u4f7f\u7528 rqt_graph \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u4e0d\u540c\u8282\u70b9\u7684\u6d88\u606f\u4f20\u9012\u5173\u7cfb ![[Pasted image 20201026205126.png]] \u692d\u5706\u5f62\u7684\u662f\u8282\u70b9, \u8be5\u8282\u70b9\u5373turtlesim (\u4e3a\u4ec0\u4e48\u4e0d\u662fturtlesim_node) \u77e9\u5f62\u7684\u662f\u8bdd\u9898 turtle1/pose turtle1/color_sensor turtle1/cmd_vel \u67e5\u770b\u5f53\u524d\u6d3b\u8dc3\u7684\u8bdd\u9898\uff1a ubuntu@ubuntu:~$ rostopic list /rosout /rosout_agg /statistics /turtle1/cmd_vel /turtle1/color_sensor /turtle1/pose \u6253\u5370\u8bdd\u9898\u91cc\u7684\u6d88\u606f rostopic echo topic-name \u6bd4\u5982: rostopic echo /turtle1/pose \u83b7\u53d6\u66f4\u591a\u5173\u4e8e\u8bdd\u9898\u7684\u4fe1\u606f rostopic info topic-name ubuntu@ubuntu:~$ rostopic info turtle1/pose Type: turtlesim/Pose # \u6d88\u606f\u7c7b\u578b Publishers: * /turtlesim (http://ubuntu:40937/) Subscribers: None \u67e5\u770b\u6d88\u606f\u7c7b\u578b\u7684\u8be6\u7ec6\u60c5\u51b5 rosmsg show message-type-name ubuntu@ubuntu:~$ rosmsg show turtlesim/Pose float32 x float32 y float32 theta float32 linear_velocity float32 angular_velocity TIPS: turtlesim/Pose \u8868\u793a\u7684 turtlesim \u5305\u91cc\u7684 Pose \u7c7b\u578b\u3002 \u7406\u89e3ROS\u8282\u70b9\u3001\u6d88\u606f\u548c\u8bdd\u9898 \u00b6 \u542f\u52a8turtlesim\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u7ec8\u7aef\u4e2d\uff0c\u5206\u522b\u6267\u884c\u4ee5\u4e0b\u4e09\u4e2a\u6307\u4ee4\uff1a roscore rosrun turtlesim turtlesim_node rosrun turtlesim turtle_teleop_key \u5982\u679c\u5207\u6362\u5230\u7b2c\u4e09\u4e2a\u7ec8\u7aef\uff08\u6267\u884c\u547d\u4ee4\u4e3aturtle_teleop_key\uff09\uff0c\u7136\u540e\u6309\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u6216\u53f3\u952e\uff0c\u6d77\u9f9f\u5c31\u4f1a\u54cd\u5e94\u4f60\u7684\u547d\u4ee4\u5f00\u59cb\u79fb\u52a8\u4e86\uff0c\u5e76\u5728\u5c4f\u5e55\u4e0a\u7559\u4e0b\u8fd0\u52a8\u8f68\u8ff9\u3002 \u603b\u7ed3 \u00b6 ROS\u7cfb\u7edf\u81ea\u5e26\u7684\u529f\u80fd\u5305\u4f4d\u4e8e /opt/ros/noetic/share \u76ee\u5f55\u4e0b\uff08rospack find) ROS\u7cfb\u7edf\u81ea\u5e26\u7684\u529f\u80fd\u5305\u7684\u529f\u80fd\u5305\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4f4d\u4e8e /opt/ros/noetic/lib \u76ee\u5f55\u4e0b \u8fd0\u884c\u8282\u70b9\u7684\u547d\u4ee4\uff1a rosrun package-name executable-name \uff08\u6ce8\u610f\u6700\u540e\u4e00\u4e2a\u662f\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u4e0d\u662f\u8282\u70b9\u540d\u79f0\uff09","title":"0 turtlesim package\u5b9e\u8df5"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/0-turtlesim%20package%E5%AE%9E%E8%B7%B5/#turtlesim","text":"","title":"turtlesim \u5b9e\u8df5"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/0-turtlesim%20package%E5%AE%9E%E8%B7%B5/#packagenode","text":"$rospack find turtlesim /opt/ros/noetic/share/turtlesim $ roscd turtlesim cmake images msg package.xml srv $ cd /opt/ros/noetic/lib/turtlesim $ls draw_square mimic turtlesim_node turtle_teleop_key \u56e0\u6b64turtlesim\u4f4d\u4e8e /opt/ros/noetic/share/turtlesim , \u54ea\u91cc\u53c8 package.xml \uff0c\u5219\u8fd9\u4e2a\u8def\u5f84\u5c31\u662f\u5305\u7684\u8def\u5f84\u3002 \u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u8282\u70b9\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\u662f\u4f4d\u4e8e /opt/ros/noetic/lib/turtlesim \uff0c\u53ef\u4ee5\u770b\u51fa\u67094\u4e2a\u53ef\u6267\u884c\u6587\u4ef6: draw_square mimic turtlesim_node turtle_teleop_key","title":"\u5173\u4e8epackage\u8def\u5f84\u548cnode\u8def\u5f84"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/0-turtlesim%20package%E5%AE%9E%E8%B7%B5/#_1","text":"\u8fd0\u884c turtlesim \u8282\u70b9\u7684\u4e24\u79cd\u65b9\u5f0f: rosrun turtlesim turtlesim_node cd /opt/ros/noetic/lib/turtlesim ./turtlesim_node \u4e00\u4e2a\u8282\u70b9\u4e3a\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c rosnode list \u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684\u8282\u70b9\u5217\u8868 \u6807\u51c6\u8bed\u6cd5\u5982\u4e0b\uff1a rosrun package-name executable-name TIPS: \u8282\u70b9\u540d\u79f0\u5e76\u4e0d\u4e00\u5b9a\u548c\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\u76f8\u540c\u3002\u8282\u70b9\u540d\u79f0\u662f\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u7684\uff1a rosrun package-name executable-name_name:=node-name \u8fd0\u884c turtlesim_node \u9700\u8981\u56fe\u5f62\u754c\u9762\uff0c\u56e0\u6b64\u5982\u679c\u662fwsl\u4e0b\u8fd0\u884c\uff0c\u5219 DISPLAY=:0 rosrun turtlesim turtlesim_node (see: [[6-linux\u8fdc\u7a0b\u684c\u9762\u8fde\u63a5#^1d69bc|xming\u56fe\u5f62\u5316\u663e\u793a]]) turtlesim_node \u662f\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u5b83\u5bf9\u5e94\u7684\u8282\u70b9\u540d\u4e3a turtlesim","title":"\u8fd0\u884c\u8282\u70b9\u7684\u65b9\u5f0f"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/0-turtlesim%20package%E5%AE%9E%E8%B7%B5/#_2","text":"TIPS : \u6d88\u606f(msg)\u5b58\u653e\u5728\u8bdd\u9898(topci)\u91cc\uff0c \u5206\u4eab\u6d88\u606f\u65f6\u5019\uff0c\u53d1\u5e03\u6d88\u606f\u5230\u5bf9\u5e94\u8bdd\u9898 \u63a5\u6536\u4fe1\u606f\u65f6\uff0c\u8ba2\u9605\u8bdd\u9898 \u4f7f\u7528 rqt_graph \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u4e0d\u540c\u8282\u70b9\u7684\u6d88\u606f\u4f20\u9012\u5173\u7cfb ![[Pasted image 20201026205126.png]] \u692d\u5706\u5f62\u7684\u662f\u8282\u70b9, \u8be5\u8282\u70b9\u5373turtlesim (\u4e3a\u4ec0\u4e48\u4e0d\u662fturtlesim_node) \u77e9\u5f62\u7684\u662f\u8bdd\u9898 turtle1/pose turtle1/color_sensor turtle1/cmd_vel \u67e5\u770b\u5f53\u524d\u6d3b\u8dc3\u7684\u8bdd\u9898\uff1a ubuntu@ubuntu:~$ rostopic list /rosout /rosout_agg /statistics /turtle1/cmd_vel /turtle1/color_sensor /turtle1/pose \u6253\u5370\u8bdd\u9898\u91cc\u7684\u6d88\u606f rostopic echo topic-name \u6bd4\u5982: rostopic echo /turtle1/pose \u83b7\u53d6\u66f4\u591a\u5173\u4e8e\u8bdd\u9898\u7684\u4fe1\u606f rostopic info topic-name ubuntu@ubuntu:~$ rostopic info turtle1/pose Type: turtlesim/Pose # \u6d88\u606f\u7c7b\u578b Publishers: * /turtlesim (http://ubuntu:40937/) Subscribers: None \u67e5\u770b\u6d88\u606f\u7c7b\u578b\u7684\u8be6\u7ec6\u60c5\u51b5 rosmsg show message-type-name ubuntu@ubuntu:~$ rosmsg show turtlesim/Pose float32 x float32 y float32 theta float32 linear_velocity float32 angular_velocity TIPS: turtlesim/Pose \u8868\u793a\u7684 turtlesim \u5305\u91cc\u7684 Pose \u7c7b\u578b\u3002","title":"\u67e5\u770b\u8bdd\u9898\u3001\u6d88\u606f"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/0-turtlesim%20package%E5%AE%9E%E8%B7%B5/#ros","text":"\u542f\u52a8turtlesim\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u7ec8\u7aef\u4e2d\uff0c\u5206\u522b\u6267\u884c\u4ee5\u4e0b\u4e09\u4e2a\u6307\u4ee4\uff1a roscore rosrun turtlesim turtlesim_node rosrun turtlesim turtle_teleop_key \u5982\u679c\u5207\u6362\u5230\u7b2c\u4e09\u4e2a\u7ec8\u7aef\uff08\u6267\u884c\u547d\u4ee4\u4e3aturtle_teleop_key\uff09\uff0c\u7136\u540e\u6309\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u6216\u53f3\u952e\uff0c\u6d77\u9f9f\u5c31\u4f1a\u54cd\u5e94\u4f60\u7684\u547d\u4ee4\u5f00\u59cb\u79fb\u52a8\u4e86\uff0c\u5e76\u5728\u5c4f\u5e55\u4e0a\u7559\u4e0b\u8fd0\u52a8\u8f68\u8ff9\u3002","title":"\u7406\u89e3ROS\u8282\u70b9\u3001\u6d88\u606f\u548c\u8bdd\u9898"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/0-turtlesim%20package%E5%AE%9E%E8%B7%B5/#_3","text":"ROS\u7cfb\u7edf\u81ea\u5e26\u7684\u529f\u80fd\u5305\u4f4d\u4e8e /opt/ros/noetic/share \u76ee\u5f55\u4e0b\uff08rospack find) ROS\u7cfb\u7edf\u81ea\u5e26\u7684\u529f\u80fd\u5305\u7684\u529f\u80fd\u5305\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4f4d\u4e8e /opt/ros/noetic/lib \u76ee\u5f55\u4e0b \u8fd0\u884c\u8282\u70b9\u7684\u547d\u4ee4\uff1a rosrun package-name executable-name \uff08\u6ce8\u610f\u6700\u540e\u4e00\u4e2a\u662f\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u4e0d\u662f\u8282\u70b9\u540d\u79f0\uff09","title":"\u603b\u7ed3"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/1-hello%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"hello \u529f\u80fd\u5305 \u00b6 \u521b\u5efa\u5305 \u00b6 catkin_create_pkg beginner_tutorial std_msgs rospy roscpp \u8fd9\u6837\u65b0\u5efa\u4e86\u4e00\u4e2a\u5305 beginner_tutorial , \u8fd0\u884c rosls beginner_tutorial \u5f97\u5230 CMakeLists.txt include package.xml src rosls\u663e\u793a\u7684\u5c31\u662f src/beginner_tutorial \u8def\u5f84\u4e0b\u7684\u76ee\u5f55 \u8fd9\u6837\u5728CMakeList.txt\u91cc\u5c31\u6709\uff1a ## Find catkin macros and libraries ## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz) ## is used, also find other catkin packages find_package ( catkin REQUIRED COMPONENTS roscpp rospy std_msgs ) \u5728package.xml\u91cc\u5c31\u6709\u4e86 <build_depend>roscpp</build_depend> <build_depend>rospy</build_depend> <build_depend>std_msgs</build_depend> \u5176\u4e2d\uff1a CMakeList.txt \u91cc\u7684\u4f9d\u8d56\u9879\u662f\u81ea\u5df1\u7f16\u8bd1\u5305\u9700\u8981\u7528\u7684\uff1b package.xml \u91cc\u7684\u4f9d\u8d56\u9879\u662f\u53d1\u5e03\u7ed9\u522b\u4eba\u7528\u7684\u3002 \u5173\u4e8e catkin_create_pkg \u7684\u4f7f\u7528\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u8003[[3-ROS\u5e38\u7528\u547d\u4ee4#catkin_create_pkg \u521b\u5efa\u5305]] \u7f16\u8f91\u6e90\u6587\u4ef6 \u00b6 \u7f16\u8f91 \u5de5\u4f5c\u7a7a\u95f4/src/beginner_tutorial/src/hello.cpp \u6587\u4ef6 (\u53ef\u4ee5\u5229\u7528vscode remote wsl\u8fdb\u884c\u7f16\u8f91) #include <ros/ros.h> int main ( int argc , char ** argv ) { // Initialize the ROS system . ros :: init ( argc , argv , \"hello_ros\" ); //hello_ros\u4e3a\u8282\u70b9\u9ed8\u8ba4\u540d // Establ ish this program as a ROS node . ros :: NodeHandle nh ; //\u8be5\u547d\u4ee4\u5c06\u672c\u7a0b\u5e8f\u6ce8\u518c\u4e3aROS\u8282\u70b9\u7ba1\u7406\u5668\u7684\u8282\u70b9 // Send some output as a log message . ROS_INFO_STREAM ( \"Hello, ROS!\" ); //\u751f\u6210\u4e00\u6761\u6d88\u606f } - ros::init(argc,argv,\"hello_ros\"); \u91cc\u7684 hello_ros \u4e3a\u9ed8\u8ba4\u8282\u70b9\u7684\u540d\u79f0\u3002 \u7f16\u8f91CMakeList.txt \u00b6 \u58f0\u660e\u53ef\u6267\u884c\u6587\u4ef6 add_executable ( executable-name source-files ) target_link_libraries ( executable-name ${ catkin_LIBRARIES } ) \u56e0\u6b64\u5728CMakeList\u7684\u672b\u5c3e\u52a0\u4e0a add_executable ( hello src/hello.cpp ) target_link_libraries ( hello ${ catkin_LIBRARIES } ) hello.cpp \u8def\u5f84\u662f\u76f8\u5bf9\u4e8e CMakeList.txt \u6240\u5728\u76ee\u5f55\u7684\u8def\u5f84 \u7f16\u8bd1\u5de5\u4f5c\u533a \u00b6 cd ~/catkin_ws catkin_make _CATKIN_SETUP_DIR \u66f4\u65b0\u73af\u5883\u53d8\u91cf \u00b6 Sourcing setup.bash source devel/setup.bash \u8fd9\u6837ROS\u624d\u80fd\u627e\u5230\u521b\u5efa\u7684\u5305\u548c\u53ef\u6267\u884c\u6587\u4ef6 \u6267\u884chello\u7a0b\u5e8f \u00b6 rosrun beginner_tutorial hello hello\u4e3a beginner_tutorial \u5305\u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5bf9\u5e94\u7684\u8282\u70b9\u7684 hello_ros \u3002 \u6ce8\u610f \uff1a\u9700\u8981\u4e8b\u5148\u8fd0\u884croscore \u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84 \uff1a catkin_ws_pi/devel/lib \u8def\u5f84\u4e0b\u3002 \u603b\u7ed3 \u00b6 \u5982\u679c\u662f\u5df2\u7ecf\u5b8c\u6210\u7f16\u5199\u4e86\uff0c\u5219\u6309\u7167\u5982\u4e0b\u7684\u6b65\u9aa4\uff1a cd ~/catkin_ws catkin_make source devel/setup.bash rosrun beginner_tutorial hello \u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\uff1a catkin_ws/devel/lib \u8def\u5f84\u4e0b\u3002","title":"1 hello\u529f\u80fd\u5305"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/1-hello%E5%8A%9F%E8%83%BD%E5%8C%85/#hello","text":"","title":"hello \u529f\u80fd\u5305"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/1-hello%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"catkin_create_pkg beginner_tutorial std_msgs rospy roscpp \u8fd9\u6837\u65b0\u5efa\u4e86\u4e00\u4e2a\u5305 beginner_tutorial , \u8fd0\u884c rosls beginner_tutorial \u5f97\u5230 CMakeLists.txt include package.xml src rosls\u663e\u793a\u7684\u5c31\u662f src/beginner_tutorial \u8def\u5f84\u4e0b\u7684\u76ee\u5f55 \u8fd9\u6837\u5728CMakeList.txt\u91cc\u5c31\u6709\uff1a ## Find catkin macros and libraries ## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz) ## is used, also find other catkin packages find_package ( catkin REQUIRED COMPONENTS roscpp rospy std_msgs ) \u5728package.xml\u91cc\u5c31\u6709\u4e86 <build_depend>roscpp</build_depend> <build_depend>rospy</build_depend> <build_depend>std_msgs</build_depend> \u5176\u4e2d\uff1a CMakeList.txt \u91cc\u7684\u4f9d\u8d56\u9879\u662f\u81ea\u5df1\u7f16\u8bd1\u5305\u9700\u8981\u7528\u7684\uff1b package.xml \u91cc\u7684\u4f9d\u8d56\u9879\u662f\u53d1\u5e03\u7ed9\u522b\u4eba\u7528\u7684\u3002 \u5173\u4e8e catkin_create_pkg \u7684\u4f7f\u7528\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u8003[[3-ROS\u5e38\u7528\u547d\u4ee4#catkin_create_pkg \u521b\u5efa\u5305]]","title":"\u521b\u5efa\u5305"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/1-hello%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"\u7f16\u8f91 \u5de5\u4f5c\u7a7a\u95f4/src/beginner_tutorial/src/hello.cpp \u6587\u4ef6 (\u53ef\u4ee5\u5229\u7528vscode remote wsl\u8fdb\u884c\u7f16\u8f91) #include <ros/ros.h> int main ( int argc , char ** argv ) { // Initialize the ROS system . ros :: init ( argc , argv , \"hello_ros\" ); //hello_ros\u4e3a\u8282\u70b9\u9ed8\u8ba4\u540d // Establ ish this program as a ROS node . ros :: NodeHandle nh ; //\u8be5\u547d\u4ee4\u5c06\u672c\u7a0b\u5e8f\u6ce8\u518c\u4e3aROS\u8282\u70b9\u7ba1\u7406\u5668\u7684\u8282\u70b9 // Send some output as a log message . ROS_INFO_STREAM ( \"Hello, ROS!\" ); //\u751f\u6210\u4e00\u6761\u6d88\u606f } - ros::init(argc,argv,\"hello_ros\"); \u91cc\u7684 hello_ros \u4e3a\u9ed8\u8ba4\u8282\u70b9\u7684\u540d\u79f0\u3002","title":"\u7f16\u8f91\u6e90\u6587\u4ef6"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/1-hello%E5%8A%9F%E8%83%BD%E5%8C%85/#cmakelisttxt","text":"\u58f0\u660e\u53ef\u6267\u884c\u6587\u4ef6 add_executable ( executable-name source-files ) target_link_libraries ( executable-name ${ catkin_LIBRARIES } ) \u56e0\u6b64\u5728CMakeList\u7684\u672b\u5c3e\u52a0\u4e0a add_executable ( hello src/hello.cpp ) target_link_libraries ( hello ${ catkin_LIBRARIES } ) hello.cpp \u8def\u5f84\u662f\u76f8\u5bf9\u4e8e CMakeList.txt \u6240\u5728\u76ee\u5f55\u7684\u8def\u5f84","title":"\u7f16\u8f91CMakeList.txt"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/1-hello%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"cd ~/catkin_ws catkin_make _CATKIN_SETUP_DIR","title":"\u7f16\u8bd1\u5de5\u4f5c\u533a"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/1-hello%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"Sourcing setup.bash source devel/setup.bash \u8fd9\u6837ROS\u624d\u80fd\u627e\u5230\u521b\u5efa\u7684\u5305\u548c\u53ef\u6267\u884c\u6587\u4ef6","title":"\u66f4\u65b0\u73af\u5883\u53d8\u91cf"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/1-hello%E5%8A%9F%E8%83%BD%E5%8C%85/#hello_1","text":"rosrun beginner_tutorial hello hello\u4e3a beginner_tutorial \u5305\u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5bf9\u5e94\u7684\u8282\u70b9\u7684 hello_ros \u3002 \u6ce8\u610f \uff1a\u9700\u8981\u4e8b\u5148\u8fd0\u884croscore \u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84 \uff1a catkin_ws_pi/devel/lib \u8def\u5f84\u4e0b\u3002","title":"\u6267\u884chello\u7a0b\u5e8f"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/1-hello%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"\u5982\u679c\u662f\u5df2\u7ecf\u5b8c\u6210\u7f16\u5199\u4e86\uff0c\u5219\u6309\u7167\u5982\u4e0b\u7684\u6b65\u9aa4\uff1a cd ~/catkin_ws catkin_make source devel/setup.bash rosrun beginner_tutorial hello \u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\uff1a catkin_ws/devel/lib \u8def\u5f84\u4e0b\u3002","title":"\u603b\u7ed3"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/2-%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF/","text":"\u53d1\u5e03\u548c\u8ba2\u9605\u6d88\u606f \u00b6 \u6d88\u606f\u8bf4\u660e \u00b6 \u6bcf\u4e00\u4e2a\u6d88\u606f\u7c7b\u578b\u90fd\u6709\u4e00\u4e2a\u76f8\u5bf9\u5e94 C++\u5934\u6587\u4ef6\u3002\u683c\u5f0f\u5982\u4e0b\uff1a #include <package_name/type_name.h> \u6bd4\u5982\uff1a #include <geometry_msgs/Twist.h> \u5728\u4f7f\u7528\u7684\u65f6\u5019\u5229\u7528\uff1a\uff1a\u6765\u5bf9\u5305\u540d\u548c\u7c7b\u578b\u540d\u8fdb\u884c\u5206\u5f00\u3002 \u8bf4\u660e Twist \u6d88\u606f\u662f\u5c5e\u4e8e geometry_msgs \u5305\u7684\u3002 \u53d1\u5e03\u6d88\u606f \u00b6 \u6e90\u7a0b\u5e8f \u00b6 \u6ce8\u610f\uff1a\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u53d1\u5e03\u591a\u4e2a\u8bdd\u9898\u7684\u6d88\u606f\uff0c\u9700\u8981\u521b\u5efa\u591a\u4e2apublisher\u5bf9\u8c61\u3002 \u56e0\u6b64\u53d1\u5e03\u6d88\u606f\u7a0b\u5e8f\u7684\u51e0\u4e2a\u6b65\u9aa4\u5982\u4e0b\uff1a \u58f0\u660e\u8981\u53d1\u5e03\u7684\u6d88\u606f\u7c7b\u578b\uff1a #include<geometry_msgs/Twist.h> \u521b\u5efa\u5e76\u521d\u59cb\u5316\u8282\u70b9\uff1a ros::init(argc,argv,\"publlish_velocity\"); ros::NodeHandle nh; publlish_velocity \u4e3a\u8282\u70b9\u540d nh \u4e3a\u8282\u70b9\u5bf9\u8c61 \u5728\u8282\u70b9\u5bf9\u8c61\u4e0a\u521b\u5efa\u4e00\u4e2a\u53d1\u5e03\u8005\u5bf9\u8c61 ros :: Publisher pub = nh . advertise < geometry_msgs :: Twist > ( \"turtle1/cmd_vel\" , 1000 ); pub \u4e3a\u53d1\u5e03\u8005\u5bf9\u8c61 geometry_msgs::Twist \u4e3a\u6d88\u606f\u7c7b\u578b turtle1/cmd_vel \u4e3a\u53d1\u5e03\u7684\u8bdd\u9898 1000 \u4e3a\u6d88\u606f\u5e8f\u5217\u7684\u5927\u5c0f\uff0c\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5927\u6570 \u6807\u51c6\u5f62\u5f0f\uff1a ros :: Publisher pub = node_handle . advertise < message_type > ( topic_name , queue_size ); \u521b\u5efa\u5e76\u586b\u5145\u6d88\u606f\u5bf9\u8c61 geometry_msgs :: Twist msg ; msg . linear . x = double ( rand ()) / double ( RAND_MAX ); msg . angular . z = 2 * double ( rand ()) / double ( RAND_MAX ) - 1 ; \u5229\u7528 rosmsg show geometry_msgs/Twist \u5f97\u5230 geometry_msgs / Vector3 linear float64 x float64 y float64 z geometry_msgs / Vector3 angular float64 x float64 y float64 z \u56e0\u6b64\u53ef\u4ee5\u8bbe\u7f6emsg.linear.x, msg.angular.z \u53d1\u5e03\u6d88\u606f pub . publish ( msg ); \u5b8c\u6574\u7684\u6e90\u6587\u4ef6\u5982\u4e0b\uff1a \u5728 beginner_tutorial \u76ee\u5f55\u4e0b\u7684src\u76ee\u5f55\u4e0b\u65b0\u5efapubvel.cpp\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b //This program publishes randomly-generated velocity messages for turtlesim #include <ros/ros.h> #include <geometry_msgs/Twist.h> //For geometry_msgs::Twsit #include <stdlib.h> //for rand and RAND_MAX int main ( int argc , char ** argv ) { ros :: init ( argc , argv , \"publlish_velocity\" ); ros :: NodeHandle nh ; ros :: Publisher pub = nh . advertise < geometry_msgs :: Twist > ( \"turtle1/cmd_vel\" , 1000 ); srand ( time ( 0 )); ros :: Rate loop_rate ( 2 ); while ( ros :: ok ()) { geometry_msgs :: Twist msg ; msg . linear . x = double ( rand ()) / double ( RAND_MAX ); msg . angular . z = 2 * double ( rand ()) / double ( RAND_MAX ) - 1 ; pub . publish ( msg ); ROS_INFO_STREAM ( \"Sending random velocity command : \" << \" linear=\" << msg . linear . x << \" angular=\" << msg . angular . z ); // Wait untilit's time for another iteration . loop_rate . sleep (); } } \u7f16\u8bd1\u6267\u884c\u6d41\u7a0b \u00b6 \u7531\u4e8e pubvel.cpp \u91cc\u9700\u8981include geometry_msgs \u5305\uff0c\u56e0\u6b64\u5728 beginner_tutorial \u6240\u5728\u76ee\u5f55\u7684 package.xml\u91cc\u52a0\u4e0a <build_depend> geometry_msgs </build_depend> <build_export_depend> geometry_msgs </build_export_depend> <exec_depend> geometry_msgs </exec_depend> \u7136\u540e CMakeLists.txt \u91cc\u52a0\u4e0a find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs geometry_msgs ) add_executable(pubvel src/pubvel.cpp) target_link_libraries(pubvel ${catkin_LIBRARIES}) **Step ** \u7f16\u8bd1\u5de5\u4f5c\u533a cd ~/catkin_ws catkin_make Step Sourcing setup.bash source devel/setup.bash Step \u6267\u884cpubvel\u7a0b\u5e8f rosrun beginner_tutorial pubvel pubvel\u4e3a beginner_tutorial \u5305\u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6 **Step**\u5f00\u542f\u4e09\u4e2a\u7ec8\u7aef\uff0c\u5206\u522b\u8fd0\u884c roscore rosrun turtlesim turtlesim_node rosrun beginner_tutorial pubvel \u5c31\u53ef\u4ee5\u770b\u5230\u5c0f\u6d77\u9f9f\u5728\u52a8\u4e86\u3002 \u8ba2\u9605\u8005\u6d88\u606f \u00b6 \u7a0b\u5e8f\u89e3\u8bfb \u00b6 \u8ba2\u9605\u6d88\u606f\u6d41\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\u8981\u58f0\u660e\u7684\u6d88\u606f\u7c7b\u578b #include<turtlesim/Pose.h> \u521b\u5efa\u5e76\u521d\u59cb\u5316\u8282\u70b9 ros :: init ( argc , argv , \"subscribe_to_pose\" ); ros :: NodeHandle nh ; \u521b\u5efa\u8ba2\u9605\u8005\u5bf9\u8c61 ros::Subscriber sub = nh.subscribe(\"turtle1/pose\",1000, &poseMessageReceive); turtle1/pose \u4e3a\u8981\u8ba2\u9605\u7684\u8bdd\u9898 poseMessageReceive \u4e3a\u6709\u6d88\u606f\u5230\u8fbe\u65f6\u8c03\u7528\u7684\u51fd\u6570\uff0c\u9700\u8981\u81ea\u5df1\u7f16\u5199\u3002 ros :: Subscriber sub = node_handle . subscribe ( topic_name , queue_size , pointer_to_callback_function ); ros::spin(); \u8868\u793a\u7ed9ros\u63a7\u5236\u6743\uff0c\u548c\u4e0b\u9762\u7684\u8bed\u53e5\u7b49\u540c while ( ros :: ok ( )) { ros :: spinOnce (); } \u5176\u4e2d\u56de\u8c03\u51fd\u6570\u7684 poseMessageReceive \u5199\u6cd5\u5982\u4e0b\uff1a void poseMessageReceive( const turtlesim::Pose& msg) { ROS_INFO_STREAM( std::setprecision ( 2 ) << std::fixed << \" position =(\" << msg . x << \" , \" << msg . y << \" ) \" << \" *direction=\" << msg . theta ); } - const turtlesim::Pose& msg \u8868\u660emsg\u7684\u7c7b\u578b\u4e3a turtlesim::Pose \u6e90\u7a0b\u5e8f\u5982\u4e0b\uff1a \uff08 beginner_tutorial \u7684src\u76ee\u5f55\u4e0b\u521b\u5efa subpose.cpp \uff09 // This program subscribes to turtle1/pose and shows its // messages on the screen . #include <ros/ros.h> #include <turtlesim/Pose.h> #include <iomanip> // for std::setprecision and std::fixed // A callback function . Executed each time a new pose // message arrives . void poseMessageReceive ( const turtlesim :: Pose & msg ) { ROS_INFO_STREAM ( std :: setprecision ( 2 ) << std :: fixed << \" position =(\" << msg . x << \" , \" << msg . y << \" ) \" << \" *direction=\" << msg . theta ); } int main ( int argc , char ** argv ){ ros :: init ( argc , argv , \"subscribe_to_pose\" ); ros :: NodeHandle nh ; ros :: Subscriber sub = nh . subscribe ( \"turtle1/pose\" , 1000 , & poseMessageReceive ); ros :: spin (); }","title":"2 \u53d1\u5e03\u548c\u8ba2\u9605\u6d88\u606f"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/2-%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF/#_1","text":"","title":"\u53d1\u5e03\u548c\u8ba2\u9605\u6d88\u606f"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/2-%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF/#_2","text":"\u6bcf\u4e00\u4e2a\u6d88\u606f\u7c7b\u578b\u90fd\u6709\u4e00\u4e2a\u76f8\u5bf9\u5e94 C++\u5934\u6587\u4ef6\u3002\u683c\u5f0f\u5982\u4e0b\uff1a #include <package_name/type_name.h> \u6bd4\u5982\uff1a #include <geometry_msgs/Twist.h> \u5728\u4f7f\u7528\u7684\u65f6\u5019\u5229\u7528\uff1a\uff1a\u6765\u5bf9\u5305\u540d\u548c\u7c7b\u578b\u540d\u8fdb\u884c\u5206\u5f00\u3002 \u8bf4\u660e Twist \u6d88\u606f\u662f\u5c5e\u4e8e geometry_msgs \u5305\u7684\u3002","title":"\u6d88\u606f\u8bf4\u660e"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/2-%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF/#_3","text":"","title":"\u53d1\u5e03\u6d88\u606f"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/2-%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF/#_4","text":"\u6ce8\u610f\uff1a\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u53d1\u5e03\u591a\u4e2a\u8bdd\u9898\u7684\u6d88\u606f\uff0c\u9700\u8981\u521b\u5efa\u591a\u4e2apublisher\u5bf9\u8c61\u3002 \u56e0\u6b64\u53d1\u5e03\u6d88\u606f\u7a0b\u5e8f\u7684\u51e0\u4e2a\u6b65\u9aa4\u5982\u4e0b\uff1a \u58f0\u660e\u8981\u53d1\u5e03\u7684\u6d88\u606f\u7c7b\u578b\uff1a #include<geometry_msgs/Twist.h> \u521b\u5efa\u5e76\u521d\u59cb\u5316\u8282\u70b9\uff1a ros::init(argc,argv,\"publlish_velocity\"); ros::NodeHandle nh; publlish_velocity \u4e3a\u8282\u70b9\u540d nh \u4e3a\u8282\u70b9\u5bf9\u8c61 \u5728\u8282\u70b9\u5bf9\u8c61\u4e0a\u521b\u5efa\u4e00\u4e2a\u53d1\u5e03\u8005\u5bf9\u8c61 ros :: Publisher pub = nh . advertise < geometry_msgs :: Twist > ( \"turtle1/cmd_vel\" , 1000 ); pub \u4e3a\u53d1\u5e03\u8005\u5bf9\u8c61 geometry_msgs::Twist \u4e3a\u6d88\u606f\u7c7b\u578b turtle1/cmd_vel \u4e3a\u53d1\u5e03\u7684\u8bdd\u9898 1000 \u4e3a\u6d88\u606f\u5e8f\u5217\u7684\u5927\u5c0f\uff0c\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5927\u6570 \u6807\u51c6\u5f62\u5f0f\uff1a ros :: Publisher pub = node_handle . advertise < message_type > ( topic_name , queue_size ); \u521b\u5efa\u5e76\u586b\u5145\u6d88\u606f\u5bf9\u8c61 geometry_msgs :: Twist msg ; msg . linear . x = double ( rand ()) / double ( RAND_MAX ); msg . angular . z = 2 * double ( rand ()) / double ( RAND_MAX ) - 1 ; \u5229\u7528 rosmsg show geometry_msgs/Twist \u5f97\u5230 geometry_msgs / Vector3 linear float64 x float64 y float64 z geometry_msgs / Vector3 angular float64 x float64 y float64 z \u56e0\u6b64\u53ef\u4ee5\u8bbe\u7f6emsg.linear.x, msg.angular.z \u53d1\u5e03\u6d88\u606f pub . publish ( msg ); \u5b8c\u6574\u7684\u6e90\u6587\u4ef6\u5982\u4e0b\uff1a \u5728 beginner_tutorial \u76ee\u5f55\u4e0b\u7684src\u76ee\u5f55\u4e0b\u65b0\u5efapubvel.cpp\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b //This program publishes randomly-generated velocity messages for turtlesim #include <ros/ros.h> #include <geometry_msgs/Twist.h> //For geometry_msgs::Twsit #include <stdlib.h> //for rand and RAND_MAX int main ( int argc , char ** argv ) { ros :: init ( argc , argv , \"publlish_velocity\" ); ros :: NodeHandle nh ; ros :: Publisher pub = nh . advertise < geometry_msgs :: Twist > ( \"turtle1/cmd_vel\" , 1000 ); srand ( time ( 0 )); ros :: Rate loop_rate ( 2 ); while ( ros :: ok ()) { geometry_msgs :: Twist msg ; msg . linear . x = double ( rand ()) / double ( RAND_MAX ); msg . angular . z = 2 * double ( rand ()) / double ( RAND_MAX ) - 1 ; pub . publish ( msg ); ROS_INFO_STREAM ( \"Sending random velocity command : \" << \" linear=\" << msg . linear . x << \" angular=\" << msg . angular . z ); // Wait untilit's time for another iteration . loop_rate . sleep (); } }","title":"\u6e90\u7a0b\u5e8f"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/2-%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF/#_5","text":"\u7531\u4e8e pubvel.cpp \u91cc\u9700\u8981include geometry_msgs \u5305\uff0c\u56e0\u6b64\u5728 beginner_tutorial \u6240\u5728\u76ee\u5f55\u7684 package.xml\u91cc\u52a0\u4e0a <build_depend> geometry_msgs </build_depend> <build_export_depend> geometry_msgs </build_export_depend> <exec_depend> geometry_msgs </exec_depend> \u7136\u540e CMakeLists.txt \u91cc\u52a0\u4e0a find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs geometry_msgs ) add_executable(pubvel src/pubvel.cpp) target_link_libraries(pubvel ${catkin_LIBRARIES}) **Step ** \u7f16\u8bd1\u5de5\u4f5c\u533a cd ~/catkin_ws catkin_make Step Sourcing setup.bash source devel/setup.bash Step \u6267\u884cpubvel\u7a0b\u5e8f rosrun beginner_tutorial pubvel pubvel\u4e3a beginner_tutorial \u5305\u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6 **Step**\u5f00\u542f\u4e09\u4e2a\u7ec8\u7aef\uff0c\u5206\u522b\u8fd0\u884c roscore rosrun turtlesim turtlesim_node rosrun beginner_tutorial pubvel \u5c31\u53ef\u4ee5\u770b\u5230\u5c0f\u6d77\u9f9f\u5728\u52a8\u4e86\u3002","title":"\u7f16\u8bd1\u6267\u884c\u6d41\u7a0b"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/2-%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF/#_6","text":"","title":"\u8ba2\u9605\u8005\u6d88\u606f"},{"location":"ROS/1-%E5%AE%9E%E8%B7%B5demo/2-%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF/#_7","text":"\u8ba2\u9605\u6d88\u606f\u6d41\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\u8981\u58f0\u660e\u7684\u6d88\u606f\u7c7b\u578b #include<turtlesim/Pose.h> \u521b\u5efa\u5e76\u521d\u59cb\u5316\u8282\u70b9 ros :: init ( argc , argv , \"subscribe_to_pose\" ); ros :: NodeHandle nh ; \u521b\u5efa\u8ba2\u9605\u8005\u5bf9\u8c61 ros::Subscriber sub = nh.subscribe(\"turtle1/pose\",1000, &poseMessageReceive); turtle1/pose \u4e3a\u8981\u8ba2\u9605\u7684\u8bdd\u9898 poseMessageReceive \u4e3a\u6709\u6d88\u606f\u5230\u8fbe\u65f6\u8c03\u7528\u7684\u51fd\u6570\uff0c\u9700\u8981\u81ea\u5df1\u7f16\u5199\u3002 ros :: Subscriber sub = node_handle . subscribe ( topic_name , queue_size , pointer_to_callback_function ); ros::spin(); \u8868\u793a\u7ed9ros\u63a7\u5236\u6743\uff0c\u548c\u4e0b\u9762\u7684\u8bed\u53e5\u7b49\u540c while ( ros :: ok ( )) { ros :: spinOnce (); } \u5176\u4e2d\u56de\u8c03\u51fd\u6570\u7684 poseMessageReceive \u5199\u6cd5\u5982\u4e0b\uff1a void poseMessageReceive( const turtlesim::Pose& msg) { ROS_INFO_STREAM( std::setprecision ( 2 ) << std::fixed << \" position =(\" << msg . x << \" , \" << msg . y << \" ) \" << \" *direction=\" << msg . theta ); } - const turtlesim::Pose& msg \u8868\u660emsg\u7684\u7c7b\u578b\u4e3a turtlesim::Pose \u6e90\u7a0b\u5e8f\u5982\u4e0b\uff1a \uff08 beginner_tutorial \u7684src\u76ee\u5f55\u4e0b\u521b\u5efa subpose.cpp \uff09 // This program subscribes to turtle1/pose and shows its // messages on the screen . #include <ros/ros.h> #include <turtlesim/Pose.h> #include <iomanip> // for std::setprecision and std::fixed // A callback function . Executed each time a new pose // message arrives . void poseMessageReceive ( const turtlesim :: Pose & msg ) { ROS_INFO_STREAM ( std :: setprecision ( 2 ) << std :: fixed << \" position =(\" << msg . x << \" , \" << msg . y << \" ) \" << \" *direction=\" << msg . theta ); } int main ( int argc , char ** argv ){ ros :: init ( argc , argv , \"subscribe_to_pose\" ); ros :: NodeHandle nh ; ros :: Subscriber sub = nh . subscribe ( \"turtle1/pose\" , 1000 , & poseMessageReceive ); ros :: spin (); }","title":"\u7a0b\u5e8f\u89e3\u8bfb"},{"location":"ROS/5-gazebo/0-gazebo_ros_pkgs%E5%AE%89%E8%A3%85/","text":"gazebo_ros_pkgs\u5b89\u88c5 \u00b6 \u5728[[ROS]]\u4e2d\u5b89\u88c5gazebo\u7684\u65b9\u6cd5 \u00b6 \u6ce8\u610f ROS WIKI \u7ed9\u51fa\u7684\u5b89\u88c5\u6b65\u9aa4\u8fc7\u65f6\u4e86, \u6211\u8fd9\u91cc\u53c2\u8003\u7684\u662f Installing gazebo_ros_pkgs (ROS 1) \u7ed9\u51fa\u7684\u6b65\u9aa4\u8fdb\u884c\u5b89\u88c5\u7684\u3002 \u5206\u4e3a3\u4e2a\u6b65\u9aa4\uff1a \u5b89\u88c5ros melodic \u5b89\u88c5gazebo \u5b89\u88c5 gazebo_ros_pkgs TIPS\uff1a gazebo_ros \u5b89\u88c5\u4f4d\u7f6e\u4f4d\u4e8e /opt/ros/melodic/share/gazebo_ros \u9ed8\u8ba4\u7684\u65f6\u5019\u5b89\u88c5ros full\u7248\u672c\u7684\u65f6\u5019\u4f1a\u5b89\u88c5gazebo\uff0c\u56e0\u6b64\u7b2c1\u6b65\u548c\u7b2c2\u6b65\u662f\u4e00\u4f53\u7684\u3002 \u4e3a\u4e86\u663e\u793agazebo\u754c\u9762\uff0c\u9996\u5148\u9700\u8981\u53c2\u8003wsl\u4e2d\u7684\u8bf4\u660e\uff0c\u8bbe\u7f6e\u597d[[6-linux\u8fdc\u7a0b\u684c\u9762\u8fde\u63a5#^b17cc1|vcxsrv]]\u4e2a\u547d\u4ee4 \u5728wsl bash\u4e0b: gazebo \u5373\u53ef\u542f\u52a8gazebo\u754c\u9762 \u7b2c3\u6b65\u597d\u50cf\u4e5f\u5b89\u88c5\u597d\u4e86\uff0c\u6211\u8fd9\u91cc\u6d4b\u8bd5\u4e5f\u662f\u53ef\u4ee5\u542f\u52a8\u7684 source /opt/ros/melodic/setup.bash terminal1$: roscore terminal2$: rosrun gazebo_ros gazebo \u67e5\u770b\u76f8\u5e94\u7684topics\u548cservices rostopic list rosservice list \u53c2\u8003\u8d44\u6599 \u00b6 \u5b98\u65b9tutorial - Installing gazebo_ros_pkgs (ROS 1)","title":"0 gazebo ros pkgs\u5b89\u88c5"},{"location":"ROS/5-gazebo/0-gazebo_ros_pkgs%E5%AE%89%E8%A3%85/#gazebo_ros_pkgs","text":"","title":"gazebo_ros_pkgs\u5b89\u88c5"},{"location":"ROS/5-gazebo/0-gazebo_ros_pkgs%E5%AE%89%E8%A3%85/#rosgazebo","text":"\u6ce8\u610f ROS WIKI \u7ed9\u51fa\u7684\u5b89\u88c5\u6b65\u9aa4\u8fc7\u65f6\u4e86, \u6211\u8fd9\u91cc\u53c2\u8003\u7684\u662f Installing gazebo_ros_pkgs (ROS 1) \u7ed9\u51fa\u7684\u6b65\u9aa4\u8fdb\u884c\u5b89\u88c5\u7684\u3002 \u5206\u4e3a3\u4e2a\u6b65\u9aa4\uff1a \u5b89\u88c5ros melodic \u5b89\u88c5gazebo \u5b89\u88c5 gazebo_ros_pkgs TIPS\uff1a gazebo_ros \u5b89\u88c5\u4f4d\u7f6e\u4f4d\u4e8e /opt/ros/melodic/share/gazebo_ros \u9ed8\u8ba4\u7684\u65f6\u5019\u5b89\u88c5ros full\u7248\u672c\u7684\u65f6\u5019\u4f1a\u5b89\u88c5gazebo\uff0c\u56e0\u6b64\u7b2c1\u6b65\u548c\u7b2c2\u6b65\u662f\u4e00\u4f53\u7684\u3002 \u4e3a\u4e86\u663e\u793agazebo\u754c\u9762\uff0c\u9996\u5148\u9700\u8981\u53c2\u8003wsl\u4e2d\u7684\u8bf4\u660e\uff0c\u8bbe\u7f6e\u597d[[6-linux\u8fdc\u7a0b\u684c\u9762\u8fde\u63a5#^b17cc1|vcxsrv]]\u4e2a\u547d\u4ee4 \u5728wsl bash\u4e0b: gazebo \u5373\u53ef\u542f\u52a8gazebo\u754c\u9762 \u7b2c3\u6b65\u597d\u50cf\u4e5f\u5b89\u88c5\u597d\u4e86\uff0c\u6211\u8fd9\u91cc\u6d4b\u8bd5\u4e5f\u662f\u53ef\u4ee5\u542f\u52a8\u7684 source /opt/ros/melodic/setup.bash terminal1$: roscore terminal2$: rosrun gazebo_ros gazebo \u67e5\u770b\u76f8\u5e94\u7684topics\u548cservices rostopic list rosservice list","title":"\u5728[[ROS]]\u4e2d\u5b89\u88c5gazebo\u7684\u65b9\u6cd5"},{"location":"ROS/5-gazebo/0-gazebo_ros_pkgs%E5%AE%89%E8%A3%85/#_1","text":"\u5b98\u65b9tutorial - Installing gazebo_ros_pkgs (ROS 1)","title":"\u53c2\u8003\u8d44\u6599"},{"location":"ROS/5-gazebo/0-gazebo%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","text":"title: 0-1-gazebo\u57fa\u7840\u77e5\u8bc6 author: mdeng li created: 2021-03-29 uid: 202103291701 description: tags: gazebo\u57fa\u7840\u77e5\u8bc6 \u00b6 gazebo\u4e2d\u7684\u73af\u5883\u53d8\u91cf \u00b6 ^d51403 gazebo\u7684\u73af\u5883\u53d8\u91cf\u90fd\u5b58\u50a8\u5728 /usr/share/gazebo/setup.sh \u4e0b\u3002\u663e\u793a\u4e00\u4e0b\u5f97\u5230 export GAZEBO_MASTER_URI=${GAZEBO_MASTER_URI:-http://localhost:11345} export GAZEBO_MODEL_DATABASE_URI=http://models.gazebosim.org export GAZEBO_RESOURCE_PATH=/usr/share/gazebo-11:${GAZEBO_RESOURCE_PATH} export GAZEBO_PLUGIN_PATH=/usr/lib/aarch64-linux-gnu/gazebo-11/plugins:${GAZEBO_PLUGIN_PATH} export GAZEBO_MODEL_PATH=/usr/share/gazebo-11/models:${GAZEBO_MODEL_PATH} export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib/aarch64-linux-gnu/gazebo-11/plugins export OGRE_RESOURCE_PATH=/usr/lib/aarch64-linux-gnu/OGRE-1.9.0 \u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u89e3\u91ca\u5982\u4e0b: GAZEBO_MODEL_PATH \u6a21\u578b\u7684\u641c\u7d22\u76ee\u5f55\uff0c\u6bcf\u4e2a\u76ee\u5f55\u7528\u5206\u53f7\u5206\u5f00 GAZEBO_RESOURCE_PATH gazebo\u641c\u7d22\u7684\u5176\u4ed6\u8d44\u6e90\u8def\u5f84\uff0c\u6bd4\u5982[[0-gazebo\u91cc\u7684world]]\u6587\u4ef6\u548c\u591a\u5a92\u4f53\u6587\u4ef6 \u5176\u4ed6\u7684\u53ef\u53c2\u8003 Environment Variables gazebo server vs gazebo client \u00b6 gzserver\u4e0d\u4f1a\u542f\u52a8\u5ba2\u6237\u7aef\uff0cgzclient\u8fde\u63a5gzserver\u7528\u4e8e\u53ef\u89c6\u5316\uff0cgazebo\u5219\u540c\u65f6\u542f\u52a8server\u548c\u5ba2\u6237\u7aef\u3002 \u8981\u542f\u52a8\u67d0\u4e2aworld\u6587\u4ef6\u7684\u547d\u4ee4\u5982\u4e0b\uff0c\uff08\u5148\u5728\u4e00\u4e2a\u7ec8\u7aef\u542f\u52a8roscore\uff09 rosrun gazebo_ros gazebo worlds/mud.world","title":"0 gazebo\u57fa\u7840\u77e5\u8bc6"},{"location":"ROS/5-gazebo/0-gazebo%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#gazebo","text":"","title":"gazebo\u57fa\u7840\u77e5\u8bc6"},{"location":"ROS/5-gazebo/0-gazebo%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#gazebo_1","text":"^d51403 gazebo\u7684\u73af\u5883\u53d8\u91cf\u90fd\u5b58\u50a8\u5728 /usr/share/gazebo/setup.sh \u4e0b\u3002\u663e\u793a\u4e00\u4e0b\u5f97\u5230 export GAZEBO_MASTER_URI=${GAZEBO_MASTER_URI:-http://localhost:11345} export GAZEBO_MODEL_DATABASE_URI=http://models.gazebosim.org export GAZEBO_RESOURCE_PATH=/usr/share/gazebo-11:${GAZEBO_RESOURCE_PATH} export GAZEBO_PLUGIN_PATH=/usr/lib/aarch64-linux-gnu/gazebo-11/plugins:${GAZEBO_PLUGIN_PATH} export GAZEBO_MODEL_PATH=/usr/share/gazebo-11/models:${GAZEBO_MODEL_PATH} export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib/aarch64-linux-gnu/gazebo-11/plugins export OGRE_RESOURCE_PATH=/usr/lib/aarch64-linux-gnu/OGRE-1.9.0 \u8fd9\u4e9b\u73af\u5883\u53d8\u91cf\u89e3\u91ca\u5982\u4e0b: GAZEBO_MODEL_PATH \u6a21\u578b\u7684\u641c\u7d22\u76ee\u5f55\uff0c\u6bcf\u4e2a\u76ee\u5f55\u7528\u5206\u53f7\u5206\u5f00 GAZEBO_RESOURCE_PATH gazebo\u641c\u7d22\u7684\u5176\u4ed6\u8d44\u6e90\u8def\u5f84\uff0c\u6bd4\u5982[[0-gazebo\u91cc\u7684world]]\u6587\u4ef6\u548c\u591a\u5a92\u4f53\u6587\u4ef6 \u5176\u4ed6\u7684\u53ef\u53c2\u8003 Environment Variables","title":"gazebo\u4e2d\u7684\u73af\u5883\u53d8\u91cf"},{"location":"ROS/5-gazebo/0-gazebo%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#gazebo-server-vs-gazebo-client","text":"gzserver\u4e0d\u4f1a\u542f\u52a8\u5ba2\u6237\u7aef\uff0cgzclient\u8fde\u63a5gzserver\u7528\u4e8e\u53ef\u89c6\u5316\uff0cgazebo\u5219\u540c\u65f6\u542f\u52a8server\u548c\u5ba2\u6237\u7aef\u3002 \u8981\u542f\u52a8\u67d0\u4e2aworld\u6587\u4ef6\u7684\u547d\u4ee4\u5982\u4e0b\uff0c\uff08\u5148\u5728\u4e00\u4e2a\u7ec8\u7aef\u542f\u52a8roscore\uff09 rosrun gazebo_ros gazebo worlds/mud.world","title":"gazebo server vs gazebo client"},{"location":"ROS/5-gazebo/0-gazebo%E9%87%8C%E7%9A%84world/","text":"gazebo\u91cc\u7684world \u00b6 world\u4f4d\u7f6e \u00b6 \u4f4d\u4e8e /usr/share/gazebo-9/worlds \u76ee\u5f55\u4e0b [[0-Tutorial Using roslaunch to start Gazebo, world files and URDF models#^6d297d|\u5173\u4e8e\u4e16\u754c\u6a21\u578b\u7684\u4f4d\u7f6e]] Model Files \u00b6 \u6a21\u578b\u6587\u4ef6\u5728worlds\u6587\u4ef6\u7684\u683c\u5f0f\u5982\u4e0b\uff1a <include> <uri> model://model_file_name </uri> </include>","title":"0 gazebo\u91cc\u7684world"},{"location":"ROS/5-gazebo/0-gazebo%E9%87%8C%E7%9A%84world/#gazeboworld","text":"","title":"gazebo\u91cc\u7684world"},{"location":"ROS/5-gazebo/0-gazebo%E9%87%8C%E7%9A%84world/#world","text":"\u4f4d\u4e8e /usr/share/gazebo-9/worlds \u76ee\u5f55\u4e0b [[0-Tutorial Using roslaunch to start Gazebo, world files and URDF models#^6d297d|\u5173\u4e8e\u4e16\u754c\u6a21\u578b\u7684\u4f4d\u7f6e]]","title":"world\u4f4d\u7f6e"},{"location":"ROS/5-gazebo/0-gazebo%E9%87%8C%E7%9A%84world/#model-files","text":"\u6a21\u578b\u6587\u4ef6\u5728worlds\u6587\u4ef6\u7684\u683c\u5f0f\u5982\u4e0b\uff1a <include> <uri> model://model_file_name </uri> </include>","title":"Model Files"},{"location":"ROS/5-gazebo/2-gazebo%20tutorial%202%E4%B9%8BRRBot%E6%80%BB%E7%BB%93/","text":"title: 2-gazebo tutorial 2\u4e4bRRBot\u603b\u7ed3 author: mdeng li created: 2021-04-03 uid: 202104032001 description: tags: 2-gazebo tutorial 2\u4e4bRRBot\u603b\u7ed3 \u00b6 \u672c\u7b14\u8bb0\u4e3b\u8981\u5bf9\u5b98\u65b9\u7684\u5982\u4e0b4\u4e2a\u6559\u7a0b\u8fdb\u884c\u4e00\u4e2a\u6c47\u603b\u548c\u603b\u7ed3: [[1-Tutorial Using a URDF in Gazebo]] [[2-Tutorial Using Gazebo plugins with ROS]] [[3-Tutorial ROS Control]] [[4-Tutorial ROS Communication]] \u9700\u8981\u4e0b\u8f7dRRBot\u5de5\u5177\u5305: cd ~/catkin_ws/src/ git clone https://github.com/ros-simulation/gazebo_ros_demos.git cd .. catkin_make \u6587\u4ef6\u8bf4\u660e \u00b6 . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 gazebo_tutorials \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 launch \u2502 \u2502 \u2514\u2500\u2500 hello.launch \u2502 \u251c\u2500\u2500 package.xml \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 simple_world_plugin.cpp \u2502 \u2514\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 hello.world \u251c\u2500\u2500 rrbot_control \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 config \u2502 \u2502 \u2514\u2500\u2500 rrbot_control.yaml \u2502 \u251c\u2500\u2500 launch \u2502 \u2502 \u251c\u2500\u2500 rrbot_control.launch \u2502 \u2502 \u251c\u2500\u2500 rrbot_rqt.launch \u2502 \u2502 \u2514\u2500\u2500 rrbot_rqt.perspective \u2502 \u2514\u2500\u2500 package.xml \u251c\u2500\u2500 rrbot_description \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 launch \u2502 \u2502 \u251c\u2500\u2500 rrbot.rviz \u2502 \u2502 \u2514\u2500\u2500 rrbot_rviz.launch \u2502 \u251c\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 hokuyo.dae \u2502 \u251c\u2500\u2500 package.xml \u2502 \u2514\u2500\u2500 urdf \u2502 \u251c\u2500\u2500 materials.xacro \u2502 \u251c\u2500\u2500 rrbot.gazebo \u2502 \u251c\u2500\u2500 rrbot.xacro \u2502 \u2514\u2500\u2500 rrbot.xml \u2514\u2500\u2500 rrbot_gazebo \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 rrbot_world.launch \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 rrbot.world \u9996\u5148\u770b robot_description \u251c\u2500\u2500 rrbot_description \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 launch \u2502 \u2502 \u251c\u2500\u2500 rrbot.rviz \u2502 \u2502 \u2514\u2500\u2500 rrbot_rviz.launch \u2502 \u251c\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 hokuyo.dae \u2502 \u251c\u2500\u2500 package.xml \u2502 \u2514\u2500\u2500 urdf \u2502 \u251c\u2500\u2500 materials.xacro \u2502 \u251c\u2500\u2500 rrbot.gazebo \u2502 \u251c\u2500\u2500 rrbot.xacro \u2502 \u2514\u2500\u2500 rrbot.xml rrbot.xacro \u4e3a\u673a\u5668\u4eba\u7684\u6a21\u578b\u6587\u4ef6, \u8c03\u7528\u4e86 rrbot.gazebo \u6587\u4ef6\u548c materials.xacro rrbot.gazebo \u4e2d\u7684\u5143\u7d20\u7528\u4e8eGazebo\u4eff\u771f materials.xacro \u4e2d\u7684\u5143\u7d20\u5219\u662f\u7528\u4e8eRViz\u663e\u793a \u66f4\u8be6\u7ec6\u7684\u89e3\u8bfb\u89c1[[1-Tutorial Using a URDF in Gazebo#^23c4ed| rrbot.xacro \u6587\u4ef6\u89e3\u6790]] \u5728Rviz\u4e2d\u663e\u793a \u00b6 \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4: roslaunch rrbot_description rrbot_rviz.launch \u8be5launch\u6587\u4ef6\u4e2d\u7684\u4e3b\u8981\u539f\u7406\u662f\u8fd0\u884crviz\u5305\u7684rviz\u8282\u70b9,\u8c03\u7528\u7684\u662f rrbot.rviz \u6587\u4ef6, \u5176\u4e2d\u8be5\u6587\u4ef6\u4e2d\u7684\u53c2\u6570 robot_description \u91cc\u7ed9\u51fa\u4e86\u673a\u5668\u4eba\u7684\u6a21\u578b rrbot.xacro ,\u8be5\u53c2\u6570\u662f\u4f20\u9012\u7ed9 rrbot.rviz \u66f4\u8be6\u7ec6\u7684\u89e3\u8bfb\u89c1[[2-gazebo tutorial 2\u4e4bRRBot\u603b\u7ed3#^d745a7]] \u5728Gazebo\u4e2d\u663e\u793a \u00b6 \u8fd0\u884c\u5982\u4e0b\u7684\u547d\u4ee4 roslaunch rrbot_gazebo rrbot_world.launch rrbot_world.launch \u4e2d\u7684\u4e3b\u8981\u6d41\u7a0b - \u5c06 rrbot.world \u4e16\u754c\u6587\u4ef6\u4f20\u9012\u5230 $(find gazebo_ros)/launch/empty_world.launch \u4e2d\u663e\u793aworld - rrbot.xacro \u8d4b\u503c\u7ed9 robot_description \u53c2\u6570 - \u8fd0\u884c spwan_model \u8282\u70b9\u751f\u6210\u673a\u5668\u4eba, \u8be5\u673a\u5668\u4eba\u6a21\u578b\u7531 robot_description \u7ed9\u51fa. \u8fd0\u884c\u5b8c\u4ee5\u540e\u4f1a\u5728Gazebo\u663e\u793a\u8be5\u6a21\u578b, \u5e76\u4f1a\u968f\u7740\u91cd\u529b\u7684\u4f5c\u7528\u8fd0\u52a8. \u5728Gazebo\u91cc\u63a7\u5236\u673a\u5668\u4eba\u8fd0\u52a8 \u00b6 \u9996\u5148\u542f\u52a8\u4eff\u771f roslaunch rrbot_gazebo rrbot_world.launch \u7136\u540e\u542f\u52a8\u63a7\u5236\u5668 roslaunch rrbot_control rrbot_control.launch \u7ed9\u63a7\u5236\u5668\u53d1\u9001\u547d\u4ee4\u5c31\u53ef\u4ee5\u63a7\u5236\u673a\u68b0\u81c2\u8fd0\u52a8\u4e86 rostopic pub -1 /rrbot/joint1_position_controller/command std_msgs/Float64 \"data: 1.5\" rostopic pub -1 /rrbot/joint2_position_controller/command std_msgs/Float64 \"data: 1.0\" \u66f4\u8be6\u7ec6\u7684\u89e3\u8bfb\u89c1[[3-Tutorial ROS Control#^ae67a5|RRBot \u5b9e\u8df5]] \u6dfb\u52a0\u53ef\u4e50\u74f6\u5e76\u63a7\u5236\u8fd0\u52a8 \u00b6 \u9996\u5148\u542f\u52a8\u4eff\u771f roslaunch rrbot_gazebo rrbot_world.launch \u6dfb\u52a0\u4e00\u4e2a\u53ef\u4e50\u74f6\u6a21\u578b\u5230\u573a\u666f\u4e2d rosrun gazebo_ros spawn_model -sdf -database coke_can -model coke_can -y 1 \u5229\u7528rostopic\u53d1\u5e03\u5668,\u8bbe\u7f6e\u53ef\u4e50\u74f6\u7684\u521d\u59cb\u72b6\u6001 rosservice call /gazebo/set_model_state '{model_state: { model_name: coke_can, pose: { position: { x: 0.3, y: 0.2 ,z: 0 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }' Gazebo\u4f1a\u53d1\u5e03 model_states \u548c link_states \u8f93\u51fa\u6a21\u578b\u6216\u8005\u6a21\u578b\u91cc\u7684link\u72b6\u6001,\u56e0\u6b64\u53ef\u4ee5\u67e5\u770b\u8fd9\u4e9b\u72b6\u6001: rostopic echo -n 1 /gazebo/model_states rostopic echo -n 1 /gazebo/link_states \u5229\u7528rosservice call\u5bf9rrbot\u6a21\u578b\u8fdb\u884c\u8bbe\u7f6e,rrbot\u5728\u521d\u59cb\u72b6\u6001\u548c\u91cd\u529b\u7684\u4f5c\u7528\u4e0b\u4f1a\u8fd0\u52a8, \u8e22\u98de\u53ef\u4e50\u74f6 5 . \u200b ``` bash rosservice call /gazebo/set_model_state '{model_state: { model_name: rrbot, pose: { position: { x: 1, y: 1 ,z: 10 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }' \u53ef\u4ee5\u67e5\u770b\u53ef\u4e50\u74f6\u7684\u72b6\u6001 rosservice call gazebo/get_model_state '{model_name: coke_can}' \u5bf9\u53ef\u4e50\u74f6\u65bd\u52a0\u529b\u77e9 rosservice call /gazebo/apply_body_wrench '{body_name: \"coke_can::link\" , wrench: { torque: { x: 0.01, y: 0 , z: 0 } }, start_time: 10000000000, duration: 1000000000 }' \u5f97\u5230\u4eff\u771f\u4e16\u754c\u548c\u76ee\u6807\u7684\u5c5e\u6027 rosservice call gazebo/get_world_properties \u5220\u9664\u6a21\u578b rosservice call gazebo/delete_model '{model_name: coke_can}' \u8be6\u7ec6\u89e3\u8bfb\u89c1[[4-Tutorial ROS Communication]] \u6df1\u5ea6\u89e3\u6790 \u00b6 \u5173\u4e8ejoint state publisher\u548crobot state publisher \u00b6 ^d745a7 \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4: roslaunch rrbot_description rrbot_rviz.launch <launch> <param name= \"robot_description\" command= \"$(find xacro)/xacro --inorder '$(find rrbot_description)/urdf/rrbot.xacro'\" /> <!-- send fake joint values --> <node name= \"joint_state_publisher\" pkg= \"joint_state_publisher\" type= \"joint_state_publisher\" > <param name= \"use_gui\" value= \"TRUE\" /> </node> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"robot_state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find rrbot_description)/launch/rrbot.rviz\" /> </launch> \u53d1\u73b0\u4f1a\u542f\u52a8gui, \u53ef\u4ee5\u8c03\u8282joint\u7684\u503c, \u540c\u65f6rviz\u91cc\u663e\u793a\u7684\u673a\u5668\u4eba\u6a21\u578b\u7684joint\u72b6\u6001\u4e5f\u4f1a\u8ddf\u7740\u6539\u53d8. \u7ed9\u4eba\u7684\u5047\u8c61\u597d\u50cf\u662f\u8c03\u8282gui\u91cc\u7684\u503c\u53ef\u4ee5\u63a7\u5236\u673a\u5668\u4eba\u8fd0\u52a8. \u4f46\u662f\u5b9e\u9645\u4e0a\u4e0d\u662f\u8fd9\u4e48\u56de\u4e8b, rviz\u4ec5\u4ec5\u662f\u53ef\u89c6\u5316, \u5e76\u4e0d\u662f\u4eff\u771f. \u56e0\u6b64rviz\u91cc\u663e\u793a\u72b6\u6001\u53d1\u751f\u53d8\u5316, \u4e0d\u662f\u4eff\u771f\u7ed3\u679c. \u5176\u4e3b\u8981\u6d41\u7a0b\u5982\u4e0b: - joint_state_publisher\u53d1\u5e03\u4e00\u4e2a\u865a\u62df\u7684\u72b6\u6001 - robot_state_publisher\u8ba2\u9605joint_state_publisher\u53d1\u5e03\u7684\u72b6\u6001, \u7136\u540e\u53d1\u5e03tf\u4fe1\u606f - rviz\u8ba2\u9605tf\u72b6\u6001, \u5e76\u6839\u636etf\u72b6\u6001\u5b9e\u65f6\u5bf9\u663e\u793a\u7684\u72b6\u6001\u8fdb\u884c\u66f4\u65b0. \u8fd0\u884c rosrun rqt_graph rqt_graph \u53ef\u4ee5\u5f97\u5230\u4e0b\u56fe: ![[Pasted image 20210424092119.png]] \u5176\u4ed6\u53c2\u8003: [[55-Understanding the differences between robot_state_publisher and joint_state_publisher]]","title":"2 gazebo tutorial 2\u4e4bRRBot\u603b\u7ed3"},{"location":"ROS/5-gazebo/2-gazebo%20tutorial%202%E4%B9%8BRRBot%E6%80%BB%E7%BB%93/#2-gazebo-tutorial-2rrbot","text":"\u672c\u7b14\u8bb0\u4e3b\u8981\u5bf9\u5b98\u65b9\u7684\u5982\u4e0b4\u4e2a\u6559\u7a0b\u8fdb\u884c\u4e00\u4e2a\u6c47\u603b\u548c\u603b\u7ed3: [[1-Tutorial Using a URDF in Gazebo]] [[2-Tutorial Using Gazebo plugins with ROS]] [[3-Tutorial ROS Control]] [[4-Tutorial ROS Communication]] \u9700\u8981\u4e0b\u8f7dRRBot\u5de5\u5177\u5305: cd ~/catkin_ws/src/ git clone https://github.com/ros-simulation/gazebo_ros_demos.git cd .. catkin_make","title":"2-gazebo tutorial 2\u4e4bRRBot\u603b\u7ed3"},{"location":"ROS/5-gazebo/2-gazebo%20tutorial%202%E4%B9%8BRRBot%E6%80%BB%E7%BB%93/#_1","text":". \u251c\u2500\u2500 README.md \u251c\u2500\u2500 gazebo_tutorials \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 launch \u2502 \u2502 \u2514\u2500\u2500 hello.launch \u2502 \u251c\u2500\u2500 package.xml \u2502 \u251c\u2500\u2500 src \u2502 \u2502 \u2514\u2500\u2500 simple_world_plugin.cpp \u2502 \u2514\u2500\u2500 worlds \u2502 \u2514\u2500\u2500 hello.world \u251c\u2500\u2500 rrbot_control \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 config \u2502 \u2502 \u2514\u2500\u2500 rrbot_control.yaml \u2502 \u251c\u2500\u2500 launch \u2502 \u2502 \u251c\u2500\u2500 rrbot_control.launch \u2502 \u2502 \u251c\u2500\u2500 rrbot_rqt.launch \u2502 \u2502 \u2514\u2500\u2500 rrbot_rqt.perspective \u2502 \u2514\u2500\u2500 package.xml \u251c\u2500\u2500 rrbot_description \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 launch \u2502 \u2502 \u251c\u2500\u2500 rrbot.rviz \u2502 \u2502 \u2514\u2500\u2500 rrbot_rviz.launch \u2502 \u251c\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 hokuyo.dae \u2502 \u251c\u2500\u2500 package.xml \u2502 \u2514\u2500\u2500 urdf \u2502 \u251c\u2500\u2500 materials.xacro \u2502 \u251c\u2500\u2500 rrbot.gazebo \u2502 \u251c\u2500\u2500 rrbot.xacro \u2502 \u2514\u2500\u2500 rrbot.xml \u2514\u2500\u2500 rrbot_gazebo \u251c\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 launch \u2502 \u2514\u2500\u2500 rrbot_world.launch \u251c\u2500\u2500 package.xml \u2514\u2500\u2500 worlds \u2514\u2500\u2500 rrbot.world \u9996\u5148\u770b robot_description \u251c\u2500\u2500 rrbot_description \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 launch \u2502 \u2502 \u251c\u2500\u2500 rrbot.rviz \u2502 \u2502 \u2514\u2500\u2500 rrbot_rviz.launch \u2502 \u251c\u2500\u2500 meshes \u2502 \u2502 \u2514\u2500\u2500 hokuyo.dae \u2502 \u251c\u2500\u2500 package.xml \u2502 \u2514\u2500\u2500 urdf \u2502 \u251c\u2500\u2500 materials.xacro \u2502 \u251c\u2500\u2500 rrbot.gazebo \u2502 \u251c\u2500\u2500 rrbot.xacro \u2502 \u2514\u2500\u2500 rrbot.xml rrbot.xacro \u4e3a\u673a\u5668\u4eba\u7684\u6a21\u578b\u6587\u4ef6, \u8c03\u7528\u4e86 rrbot.gazebo \u6587\u4ef6\u548c materials.xacro rrbot.gazebo \u4e2d\u7684\u5143\u7d20\u7528\u4e8eGazebo\u4eff\u771f materials.xacro \u4e2d\u7684\u5143\u7d20\u5219\u662f\u7528\u4e8eRViz\u663e\u793a \u66f4\u8be6\u7ec6\u7684\u89e3\u8bfb\u89c1[[1-Tutorial Using a URDF in Gazebo#^23c4ed| rrbot.xacro \u6587\u4ef6\u89e3\u6790]]","title":"\u6587\u4ef6\u8bf4\u660e"},{"location":"ROS/5-gazebo/2-gazebo%20tutorial%202%E4%B9%8BRRBot%E6%80%BB%E7%BB%93/#rviz","text":"\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4: roslaunch rrbot_description rrbot_rviz.launch \u8be5launch\u6587\u4ef6\u4e2d\u7684\u4e3b\u8981\u539f\u7406\u662f\u8fd0\u884crviz\u5305\u7684rviz\u8282\u70b9,\u8c03\u7528\u7684\u662f rrbot.rviz \u6587\u4ef6, \u5176\u4e2d\u8be5\u6587\u4ef6\u4e2d\u7684\u53c2\u6570 robot_description \u91cc\u7ed9\u51fa\u4e86\u673a\u5668\u4eba\u7684\u6a21\u578b rrbot.xacro ,\u8be5\u53c2\u6570\u662f\u4f20\u9012\u7ed9 rrbot.rviz \u66f4\u8be6\u7ec6\u7684\u89e3\u8bfb\u89c1[[2-gazebo tutorial 2\u4e4bRRBot\u603b\u7ed3#^d745a7]]","title":"\u5728Rviz\u4e2d\u663e\u793a"},{"location":"ROS/5-gazebo/2-gazebo%20tutorial%202%E4%B9%8BRRBot%E6%80%BB%E7%BB%93/#gazebo","text":"\u8fd0\u884c\u5982\u4e0b\u7684\u547d\u4ee4 roslaunch rrbot_gazebo rrbot_world.launch rrbot_world.launch \u4e2d\u7684\u4e3b\u8981\u6d41\u7a0b - \u5c06 rrbot.world \u4e16\u754c\u6587\u4ef6\u4f20\u9012\u5230 $(find gazebo_ros)/launch/empty_world.launch \u4e2d\u663e\u793aworld - rrbot.xacro \u8d4b\u503c\u7ed9 robot_description \u53c2\u6570 - \u8fd0\u884c spwan_model \u8282\u70b9\u751f\u6210\u673a\u5668\u4eba, \u8be5\u673a\u5668\u4eba\u6a21\u578b\u7531 robot_description \u7ed9\u51fa. \u8fd0\u884c\u5b8c\u4ee5\u540e\u4f1a\u5728Gazebo\u663e\u793a\u8be5\u6a21\u578b, \u5e76\u4f1a\u968f\u7740\u91cd\u529b\u7684\u4f5c\u7528\u8fd0\u52a8.","title":"\u5728Gazebo\u4e2d\u663e\u793a"},{"location":"ROS/5-gazebo/2-gazebo%20tutorial%202%E4%B9%8BRRBot%E6%80%BB%E7%BB%93/#gazebo_1","text":"\u9996\u5148\u542f\u52a8\u4eff\u771f roslaunch rrbot_gazebo rrbot_world.launch \u7136\u540e\u542f\u52a8\u63a7\u5236\u5668 roslaunch rrbot_control rrbot_control.launch \u7ed9\u63a7\u5236\u5668\u53d1\u9001\u547d\u4ee4\u5c31\u53ef\u4ee5\u63a7\u5236\u673a\u68b0\u81c2\u8fd0\u52a8\u4e86 rostopic pub -1 /rrbot/joint1_position_controller/command std_msgs/Float64 \"data: 1.5\" rostopic pub -1 /rrbot/joint2_position_controller/command std_msgs/Float64 \"data: 1.0\" \u66f4\u8be6\u7ec6\u7684\u89e3\u8bfb\u89c1[[3-Tutorial ROS Control#^ae67a5|RRBot \u5b9e\u8df5]]","title":"\u5728Gazebo\u91cc\u63a7\u5236\u673a\u5668\u4eba\u8fd0\u52a8"},{"location":"ROS/5-gazebo/2-gazebo%20tutorial%202%E4%B9%8BRRBot%E6%80%BB%E7%BB%93/#_2","text":"\u9996\u5148\u542f\u52a8\u4eff\u771f roslaunch rrbot_gazebo rrbot_world.launch \u6dfb\u52a0\u4e00\u4e2a\u53ef\u4e50\u74f6\u6a21\u578b\u5230\u573a\u666f\u4e2d rosrun gazebo_ros spawn_model -sdf -database coke_can -model coke_can -y 1 \u5229\u7528rostopic\u53d1\u5e03\u5668,\u8bbe\u7f6e\u53ef\u4e50\u74f6\u7684\u521d\u59cb\u72b6\u6001 rosservice call /gazebo/set_model_state '{model_state: { model_name: coke_can, pose: { position: { x: 0.3, y: 0.2 ,z: 0 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }' Gazebo\u4f1a\u53d1\u5e03 model_states \u548c link_states \u8f93\u51fa\u6a21\u578b\u6216\u8005\u6a21\u578b\u91cc\u7684link\u72b6\u6001,\u56e0\u6b64\u53ef\u4ee5\u67e5\u770b\u8fd9\u4e9b\u72b6\u6001: rostopic echo -n 1 /gazebo/model_states rostopic echo -n 1 /gazebo/link_states \u5229\u7528rosservice call\u5bf9rrbot\u6a21\u578b\u8fdb\u884c\u8bbe\u7f6e,rrbot\u5728\u521d\u59cb\u72b6\u6001\u548c\u91cd\u529b\u7684\u4f5c\u7528\u4e0b\u4f1a\u8fd0\u52a8, \u8e22\u98de\u53ef\u4e50\u74f6 5 . \u200b ``` bash rosservice call /gazebo/set_model_state '{model_state: { model_name: rrbot, pose: { position: { x: 1, y: 1 ,z: 10 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }' \u53ef\u4ee5\u67e5\u770b\u53ef\u4e50\u74f6\u7684\u72b6\u6001 rosservice call gazebo/get_model_state '{model_name: coke_can}' \u5bf9\u53ef\u4e50\u74f6\u65bd\u52a0\u529b\u77e9 rosservice call /gazebo/apply_body_wrench '{body_name: \"coke_can::link\" , wrench: { torque: { x: 0.01, y: 0 , z: 0 } }, start_time: 10000000000, duration: 1000000000 }' \u5f97\u5230\u4eff\u771f\u4e16\u754c\u548c\u76ee\u6807\u7684\u5c5e\u6027 rosservice call gazebo/get_world_properties \u5220\u9664\u6a21\u578b rosservice call gazebo/delete_model '{model_name: coke_can}' \u8be6\u7ec6\u89e3\u8bfb\u89c1[[4-Tutorial ROS Communication]]","title":"\u6dfb\u52a0\u53ef\u4e50\u74f6\u5e76\u63a7\u5236\u8fd0\u52a8"},{"location":"ROS/5-gazebo/2-gazebo%20tutorial%202%E4%B9%8BRRBot%E6%80%BB%E7%BB%93/#_3","text":"","title":"\u6df1\u5ea6\u89e3\u6790"},{"location":"ROS/5-gazebo/2-gazebo%20tutorial%202%E4%B9%8BRRBot%E6%80%BB%E7%BB%93/#joint-state-publisherrobot-state-publisher","text":"^d745a7 \u8fd0\u884c\u5982\u4e0b\u547d\u4ee4: roslaunch rrbot_description rrbot_rviz.launch <launch> <param name= \"robot_description\" command= \"$(find xacro)/xacro --inorder '$(find rrbot_description)/urdf/rrbot.xacro'\" /> <!-- send fake joint values --> <node name= \"joint_state_publisher\" pkg= \"joint_state_publisher\" type= \"joint_state_publisher\" > <param name= \"use_gui\" value= \"TRUE\" /> </node> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"robot_state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find rrbot_description)/launch/rrbot.rviz\" /> </launch> \u53d1\u73b0\u4f1a\u542f\u52a8gui, \u53ef\u4ee5\u8c03\u8282joint\u7684\u503c, \u540c\u65f6rviz\u91cc\u663e\u793a\u7684\u673a\u5668\u4eba\u6a21\u578b\u7684joint\u72b6\u6001\u4e5f\u4f1a\u8ddf\u7740\u6539\u53d8. \u7ed9\u4eba\u7684\u5047\u8c61\u597d\u50cf\u662f\u8c03\u8282gui\u91cc\u7684\u503c\u53ef\u4ee5\u63a7\u5236\u673a\u5668\u4eba\u8fd0\u52a8. \u4f46\u662f\u5b9e\u9645\u4e0a\u4e0d\u662f\u8fd9\u4e48\u56de\u4e8b, rviz\u4ec5\u4ec5\u662f\u53ef\u89c6\u5316, \u5e76\u4e0d\u662f\u4eff\u771f. \u56e0\u6b64rviz\u91cc\u663e\u793a\u72b6\u6001\u53d1\u751f\u53d8\u5316, \u4e0d\u662f\u4eff\u771f\u7ed3\u679c. \u5176\u4e3b\u8981\u6d41\u7a0b\u5982\u4e0b: - joint_state_publisher\u53d1\u5e03\u4e00\u4e2a\u865a\u62df\u7684\u72b6\u6001 - robot_state_publisher\u8ba2\u9605joint_state_publisher\u53d1\u5e03\u7684\u72b6\u6001, \u7136\u540e\u53d1\u5e03tf\u4fe1\u606f - rviz\u8ba2\u9605tf\u72b6\u6001, \u5e76\u6839\u636etf\u72b6\u6001\u5b9e\u65f6\u5bf9\u663e\u793a\u7684\u72b6\u6001\u8fdb\u884c\u66f4\u65b0. \u8fd0\u884c rosrun rqt_graph rqt_graph \u53ef\u4ee5\u5f97\u5230\u4e0b\u56fe: ![[Pasted image 20210424092119.png]] \u5176\u4ed6\u53c2\u8003: [[55-Understanding the differences between robot_state_publisher and joint_state_publisher]]","title":"\u5173\u4e8ejoint state publisher\u548crobot state publisher"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/","text":"Tutorial: Using roslaunch to start Gazebo, world files and URDF models \u00b6 \u5229\u7528 roslaunch \u6253\u5f00\u4e16\u754c\u6a21\u578b \u00b6 \u5229\u7528 roslaunch \u6253\u5f00\u7a7a\u4e16\u754c\u6a21\u578b roslaunch gazebo_ros empty_world.launch TIPS : \u5173\u4e8eroslaunch\u542f\u52a8\u65f6\u7684\u4f20\u9012\u53d8\u91cf\u89c1[[3-ROS\u5e38\u7528\u547d\u4ee4#^6df690]]\u4e2d\u7684\u8bf4\u660e \u542f\u52a8\u5176\u4ed6demo \u4e16\u754c \u00b6 Other demo worlds are already included in the gazebo_ros package, including: roslaunch gazebo_ros willowgarage_world.launch roslaunch gazebo_ros mud_world.launch roslaunch gazebo_ros shapes_world.launch roslaunch gazebo_ros rubble_world.launch Notice in mud_world.launch a simple jointed mechanism is launched. The launch file for mud_world.launch contains the following: <launch> <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --> <include file=\"$(find gazebo_ros)/launch/empty_world.launch\"> <arg name=\"world_name\" value=\"worlds/mud.world\"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable --> <arg name=\"paused\" value=\"false\"/> <arg name=\"use_sim_time\" value=\"true\"/> <arg name=\"gui\" value=\"true\"/> <arg name=\"recording\" value=\"false\"/> <arg name=\"debug\" value=\"false\"/> </include> </launch> \u7531\u6b64\u53ef\u89c1, mud_world.launch \u91cc\u53ea\u662f\u5c06 empty_world.launch \u91cc\u7684world\u6a21\u578b\u6539\u6210\u4e86 mud.world \u4e16\u754c\u6a21\u578b \u00b6 mud_world.launch \u573a\u666f\u6587\u4ef6\u91cc\u7684\u4e16\u754c\u6a21\u578b\u4e3a mud.world \uff1a <sdf version=\"1.4\"> <world name=\"default\"> <include> <uri>model://sun</uri> </include> <include> <uri>model://ground_plane</uri> </include> <include> <uri>model://double_pendulum_with_base</uri> <name>pendulum_thick_mud</name> <pose>-2.0 0 0 0 0 0</pose> </include> ... </world> </sdf> See the section below to view this full world file on your computer. \u9996\u5148\u5728\u672c\u5730Gazebo Model Database\u91cc\u641c\u7d22\uff0c\u5982\u679c\u641c\u7d22\u4e0d\u5230\u5219\u81ea\u52a8\u4ece\u7f51\u4e0a\u4e0b\u8f7d\u3002\u66f4\u591a\u5e2e\u52a9\u53c2\u8003\uff1a Build A World tutorial. \u5173\u4e8e\u4e16\u754c\u6a21\u578b\u7684\u4f4d\u7f6e \u00b6 ^6d297d \u4e16\u754c\u6a21\u578b\u90fd\u5b58\u50a8\u5728 GAZEBO_RESOURCE_PATH \u8def\u5f84\u7684 /worlds \u6587\u4ef6\u5939\u4e0b\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u67e5\u770b\u5177\u4f53\u8def\u5f84 env | grep GAZEBO_RESOURCE_PATH \u6216\u8005 echo $grep GAZEBO_RESOURCE_PATH \u5b9e\u9645\u4e0agazebo\u7684\u73af\u5883\u53d8\u91cf\u90fd\u5b58\u50a8\u5728 /usr/share/gazebo/setup.sh \uff0c\u9700\u8981source\u4e00\u4e0b\u3002 \u521b\u5efa\u5c5e\u4e8e\u81ea\u5df1\u7684gazebo ros\u5305 \u00b6 \u5305\u4e0b\u9762\u7684\u5b50\u5305\uff1a - \u673a\u5668\u4eba\u6a21\u578b\u548c\u63cf\u8ff0\u547d\u540d\u4e3a /MYROBOT_description - \u7528\u4e8e\u63cf\u8ff0\u4e16\u754c\u6587\u4ef6\u548c\u542f\u52a8\u6587\u4ef6\u7684\u5305\u547d\u540d\u4e3a /MYROBOT_gazebo \u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\uff1a ../catkin_ws/src /MYROBOT_description package.xml CMakeLists.txt /urdf MYROBOT.urdf /meshes mesh1.dae mesh2.dae ... /materials /cad /MYROBOT_gazebo /launch MYROBOT.launch /worlds MYROBOT.world /models world_object1.dae world_object2.stl world_object3.urdf /materials /plugins TIPS: : catkin_create_pkg \u7528\u4e8e\u521b\u5efa\u5305 \u521b\u5efa\u4e16\u754c\u6a21\u578b \u00b6 \u521b\u5efa\u4e00\u4e2aros\u5305 MYROBOT_gazebo \u5728\u8be5\u5305\u91cc\u521b\u5efa launch \u5b50\u6587\u4ef6\u5939 \u5728 launch \u521b\u5efa\u5982\u4e0b\u7684 YOUROBOT.launch <launch> <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --> <include file=\"$(find gazebo_ros)/launch/empty_world.launch\"> <arg name=\"world_name\" value=\"$(find MYROBOT_gazebo)/worlds/MYROBOT.world\"/> <!-- more default parameters can be changed here --> </include> </launch> \u5728\u5305\u4e0b\u521b\u5efa worlds \u6587\u4ef6\u5939\uff0c\u521b\u5efa\u4e00\u4e2a\u4e16\u754c\u6587\u4ef6 MYROBOT.world <?xml version=\"1.0\" ?> <sdf version=\"1.4\"> <world name=\"default\"> <include> <uri>model://ground_plane</uri> </include> <include> <uri>model://sun</uri> </include> <include> <uri>model://gas_station</uri> <name>gas_station</name> <pose>-2.0 7.0 0 0 0 0</pose> </include> </world> </sdf> \u542f\u52a8launch\u6587\u4ef6 . ~/catkin_ws/devel/setup.bash roslaunch MYROBOT_gazebo MYROBOT.launch Editing the World File Within Gazebo \u00b6 You can insert additional models into your robot's world file and use the File->Save As command to export your edited world back into your ROS package. \u5229\u7528 roslaunch \u4ea7\u751f URDF \u673a\u5668\u4eba \u00b6 There are two ways to launch your URDF-based robot into Gazebo using roslaunch : ROS Service Call Spawn Method The first method keeps your robot's ROS packages more portable between computers and repository check outs. It allows you to keep your robot's location relative to a ROS package path, but also requires you to make a ROS service call using a small (python) script. Model Database Method The second method allows you to include your robot within the .world file, which seems cleaner and more convenient but requires you to add your robot to the Gazebo model database by setting an environment variable. We will go over both methods. Overall our recommended method is using the '''ROS Service Call Spawn Method''' \"ROS Service Call\" Robot Spawn Method \u00b6 \u5229\u7528 gazebo_ros \u5305\u4e0b\u7684 spawn_model \uff08python script\uff09\u6dfb\u52a0\u6a21\u578b\uff0c\u5982\u4e0b\uff1a rosrun gazebo_ros spawn_model -file `rospack find MYROBOT_description`/urdf/MYROBOT.urdf -urdf -x 0 -y 0 -z 1 -model MYROBOT \u67e5\u770b spawn_model \u5e2e\u52a9 rosrun gazebo_ros spawn_model -h \u6211\u7684\u64cd\u4f5c roslaunch gazebo_ros empty_world.launch rosrun gazebo_ros spawn_model -file `rospack find rviz_basics`/urdf/gopigo.urdf -urdf -x 0 -y 0 -z 1 -model MYROBOTLI \u53ef\u4ee5\u6210\u529f\u5bfc\u5165\uff0c\u4f46\u662f\u5982\u679c\u6362\u6210 gopigoMinimal.urdf \u5bfc\u5165\u6210\u529f\u4e0d\u663e\u793a\u3002 \u4ece Baxter\u4e0a\u4e0b\u8f7dURDF \u00b6 \u9996\u5148\u4eceRethink Robotics's baxter_common \u4ed3\u5e93\u91cc\u4e0b\u8f7d baxter\\_description \u5305\uff0c\u5728 catkin_ws/src \u4e0b\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4 git clone https://github.com/RethinkRobotics/baxter_common.git You should now have a URDF file named baxter.urdf located in a within baxter_description/urdf/, and you can run: rosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter \u5f97\u5230\u7684\u56fe\u5982\u4e0b ![[Pasted image 20210330184927.png]] \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u5c06\u5176\u96c6\u6210\u5728launch\u6587\u4ef6\u4e2d\uff0c\u6bd4\u5982 \u6253\u5f00 MYROBOT_gazebo/launch/YOUROBOT.launch \uff0c\u5728 </launch> \u524d\u9762\u6dfb\u52a0\u5982\u4e0b\u7684\u5185\u5bb9 <!-- Spawn a robot into Gazebo --> <node name=\"spawn_urdf\" pkg=\"gazebo_ros\" type=\"spawn_model\" args=\"-file $(find baxter_description)/urdf/baxter.urdf -urdf -z 1 -model baxter\" /> Launching this file, you should see the same results as when using rosrun . \u5bfc\u5165XACRO \u683c\u5f0f \u00b6 If your URDF is not in XML format but rather in XACRO format, you can make a similar modification to your launch file. You can run this PR2 example by installing this package: ROS Jade: sudo apt-get install ros-jade-pr2-common Then adding this to your launch file created previously in this tutorial: <!-- Convert an xacro and put on parameter server --> <param name=\"robot_description\" command=\"$(find xacro)/xacro.py $(find pr2_description)/robots/pr2.urdf.xacro\" /> <!-- Spawn a robot into Gazebo --> <node name=\"spawn_urdf\" pkg=\"gazebo_ros\" type=\"spawn_model\" args=\"-param robot_description -urdf -model pr2\" /> Launching this file, you should see the PR2 in the gas station as pictured: Note: at this writing there are still a lot of errors and warnings from the console output that need to be fixed from the PR2's URDF due to Gazebo API changes. \u57fa\u4e8e\u6a21\u578b\u6570\u636e\u5e93\u7684\u65b9\u6cd5 \u00b6 \u76f4\u63a5\u5728\u673a\u5668\u4eba\u6a21\u578b\u63cf\u8ff0\u5728 .world \u6587\u4ef6\u91cc\uff0c\u66f4\u4e3a\u65b9\u4fbf\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u9700\u8981\u8bbe\u7f6eGazebo\u6a21\u578b\u6570\u636e\u5e93\u73af\u5883\u53d8\u91cf \uff08\u8fd9\u662f\u56e0\u4e3aROS\u548cGazebo\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0cURDF\u5305\u8def\u5f84\u4e0d\u80fd\u76f4\u63a5\u5728 .world \u6587\u4ef6\u91cc\u8bc6\u522b\uff09 \u5177\u4f53\u53c2\u8003\uff1a Gazebo Model Database \u5728 MYROBOT_description \u5305\u4e0b\u6dfb\u52a0 model.config \u6587\u4ef6\uff1a ../catkin_ws/src /MYROBOT_description package.xml CMakeLists.txt model.config /urdf MYROBOT.urdf /meshes mesh1.dae mesh2.dae ... /materials /plugins /cad \u7ed3\u6784\u5982\u4e0b\uff1a /home/user/catkin_workspace/src - this is treated as the location of a Gazebo Model Database MYROBOT_description - Gazebo \u6a21\u578b\u6587\u4ef6\u5939 model.config - \u914d\u7f6e\u6587\u4ef6\uff0c\u4ece\u800cGazebo\u53ef\u4ee5\u5728\u6570\u636e\u5e93\u91cc\u627e\u5230\u8fd9\u91cc\u7684\u6a21\u578b MYROBOT.urdf - \u5177\u4f53\u7684\u6a21\u578b\u6587\u4ef6 /meshes - \u5b58\u653e .stl \u6216\u8005 .dae\u6587\u4ef6 model.config\u914d\u7f6e\u6587\u4ef6 \u00b6 Each model must have a model.config file in the model's root directory that contains meta information about the model. Basically copy this into a model.config file, replacing MYROBOT.urdf with your file name: <?xml version=\"1.0\"?> <model> <name>MYROBOT</name> <version>1.0</version> <sdf>urdf/MYROBOT.urdf</sdf> <author> <name>My name</name> <email>name@email.address</email> </author> <description> A description of the model </description> </model> Unlike for SDFs, no version is required for the tag when it is used for URDFs. See the Gazebo Model Database documentation for more info. \u73af\u5883\u53d8\u91cf \u00b6 \u5c06 GAZEBO_MODEL_PATH \u73af\u5883\u53d8\u91cf\u6dfb\u52a0\u81f3\"~/.bashrc\"\uff0c\u5047\u8bbe\u5de5\u4f5c\u7a7a\u95f4\u4e3a ~/catkin_ws/ \uff0c\u5219\uff1a export GAZEBO_MODEL_PATH=/home/user/catkin_ws/src/ \u5728Gazebo\u91cc\u624b\u52a8\u63d2\u5165\u6a21\u578b \u00b6 Now test to see if your new Gazebo Model Database is properly configured by launching Gazebo: gazebo \u5728\u5de6\u4fa7\u70b9\u51fb Insert \uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u770b\u5230 \u6211\u7684\u5b9e\u8df5\u6ca1\u770b\u5230\u5565\u6a21\u578b\u3002 roslaunch \u65b9\u6cd5\u63d2\u5165\u6a21\u578b \u00b6 The advantage of the model database method is that now you can include your robot directly within your world files, without using a ROS package path. We'll use the same setup from the section \"Creating a world file\" but modify the world file: \u5728 MYROBOT_description/launch \u6587\u4ef6\u5939\u4e0b\uff0c\u4fee\u6539\u4e16\u754c\u6587\u4ef6MYROBOT.world\u5982\u4e0b <?xml version=\"1.0\" ?> <sdf version=\"1.4\"> <world name=\"default\"> <include> <uri>model://ground_plane</uri> </include> <include> <uri>model://sun</uri> </include> <include> <uri>model://gas_station</uri> <name>gas_station</name> <pose>-2.0 7.0 0 0 0 0</pose> </include> <include> <uri>model://MYROBOT_description</uri> </include> </world> </sdf> \u7136\u540e\u542f\u52a8\u5373\u53ef roslaunch MYROBOT_gazebo MYROBOT.launch \u6ce8\u610f \uff1a\u9700\u8981\u8bbe\u7f6e GAZEBO_MODEL_PATH \u73af\u5883\u53d8\u91cf\u3002\u6bd4\u5982\u5728launch\u6587\u4ef6\u91cc\u8bbe\u7f6e <env name= \"GAZEBO_MODEL_PATH\" value= \"${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models\" /> <env name= \"GAZEBO_RESOURCE_PATH\" value= \"${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models\" /> \u4ece package.xml\u6587\u4ef6\u4e2d\u8f93\u51fa\u6a21\u578b\u8def\u5f84 \u00b6 package.xml: <run_depend>gazebo_ros</run_depend> <export> <gazebo_ros gazebo_model_path=\"${prefix}/models\"/> <gazebo_ros gazebo_media_path=\"${prefix}/models\"/> </export> The '${prefix}` is something that new users might not immediately know about either, and necessary here. Also would be useful to have some info on how to debug these paths from the ROS side, e.g. that you can use rospack plugins --attrib=\"gazebo_media_path\" gazebo_ros To check the media path that will be picked up by gazebo. \u4e0b\u4e00\u6b65 \u00b6 Now that you know how to create roslaunch files that open Gazebo, world files and URDF models, you are now ready to create your own Gazebo-ready URDF model in the tutorial Using A URDF In Gazebo \u539f\u7f51\u5740: \u8bbf\u95ee \u521b\u5efa\u65f6\u95f4: 2021-03-30 17:57:47 \u76ee\u5f55: default \u6807\u7b7e: \u65e0","title":"0 Tutorial Using roslaunch to start Gazebo, world files and URDF models"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#tutorial-using-roslaunch-to-start-gazebo-world-files-and-urdf-models","text":"","title":"Tutorial: Using roslaunch to start Gazebo, world files and URDF models"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#roslaunch","text":"\u5229\u7528 roslaunch \u6253\u5f00\u7a7a\u4e16\u754c\u6a21\u578b roslaunch gazebo_ros empty_world.launch TIPS : \u5173\u4e8eroslaunch\u542f\u52a8\u65f6\u7684\u4f20\u9012\u53d8\u91cf\u89c1[[3-ROS\u5e38\u7528\u547d\u4ee4#^6df690]]\u4e2d\u7684\u8bf4\u660e","title":"\u5229\u7528 roslaunch \u6253\u5f00\u4e16\u754c\u6a21\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#demo","text":"Other demo worlds are already included in the gazebo_ros package, including: roslaunch gazebo_ros willowgarage_world.launch roslaunch gazebo_ros mud_world.launch roslaunch gazebo_ros shapes_world.launch roslaunch gazebo_ros rubble_world.launch Notice in mud_world.launch a simple jointed mechanism is launched. The launch file for mud_world.launch contains the following: <launch> <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --> <include file=\"$(find gazebo_ros)/launch/empty_world.launch\"> <arg name=\"world_name\" value=\"worlds/mud.world\"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable --> <arg name=\"paused\" value=\"false\"/> <arg name=\"use_sim_time\" value=\"true\"/> <arg name=\"gui\" value=\"true\"/> <arg name=\"recording\" value=\"false\"/> <arg name=\"debug\" value=\"false\"/> </include> </launch> \u7531\u6b64\u53ef\u89c1, mud_world.launch \u91cc\u53ea\u662f\u5c06 empty_world.launch \u91cc\u7684world\u6a21\u578b\u6539\u6210\u4e86 mud.world","title":"\u542f\u52a8\u5176\u4ed6demo \u4e16\u754c"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#_1","text":"mud_world.launch \u573a\u666f\u6587\u4ef6\u91cc\u7684\u4e16\u754c\u6a21\u578b\u4e3a mud.world \uff1a <sdf version=\"1.4\"> <world name=\"default\"> <include> <uri>model://sun</uri> </include> <include> <uri>model://ground_plane</uri> </include> <include> <uri>model://double_pendulum_with_base</uri> <name>pendulum_thick_mud</name> <pose>-2.0 0 0 0 0 0</pose> </include> ... </world> </sdf> See the section below to view this full world file on your computer. \u9996\u5148\u5728\u672c\u5730Gazebo Model Database\u91cc\u641c\u7d22\uff0c\u5982\u679c\u641c\u7d22\u4e0d\u5230\u5219\u81ea\u52a8\u4ece\u7f51\u4e0a\u4e0b\u8f7d\u3002\u66f4\u591a\u5e2e\u52a9\u53c2\u8003\uff1a Build A World tutorial.","title":"\u4e16\u754c\u6a21\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#_2","text":"^6d297d \u4e16\u754c\u6a21\u578b\u90fd\u5b58\u50a8\u5728 GAZEBO_RESOURCE_PATH \u8def\u5f84\u7684 /worlds \u6587\u4ef6\u5939\u4e0b\uff0c\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u67e5\u770b\u5177\u4f53\u8def\u5f84 env | grep GAZEBO_RESOURCE_PATH \u6216\u8005 echo $grep GAZEBO_RESOURCE_PATH \u5b9e\u9645\u4e0agazebo\u7684\u73af\u5883\u53d8\u91cf\u90fd\u5b58\u50a8\u5728 /usr/share/gazebo/setup.sh \uff0c\u9700\u8981source\u4e00\u4e0b\u3002","title":"\u5173\u4e8e\u4e16\u754c\u6a21\u578b\u7684\u4f4d\u7f6e"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#gazebo-ros","text":"\u5305\u4e0b\u9762\u7684\u5b50\u5305\uff1a - \u673a\u5668\u4eba\u6a21\u578b\u548c\u63cf\u8ff0\u547d\u540d\u4e3a /MYROBOT_description - \u7528\u4e8e\u63cf\u8ff0\u4e16\u754c\u6587\u4ef6\u548c\u542f\u52a8\u6587\u4ef6\u7684\u5305\u547d\u540d\u4e3a /MYROBOT_gazebo \u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\uff1a ../catkin_ws/src /MYROBOT_description package.xml CMakeLists.txt /urdf MYROBOT.urdf /meshes mesh1.dae mesh2.dae ... /materials /cad /MYROBOT_gazebo /launch MYROBOT.launch /worlds MYROBOT.world /models world_object1.dae world_object2.stl world_object3.urdf /materials /plugins TIPS: : catkin_create_pkg \u7528\u4e8e\u521b\u5efa\u5305","title":"\u521b\u5efa\u5c5e\u4e8e\u81ea\u5df1\u7684gazebo ros\u5305"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#_3","text":"\u521b\u5efa\u4e00\u4e2aros\u5305 MYROBOT_gazebo \u5728\u8be5\u5305\u91cc\u521b\u5efa launch \u5b50\u6587\u4ef6\u5939 \u5728 launch \u521b\u5efa\u5982\u4e0b\u7684 YOUROBOT.launch <launch> <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --> <include file=\"$(find gazebo_ros)/launch/empty_world.launch\"> <arg name=\"world_name\" value=\"$(find MYROBOT_gazebo)/worlds/MYROBOT.world\"/> <!-- more default parameters can be changed here --> </include> </launch> \u5728\u5305\u4e0b\u521b\u5efa worlds \u6587\u4ef6\u5939\uff0c\u521b\u5efa\u4e00\u4e2a\u4e16\u754c\u6587\u4ef6 MYROBOT.world <?xml version=\"1.0\" ?> <sdf version=\"1.4\"> <world name=\"default\"> <include> <uri>model://ground_plane</uri> </include> <include> <uri>model://sun</uri> </include> <include> <uri>model://gas_station</uri> <name>gas_station</name> <pose>-2.0 7.0 0 0 0 0</pose> </include> </world> </sdf> \u542f\u52a8launch\u6587\u4ef6 . ~/catkin_ws/devel/setup.bash roslaunch MYROBOT_gazebo MYROBOT.launch","title":"\u521b\u5efa\u4e16\u754c\u6a21\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#editing-the-world-file-within-gazebo","text":"You can insert additional models into your robot's world file and use the File->Save As command to export your edited world back into your ROS package.","title":"Editing the World File Within Gazebo"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#roslaunch-urdf","text":"There are two ways to launch your URDF-based robot into Gazebo using roslaunch : ROS Service Call Spawn Method The first method keeps your robot's ROS packages more portable between computers and repository check outs. It allows you to keep your robot's location relative to a ROS package path, but also requires you to make a ROS service call using a small (python) script. Model Database Method The second method allows you to include your robot within the .world file, which seems cleaner and more convenient but requires you to add your robot to the Gazebo model database by setting an environment variable. We will go over both methods. Overall our recommended method is using the '''ROS Service Call Spawn Method'''","title":"\u5229\u7528 roslaunch \u4ea7\u751f URDF \u673a\u5668\u4eba"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#ros-service-call-robot-spawn-method","text":"\u5229\u7528 gazebo_ros \u5305\u4e0b\u7684 spawn_model \uff08python script\uff09\u6dfb\u52a0\u6a21\u578b\uff0c\u5982\u4e0b\uff1a rosrun gazebo_ros spawn_model -file `rospack find MYROBOT_description`/urdf/MYROBOT.urdf -urdf -x 0 -y 0 -z 1 -model MYROBOT \u67e5\u770b spawn_model \u5e2e\u52a9 rosrun gazebo_ros spawn_model -h \u6211\u7684\u64cd\u4f5c roslaunch gazebo_ros empty_world.launch rosrun gazebo_ros spawn_model -file `rospack find rviz_basics`/urdf/gopigo.urdf -urdf -x 0 -y 0 -z 1 -model MYROBOTLI \u53ef\u4ee5\u6210\u529f\u5bfc\u5165\uff0c\u4f46\u662f\u5982\u679c\u6362\u6210 gopigoMinimal.urdf \u5bfc\u5165\u6210\u529f\u4e0d\u663e\u793a\u3002","title":"\"ROS Service Call\" Robot Spawn Method"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#baxterurdf","text":"\u9996\u5148\u4eceRethink Robotics's baxter_common \u4ed3\u5e93\u91cc\u4e0b\u8f7d baxter\\_description \u5305\uff0c\u5728 catkin_ws/src \u4e0b\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4 git clone https://github.com/RethinkRobotics/baxter_common.git You should now have a URDF file named baxter.urdf located in a within baxter_description/urdf/, and you can run: rosrun gazebo_ros spawn_model -file `rospack find baxter_description`/urdf/baxter.urdf -urdf -z 1 -model baxter \u5f97\u5230\u7684\u56fe\u5982\u4e0b ![[Pasted image 20210330184927.png]] \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u5c06\u5176\u96c6\u6210\u5728launch\u6587\u4ef6\u4e2d\uff0c\u6bd4\u5982 \u6253\u5f00 MYROBOT_gazebo/launch/YOUROBOT.launch \uff0c\u5728 </launch> \u524d\u9762\u6dfb\u52a0\u5982\u4e0b\u7684\u5185\u5bb9 <!-- Spawn a robot into Gazebo --> <node name=\"spawn_urdf\" pkg=\"gazebo_ros\" type=\"spawn_model\" args=\"-file $(find baxter_description)/urdf/baxter.urdf -urdf -z 1 -model baxter\" /> Launching this file, you should see the same results as when using rosrun .","title":"\u4ece Baxter\u4e0a\u4e0b\u8f7dURDF"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#xacro","text":"If your URDF is not in XML format but rather in XACRO format, you can make a similar modification to your launch file. You can run this PR2 example by installing this package: ROS Jade: sudo apt-get install ros-jade-pr2-common Then adding this to your launch file created previously in this tutorial: <!-- Convert an xacro and put on parameter server --> <param name=\"robot_description\" command=\"$(find xacro)/xacro.py $(find pr2_description)/robots/pr2.urdf.xacro\" /> <!-- Spawn a robot into Gazebo --> <node name=\"spawn_urdf\" pkg=\"gazebo_ros\" type=\"spawn_model\" args=\"-param robot_description -urdf -model pr2\" /> Launching this file, you should see the PR2 in the gas station as pictured: Note: at this writing there are still a lot of errors and warnings from the console output that need to be fixed from the PR2's URDF due to Gazebo API changes.","title":"\u5bfc\u5165XACRO \u683c\u5f0f"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#_4","text":"\u76f4\u63a5\u5728\u673a\u5668\u4eba\u6a21\u578b\u63cf\u8ff0\u5728 .world \u6587\u4ef6\u91cc\uff0c\u66f4\u4e3a\u65b9\u4fbf\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u9700\u8981\u8bbe\u7f6eGazebo\u6a21\u578b\u6570\u636e\u5e93\u73af\u5883\u53d8\u91cf \uff08\u8fd9\u662f\u56e0\u4e3aROS\u548cGazebo\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0cURDF\u5305\u8def\u5f84\u4e0d\u80fd\u76f4\u63a5\u5728 .world \u6587\u4ef6\u91cc\u8bc6\u522b\uff09 \u5177\u4f53\u53c2\u8003\uff1a Gazebo Model Database \u5728 MYROBOT_description \u5305\u4e0b\u6dfb\u52a0 model.config \u6587\u4ef6\uff1a ../catkin_ws/src /MYROBOT_description package.xml CMakeLists.txt model.config /urdf MYROBOT.urdf /meshes mesh1.dae mesh2.dae ... /materials /plugins /cad \u7ed3\u6784\u5982\u4e0b\uff1a /home/user/catkin_workspace/src - this is treated as the location of a Gazebo Model Database MYROBOT_description - Gazebo \u6a21\u578b\u6587\u4ef6\u5939 model.config - \u914d\u7f6e\u6587\u4ef6\uff0c\u4ece\u800cGazebo\u53ef\u4ee5\u5728\u6570\u636e\u5e93\u91cc\u627e\u5230\u8fd9\u91cc\u7684\u6a21\u578b MYROBOT.urdf - \u5177\u4f53\u7684\u6a21\u578b\u6587\u4ef6 /meshes - \u5b58\u653e .stl \u6216\u8005 .dae\u6587\u4ef6","title":"\u57fa\u4e8e\u6a21\u578b\u6570\u636e\u5e93\u7684\u65b9\u6cd5"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#modelconfig","text":"Each model must have a model.config file in the model's root directory that contains meta information about the model. Basically copy this into a model.config file, replacing MYROBOT.urdf with your file name: <?xml version=\"1.0\"?> <model> <name>MYROBOT</name> <version>1.0</version> <sdf>urdf/MYROBOT.urdf</sdf> <author> <name>My name</name> <email>name@email.address</email> </author> <description> A description of the model </description> </model> Unlike for SDFs, no version is required for the tag when it is used for URDFs. See the Gazebo Model Database documentation for more info.","title":"model.config\u914d\u7f6e\u6587\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#_5","text":"\u5c06 GAZEBO_MODEL_PATH \u73af\u5883\u53d8\u91cf\u6dfb\u52a0\u81f3\"~/.bashrc\"\uff0c\u5047\u8bbe\u5de5\u4f5c\u7a7a\u95f4\u4e3a ~/catkin_ws/ \uff0c\u5219\uff1a export GAZEBO_MODEL_PATH=/home/user/catkin_ws/src/","title":"\u73af\u5883\u53d8\u91cf"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#gazebo","text":"Now test to see if your new Gazebo Model Database is properly configured by launching Gazebo: gazebo \u5728\u5de6\u4fa7\u70b9\u51fb Insert \uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u770b\u5230 \u6211\u7684\u5b9e\u8df5\u6ca1\u770b\u5230\u5565\u6a21\u578b\u3002","title":"\u5728Gazebo\u91cc\u624b\u52a8\u63d2\u5165\u6a21\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#roslaunch_1","text":"The advantage of the model database method is that now you can include your robot directly within your world files, without using a ROS package path. We'll use the same setup from the section \"Creating a world file\" but modify the world file: \u5728 MYROBOT_description/launch \u6587\u4ef6\u5939\u4e0b\uff0c\u4fee\u6539\u4e16\u754c\u6587\u4ef6MYROBOT.world\u5982\u4e0b <?xml version=\"1.0\" ?> <sdf version=\"1.4\"> <world name=\"default\"> <include> <uri>model://ground_plane</uri> </include> <include> <uri>model://sun</uri> </include> <include> <uri>model://gas_station</uri> <name>gas_station</name> <pose>-2.0 7.0 0 0 0 0</pose> </include> <include> <uri>model://MYROBOT_description</uri> </include> </world> </sdf> \u7136\u540e\u542f\u52a8\u5373\u53ef roslaunch MYROBOT_gazebo MYROBOT.launch \u6ce8\u610f \uff1a\u9700\u8981\u8bbe\u7f6e GAZEBO_MODEL_PATH \u73af\u5883\u53d8\u91cf\u3002\u6bd4\u5982\u5728launch\u6587\u4ef6\u91cc\u8bbe\u7f6e <env name= \"GAZEBO_MODEL_PATH\" value= \"${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models\" /> <env name= \"GAZEBO_RESOURCE_PATH\" value= \"${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models\" />","title":"roslaunch \u65b9\u6cd5\u63d2\u5165\u6a21\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#packagexml","text":"package.xml: <run_depend>gazebo_ros</run_depend> <export> <gazebo_ros gazebo_model_path=\"${prefix}/models\"/> <gazebo_ros gazebo_media_path=\"${prefix}/models\"/> </export> The '${prefix}` is something that new users might not immediately know about either, and necessary here. Also would be useful to have some info on how to debug these paths from the ROS side, e.g. that you can use rospack plugins --attrib=\"gazebo_media_path\" gazebo_ros To check the media path that will be picked up by gazebo.","title":"\u4ece package.xml\u6587\u4ef6\u4e2d\u8f93\u51fa\u6a21\u578b\u8def\u5f84"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/0-Tutorial%20Using%20roslaunch%20to%20start%20Gazebo%2C%20world%20files%20and%20URDF%20models/#_6","text":"Now that you know how to create roslaunch files that open Gazebo, world files and URDF models, you are now ready to create your own Gazebo-ready URDF model in the tutorial Using A URDF In Gazebo \u539f\u7f51\u5740: \u8bbf\u95ee \u521b\u5efa\u65f6\u95f4: 2021-03-30 17:57:47 \u76ee\u5f55: default \u6807\u7b7e: \u65e0","title":"\u4e0b\u4e00\u6b65"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/","text":"Tutorial: Using a URDF in Gazebo \u00b6 Unified Robotic Description Format (URDF)\u4e3aXML\u683c\u5f0f\uff0c\u7528\u4e8e\u5728ROS\u4e2d\u63cf\u8ff0\u673a\u5668\u4eba\u3002 Gazebo\u53ef\u4ee5\u81ea\u52a8\u5c06URDF\u8f6c\u6362\u6210SDF \u80cc\u666f \u00b6 URDF\u683c\u5f0f - \u53ef\u4ee5\u63cf\u8ff0\u8d28\u70b9\u8fd0\u52a8\u548c\u52a8\u529b\u5b66\u7279\u6027\uff0c - \u4e0d\u80fd\u63cf\u8ff0\u673a\u5668\u4eba\u5728\u4e16\u754c\u91cc\u7684pose - \u4e0d\u80fd\u63cf\u8ff0oint loops (parallel linkages), and it lacks friction and other properties - \u4e0d\u80fd\u63cf\u8ff0\u975e\u673a\u5668\u4eba\uff0c\u6bd4\u5982\u5149\u7ebf\u3001\u9ad8\u7a0b\u56fe\u7b49\u3002 \u4e3a\u4e86\u514b\u670dURDF\u683c\u5f0f\u7684\u7f3a\u70b9\uff0c\u521b\u5efa\u4e86 Simulation Description Format (SDF)\u683c\u5f0f\u7528\u4e8eGazebo\u3002 SDF\u683c\u5f0f\u63cf\u8ff0\u4e86\u5143\u7d20\u6db5\u76d6\u4e16\u754c\u548c\u673a\u5668\u4eba\uff0c\u683c\u5f0f\u4e3aXML. RRBot \u793a\u4f8b \u00b6 \u4e00\u822c\u7684\u6b65\u9aa4\u662f\u9996\u5148\u5728 Rviz \u4e0b\u6d4b\u8bd5URDF\u6a21\u578b,\u7136\u540e\u518d\u5728Gazebo\u4e2d\u5bf9\u673a\u5668\u4eba\u6a21\u578b\u8fdb\u884c\u914d\u7f6e. \u53c2\u8003: ROS URDF Tutorials . \u4e0b\u8f7d RRBot \u00b6 cd ~/catkin_ws/src/ git clone https://github.com/ros-simulation/gazebo_ros_demos.git cd .. catkin_make \u5176\u4ed6\u53c2\u8003\uff1a ROS Overview Tutorials . Rviz\u91cc\u548cGazebo\u91cc\u67e5\u770b\u6a21\u578b \u00b6 \u5728Rviz\u4e0b\u548cGazbo\u4e0b\u67e5\u770b\u7684\u547d\u4ee4\u5982\u4e0b: roslaunch rrbot_description rrbot_rviz.launch roslaunch rrbot_gazebo rrbot_world.launch TIPS: - \u53ef\u80fd\u9700\u8981\u5b89\u88c5 sudo apt install ros-melodic-joint-state-publisher-gui - \u5982\u679c\u770b\u4e0d\u5230\uff0c\u5219\u8bd5\u7740\u5f3a\u5236\u5173\u6389\u5176\u4ed6\u8fdb\u7a0b killall roscore \u518d\u8bd5\u8bd5 (\u8fd9\u4e2a\u5f88\u6709\u6548) - gazebo_ros_control \u6559\u7a0b\u91cc\u7ed9\u51fa\u4e86\u5982\u4f55\u5229\u7528Rviz\u6765\u76d1\u89c6\u673a\u5668\u4eba\u5229\u7528 /joint_states \u53d1\u5e03\u7684\u72b6\u6001\u3002\u5728\u672c\u4f8b\u4e2d\uff0cRviz\u91cc\u7684RRbot\u63a5\u53d7\u865a\u62df\u7684 joint_states_publisher \u8282\u70b9\u53d1\u5e03\u7684 /joint_states Gazebo\u4e0b\u7684\u622a\u56fe\u5982\u4e0b\uff1a![[Pasted image 20210331112544.png]] launch\u6587\u4ef6\u89e3\u6790 \u00b6 rrbot_rviz.launch \u00b6 <launch> <param name= \"robot_description\" command= \"$(find xacro)/xacro --inorder '$(find rrbot_description)/urdf/rrbot.xacro'\" /> <!-- send fake joint values --> <node name= \"joint_state_publisher\" pkg= \"joint_state_publisher\" type= \"joint_state_publisher\" > <param name= \"use_gui\" value= \"TRUE\" /> </node> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"robot_state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find rrbot_description)/launch/rrbot.rviz\" /> </launch> \u4e3b\u8981\u529f\u80fd\u89c1\u6700\u540e\u4e00\u4e2a\u8fd0\u884c\u8282\u70b9,\u8fd0\u884crviz\u5305\u7684rviz\u8282\u70b9,\u8c03\u7528\u7684\u662f rrbot.rviz \u6587\u4ef6, \u5176\u4e2d\u8be5\u6587\u4ef6\u4e2d\u7684\u53c2\u6570 robot_description \u91cc\u7ed9\u51fa\u4e86\u673a\u5668\u4eba\u7684\u6a21\u578b,\u8be5\u53c2\u6570\u662f\u4f20\u9012\u7ed9 rrbot.rviz rrbot_world.launch \u00b6 \u8fd9\u4e2a\u662fGazebo\u91cc\u7684\u542f\u52a8\u6587\u4ef6, \u5185\u5bb9\u5982\u4e0b: <launch> <!-- these are the arguments you can pass this launch file, for example paused:=true --> <arg name= \"paused\" default= \"false\" /> <arg name= \"use_sim_time\" default= \"true\" /> <arg name= \"gui\" default= \"true\" /> <arg name= \"headless\" default= \"false\" /> <arg name= \"debug\" default= \"false\" /> <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --> <include file= \"$(find gazebo_ros)/launch/empty_world.launch\" > <arg name= \"world_name\" value= \"$(find rrbot_gazebo)/worlds/rrbot.world\" /> <arg name= \"debug\" value= \"$(arg debug)\" /> <arg name= \"gui\" value= \"$(arg gui)\" /> <arg name= \"paused\" value= \"$(arg paused)\" /> <arg name= \"use_sim_time\" value= \"$(arg use_sim_time)\" /> <arg name= \"headless\" value= \"$(arg headless)\" /> </include> <!-- Load the URDF into the ROS Parameter Server --> <param name= \"robot_description\" command= \"$(find xacro)/xacro --inorder '$(find rrbot_description)/urdf/rrbot.xacro'\" /> <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot --> <node name= \"urdf_spawner\" pkg= \"gazebo_ros\" type= \"spawn_model\" respawn= \"false\" output= \"screen\" args= \"-urdf -model rrbot -param robot_description\" /> <!-- ros_control rrbot launch file --> <!--include file=\"$(find rrbot_control)/launch/rrbot_control.launch\" /--> </launch> \u5176\u4e2d - \u4e16\u754c\u6a21\u578b\u4e3a: rrbot.world - \u8fd0\u884cspwan_model\u8282\u70b9\u751f\u6210\u673a\u5668\u4eba, \u8be5\u673a\u5668\u4eba\u6a21\u578b\u7531 robot_description \u7ed9\u51fa. rrbot.xacro \u6587\u4ef6\u89e3\u6790 \u00b6 ^23c4ed Xacro <?xml version=\"1.0\"?> <!-- Revolute-Revolute Manipulator --> <robot name= \"rrbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- Constants for robot dimensions --> <xacro:property name= \"PI\" value= \"3.1415926535897931\" /> <xacro:property name= \"mass\" value= \"1\" /> <!-- arbitrary value for mass --> <xacro:property name= \"width\" value= \"0.1\" /> <!-- Square dimensions (widthxwidth) of beams --> <xacro:property name= \"height1\" value= \"2\" /> <!-- Link 1 --> <xacro:property name= \"height2\" value= \"1\" /> <!-- Link 2 --> <xacro:property name= \"height3\" value= \"1\" /> <!-- Link 3 --> <xacro:property name= \"camera_link\" value= \"0.05\" /> <!-- Size of square 'camera' box --> <xacro:property name= \"axel_offset\" value= \"0.05\" /> <!-- Space btw top of beam and the each joint --> <!-- Import all Gazebo-customization elements, including Gazebo colors --> <xacro:include filename= \"$(find rrbot_description)/urdf/rrbot.gazebo\" /> <!-- Import Rviz colors --> <xacro:include filename= \"$(find rrbot_description)/urdf/materials.xacro\" /> <!-- Used for fixing robot to Gazebo 'base_link' --> <link name= \"world\" /> <joint name= \"fixed\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"link1\" /> </joint> <!-- Base Link --> <link name= \"link1\" > <collision> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height1*height1)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height1*height1 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> <joint name= \"joint1\" type= \"continuous\" > <parent link= \"link1\" /> <child link= \"link2\" /> <origin xyz= \"0 ${width} ${height1 - axel_offset}\" rpy= \"0 0 0\" /> <axis xyz= \"0 1 0\" /> <dynamics damping= \"0.7\" /> </joint> <!-- Middle Link --> <link name= \"link2\" > <collision> <origin xyz= \"0 0 ${height2/2 - axel_offset}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height2}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height2/2 - axel_offset}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height2}\" /> </geometry> <material name= \"black\" /> </visual> <inertial> <origin xyz= \"0 0 ${height2/2 - axel_offset}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height2*height2)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height2*height2 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> <joint name= \"joint2\" type= \"continuous\" > <parent link= \"link2\" /> <child link= \"link3\" /> <origin xyz= \"0 ${width} ${height2 - axel_offset*2}\" rpy= \"0 0 0\" /> <axis xyz= \"0 1 0\" /> <dynamics damping= \"0.7\" /> </joint> <!-- Top Link --> <link name= \"link3\" > <collision> <origin xyz= \"0 0 ${height3/2 - axel_offset}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height3}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height3/2 - axel_offset}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height3}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 ${height3/2 - axel_offset}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height3*height3)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height3*height3 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> <joint name= \"hokuyo_joint\" type= \"fixed\" > <axis xyz= \"0 1 0\" /> <origin xyz= \"0 0 ${height3 - axel_offset/2}\" rpy= \"0 0 0\" /> <parent link= \"link3\" /> <child link= \"hokuyo_link\" /> </joint> <!-- Hokuyo Laser --> <link name= \"hokuyo_link\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.1 0.1 0.1\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <mesh filename= \"package://rrbot_description/meshes/hokuyo.dae\" /> </geometry> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link> <joint name= \"camera_joint\" type= \"fixed\" > <axis xyz= \"0 1 0\" /> <origin xyz= \"${camera_link} 0 ${height3 - axel_offset*2}\" rpy= \"0 0 0\" /> <parent link= \"link3\" /> <child link= \"camera_link\" /> </joint> <!-- Camera --> <link name= \"camera_link\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"${camera_link} ${camera_link} ${camera_link}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"${camera_link} ${camera_link} ${camera_link}\" /> </geometry> <material name= \"red\" /> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link> <!-- generate an optical frame http://www.ros.org/reps/rep-0103.html#suffix-frames so that ros and opencv can operate on the camera frame correctly --> <joint name= \"camera_optical_joint\" type= \"fixed\" > <!-- these values have to be these values otherwise the gazebo camera image won't be aligned properly with the frame it is supposedly originating from --> <origin xyz= \"0 0 0\" rpy= \"${-pi/2} 0 ${-pi/2}\" /> <parent link= \"camera_link\" /> <child link= \"camera_link_optical\" /> </joint> <link name= \"camera_link_optical\" > </link> <transmission name= \"tran1\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"joint1\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> </joint> <actuator name= \"motor1\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> <transmission name= \"tran2\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"joint2\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> </joint> <actuator name= \"motor2\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </robot> \u9996\u5148\u7ed9\u51fa\u673a\u5668\u4eba\u7684\u540d\u5b57\u548c\u547d\u540d\u7a7a\u95f4 <robot name=\"rrbot\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\"> \u8bbe\u7f6e\u4e00\u4e9b\u5e38\u6570 <xacro:property name= \"PI\" value= \"3.1415926535897931\" /> <xacro:property name= \"mass\" value= \"1\" /> <!-- arbitrary value for mass --> <xacro:property name= \"width\" value= \"0.1\" /> <!-- Square dimensions (widthxwidth) of beams --> <xacro:property name= \"height1\" value= \"2\" /> <!-- Link 1 --> <xacro:property name= \"height2\" value= \"1\" /> <!-- Link 2 --> <xacro:property name= \"height3\" value= \"1\" /> <!-- Link 3 --> <xacro:property name= \"camera_link\" value= \"0.05\" /> <!-- Size of square 'camera' box --> <xacro:property name= \"axel_offset\" value= \"0.05\" /> <!-- Space btw top of beam and the each joint \u8c03\u7528\u4e00\u4e2agazebo\u683c\u5f0f\u548c\u4e00\u4e2axacro\u683c\u5f0f\u7684\u6587\u4ef6 <xacro:include filename= \"$(find rrbot_description)/urdf/rrbot.gazebo\" /> <!-- Import Rviz colors --> <xacro:include filename= \"$(find rrbot_description)/urdf/materials.xacro\" /> rrbot.gazebo a Gazebo specific file that includes most of our Gazebo-specific XML elements including the tags materials.xacro Rviz \u7684\u989c\u8272\u6587\u4ef6\uff0c\u7528\u4e8e\u5b58\u50a8rgba\u503c \u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u7528\u4e8eGazebo, \u4e00\u4e2a\u7528\u4e8eRviz \u521b\u5efa\u4e00\u4e2aworld\u7684\u6bcdlink\u548cjoint\u5c06world\u548c\u673a\u5668\u4eba\u8fde\u63a5 <link name= \"world\" /> <joint name= \"fixed\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"link1\" /> </joint> TIPS : \u5982\u679c\u662f\u8fd0\u52a8\u7684\uff0c\u5219\u4e0d\u9700\u8981\u6b64\u64cd\u4f5c - \u5bf9 link1 \u8fdb\u884c\u5b9a\u4e49 <link name= \"link1\" > <collision> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height1*height1)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height1*height1 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> \u5173\u4e8e link \u7684\u8be6\u7ec6\u89e3\u8bfb,\u89c1[[1-Tutorial Using a URDF in Gazebo#^efb6c3|xacro\u6587\u4ef6\u4e2dlink\u6807\u7b7e\u7684\u8be6\u7ec6\u89e3\u6790]] - \u5b9a\u4e49 joint1 \u7528\u4e8e\u8fde\u63a5link1\u548clink2 <joint name= \"joint1\" type= \"continuous\" > <parent link= \"link1\" /> <child link= \"link2\" /> <origin xyz= \"0 ${width} ${height1 - axel_offset}\" rpy= \"0 0 0\" /> <axis xyz= \"0 1 0\" /> <dynamics damping= \"0.7\" /> </joint> \u5173\u4e8ejoint\u7684\u8be6\u7ec6\u89e3\u6790\u89c1[[1-Tutorial Using a URDF in Gazebo#^56ef76]] - \u5176\u4ed6\u7684\u51e0\u4e2alink - hokuyo_link \u6fc0\u5149\u6d4b\u8dddlink\u7684\u5b9a\u4e49 <!-- Hokuyo Laser --> <link name= \"hokuyo_link\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.1 0.1 0.1\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <mesh filename= \"package://rrbot_description/meshes/hokuyo.dae\" /> </geometry> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link> <joint name= \"camera_joint\" type= \"fixed\" > <axis xyz= \"0 1 0\" /> <origin xyz= \"${camera_link} 0 ${height3 - axel_offset*2}\" rpy= \"0 0 0\" /> <parent link= \"link3\" /> <child link= \"camera_link\" /> </joint> \u5176\u4e2dmesh\u6807\u7b7e\u91cc\u7528\u4e86\u76f8\u5e94\u7684 hokuyo.dae \u6587\u4ef6. \u548cRviz\u4e00\u6837\uff0cGazebo\u652f\u6301 STL \u548c Collada \u6587\u4ef6\uff08.dae\uff09\u3002\u4f46\u662f\u63a8\u8350\u7528\u540e\u8005\uff0c\u56e0\u4e3a\u5b83\u652f\u6301\u989c\u8272\u3001\u7eb9\u7406\u3002 - transmission \u5143\u7d20 <transmission name= \"tran1\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"joint1\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> </joint> <actuator name= \"motor1\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> xacro \u6587\u4ef6\u4e2dlink\u6807\u7b7e\u7684\u8be6\u7ec6\u89e3\u6790 \u00b6 ^efb6c3 \u9996\u5148\u9700\u8981\u719f\u6089URDF link \u5143\u7d20\u3002\u793a\u4f8b\u5982\u4e0b\uff1a <!-- Base Link --> <link name= \"link1\" > <collision> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 1\" rpy= \"0 0 0\" /> <mass value= \"1\" /> <inertia ixx= \"1.0\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"1.0\" iyz= \"0.0\" izz= \"1.0\" /> </inertial> </link> \u51e0\u70b9\u8bf4\u660e - <collision> \u548c <visual> \u5143\u7d20\u7684\u5185\u5bb9\u57fa\u672c\u662f\u4e00\u6837\u7684, \u8fd9\u662f\u56e0\u4e3a\u4f7f\u5f97\u6a21\u578b\u65e2\u5728Gazebo\u4e2d\u80fd\u663e\u793a\u53c8\u80fd\u5728Rviz\u4e2d\u663e\u793a. \u5bf9\u4e8eGazebo\u6765\u8bf4, \u5982\u679c\u4e0d\u6307\u5b9a <collision> ,\u5219\u9ed8\u8ba4\u4e3a\u4e0d\u53ef\u89c1\u7684. - <visual> \u8fd8\u6307\u5b9a\u4e86\u6750\u8d28, <material name=\"orange\"/> , orange \u7528\u4e8erviz\u7684\u5b9a\u4e49\u89c1 materials.xacro ; orange \u7528\u4e8eGazebo\u7684\u5b9a\u4e49\u89c1 rrbot.gazebo , \u8be6\u7ec6\u89e3\u8bfb\u89c1[[1-Tutorial Using a URDF in Gazebo#^813610|material \u6750\u8d28\u5b9a\u4e49]] - Gazebo\u91cc\u7684\u5355\u4f4d\u4e3am\u548ckg REP 103: Standard Units of measure and Coordinate Conventions - <inertial> \u7ed9\u51fa\u4e86\u8d28\u91cf\u7279\u6027, \u8fd9\u4e2a\u662f\u7528\u4e8eGazebo(\u6211\u7684\u7406\u89e3)\u7269\u7406\u5f15\u64ce URDF link element , \u4e00\u4e9b\u8bbe\u7f6e\u53ef\u4ee5\u5728Gazebo-View\u83dc\u5355\u91cc\u9009\u62e9''Wireframe'' \u548c ''Center of Mass''\u67e5\u770b\u662f\u5426\u9009\u62e9\u6b63\u786e\u3002\u4e00\u822c\u53ef\u4ee5\u5229\u7528Solidworks\u7b49CAD\u5bf9\u60ef\u91cf\u8fdb\u884c\u8fd1\u4f3c;; material \u6750\u8d28\u5b9a\u4e49 \u00b6 ^813610 \u5229\u7528\u5982\u4e0b\u7684\u547d\u4ee4\u6307\u5b9a\u989c\u8272\uff0c <material name=\"orange\"/> orange\u989c\u8272\u5728\u5355\u72ec\u7684\u6587\u4ef6\u91cc\u5b9a\u4e49\uff0c\u6bd4\u5982 materials.xacro : <material name=\"orange\"> <color rgba=\"${255/255} ${108/255} ${10/255} 1.0\"/> </material> \u8fd9\u79cd\u65b9\u6cd5\u5728Gazebo\u91cc\u4e0d\u9002\u7528\uff0c\u5728Gazebo\u91cc\u9700\u8981\u91c7\u7528\u5982\u4e0b\u7684\u6807\u7b7e\uff1a <gazebo reference=\"link1\"> <material>Gazebo/Orange</material> </gazebo> RRBot\u793a\u4f8b\u4e2d\u8c03\u7528 rrbot.gazebo \u6587\u4ef6\uff0c\u5728\u8be5\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86\u76f8\u5e94\u7684\u548cGazebo\u76f8\u5173\u7684\u6807\u7b7e\uff0c\u6bd4\u5982 <link> and <material> . Gazebo\u7684\u9ed8\u8ba4\u53ef\u7528\u6750\u8d28\u89c1 gazebo/media/materials/scripts/gazebo.material . \u5982\u679c\u8981\u81ea\u5df1\u521b\u5efa\u6750\u8d28\uff0c \u89c1\uff1a The <material> SDF documentation OGRE materials documentation \u5173\u8282Joints\u8be6\u7ec6\u89e3\u8bfb \u00b6 ^56ef76 \u4e0b\u9762\u7ed9\u51fajoint1\u7684\u5b9a\u4e49 <joint name= \"joint1\" type= \"continuous\" > <parent link= \"link1\" /> <child link= \"link2\" /> <origin xyz= \"0 ${width} ${height1 - axel_offset}\" rpy= \"0 0 0\" /> <axis xyz= \"0 1 0\" /> <dynamics damping= \"0.7\" /> </joint> \u9996\u5148\u9700\u8981\u719f\u6089 URDF joint documentation . \u5bf9\u4e8eGazebo\u6765\u8bf4\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u5982\u4e0b\u7684\u51e0\u70b9\uff1a <origin> , <parent> \u548c <child> \u662f\u5fc5\u987b\u7684 \u7701\u53bb\u4e86 <calibration> \u548c <safety_controller> \u5728 <dynamics> \u6807\u7b7e\u91cc\uff0cgazebo4\u53ea\u7528\u4e86 damping \u5c5e\u6027\uff0c Gazebo5 \u53ca\u4ee5\u4e0a\u7248\u672c\u8fd8\u7528\u4e86 friction \u5c5e\u6027 \u5728 <limit> \u7684\u5c5e\u6027\u662f\u53ef\u9009\u9879 dynamics damping=0.7 N\\*m\\*s/rad rrbot.gazebo \u89e3\u8bfb \u00b6 <?xml version=\"1.0\"?> <robot> <!-- ros_control plugin --> <gazebo> <plugin name= \"gazebo_ros_control\" filename= \"libgazebo_ros_control.so\" > <robotNamespace> /rrbot </robotNamespace> <robotSimType> gazebo_ros_control/DefaultRobotHWSim </robotSimType> </plugin> </gazebo> <!-- Link1 --> <gazebo reference= \"link1\" > <material> Gazebo/Orange </material> </gazebo> <!-- Link2 --> <gazebo reference= \"link2\" > <mu1> 0.2 </mu1> <mu2> 0.2 </mu2> <material> Gazebo/Black </material> </gazebo> <!-- Link3 --> <gazebo reference= \"link3\" > <mu1> 0.2 </mu1> <mu2> 0.2 </mu2> <material> Gazebo/Orange </material> </gazebo> <!-- camera_link --> <gazebo reference= \"camera_link\" > <mu1> 0.2 </mu1> <mu2> 0.2 </mu2> <material> Gazebo/Red </material> </gazebo> <!-- hokuyo --> <gazebo reference= \"hokuyo_link\" > <sensor type= \"gpu_ray\" name= \"head_hokuyo_sensor\" > <pose> 0 0 0 0 0 0 </pose> <visualize> false </visualize> <update_rate> 40 </update_rate> <ray> <scan> <horizontal> <samples> 720 </samples> <resolution> 1 </resolution> <min_angle> -1.570796 </min_angle> <max_angle> 1.570796 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <!-- Noise parameters based on published spec for Hokuyo laser achieving \"+-30mm\" accuracy at range < 10m. A mean of 0.0m and stddev of 0.01m will put 99.7% of samples within 0.03m of the true reading. --> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_ros_head_hokuyo_controller\" filename= \"libgazebo_ros_gpu_laser.so\" > <topicName> /rrbot/laser/scan </topicName> <frameName> hokuyo_link </frameName> </plugin> </sensor> </gazebo> <!-- camera --> <gazebo reference= \"camera_link\" > <sensor type= \"camera\" name= \"camera1\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 800 </width> <height> 800 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <!-- Noise is sampled independently per pixel on each frame. That pixel's noise value is added to each of its color channels, which at that point lie in the range [0,1]. --> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"camera_controller\" filename= \"libgazebo_ros_camera.so\" > <alwaysOn> true </alwaysOn> <updateRate> 0.0 </updateRate> <cameraName> rrbot/camera1 </cameraName> <imageTopicName> image_raw </imageTopicName> <cameraInfoTopicName> camera_info </cameraInfoTopicName> <frameName> camera_link_optical </frameName> <!-- setting hackBaseline to anything but 0.0 will cause a misalignment between the gazebo sensor image and the frame it is supposed to be attached to --> <hackBaseline> 0.0 </hackBaseline> <distortionK1> 0.0 </distortionK1> <distortionK2> 0.0 </distortionK2> <distortionK3> 0.0 </distortionK3> <distortionT1> 0.0 </distortionT1> <distortionT2> 0.0 </distortionT2> <CxPrime> 0 </CxPrime> <Cx> 0.0 </Cx> <Cy> 0.0 </Cy> <focalLength> 0.0 </focalLength> </plugin> </sensor> </gazebo> </robot> link1\u7684\u6750\u8d28\u5b9a\u4e49 <gazebo reference= \"link1\" > <material> Gazebo/Orange </material> </gazebo> \u540e\u9762\u7684reference,\u8868\u793a\u4e13\u95e8\u4e3alink1\u5b9a\u4e49\u7684, \u5982\u679c\u540e\u9762\u6ca1\u6709 reference=\"\" \u5c5e\u6027\uff0c\u5219\u8868\u660e\u8be5\u5143\u7d20\u7528\u4e8e\u6574\u4e2a\u673a\u5668\u4eba\u6a21\u578b\u3002 The elements for a <robot> inside the <gazebo> tag are listed in the following table: Name Type Description static bool If set to true, the model is immovable. Otherwise the model is simulated in the dynamics engine. \u5728 <gazebo> \u4e2d\u7684\u5176\u4ed6\u6807\u7b7e\u5219\u4f1a\u76f4\u63a5\u63d2\u5165\u5230SDF\u7684 <model> \u6807\u7b7e\u7528\u4e8e\u4ea7\u751fSDF\uff0c\u5bf9\u4e8e\u63d2\u4ef6\u5f88\u6709\u7528\uff0c\u89c1 ROS Motor and Sensor Plugins \u6559\u7a0b ( \u6ca1\u660e\u767d ) gazebo\u6587\u4ef6\u4e2d\u548clink\u76f8\u5173\u7684\u7684\u5143\u7d20 Name Type Description material value Material of visual element gravity bool Use gravity dampingFactor double Exponential velocity decay of the link velocity - takes the value and multiplies the previous link velocity by (1-dampingFactor). maxVel double maximum contact correction velocity truncation term. minDepth double minimum allowable depth before contact correction impulse is applied mu1 double Friction coefficients \u03bc for the principal contact directions along the contact surface as defined by the Open Dynamics Engine (ODE) (see parameter descriptions in ODE's user guide ) mu2 fdir1 string 3-tuple specifying direction of mu1 in the collision local reference frame. kp double Contact stiffness k_p and damping k_d for rigid body contacts as defined by ODE ( ODE uses erp and cfm but there is a mapping between erp/cfm and stiffness/damping ) kd selfCollide bool If true, the link can collide with other links in the model. maxContacts int Maximum number of contacts allowed between two entities. This value overrides the max_contacts element defined in physics. laserRetro double intensity value returned by laser sensor. \u4e0a\u8868\u4e2d\u6ca1\u6709\u63d0\u53ca\u7684\u6807\u7b7e\u5219\u4f1a\u76f4\u63a5\u63d2\u5165SDF\u7684 <link> \u7684\u5bf9\u5e94\u9879\u91cc\uff0c\u8fd9\u5bf9\u4e8e\u63d2\u4ef6\u7279\u522b\u6709\u7528\uff0c\u53c2\u89c1 ROS Motor and Sensor Plugins .gazebo \u6587\u4ef6\u4e2d\u548cjoint\u76f8\u5173\u7684\u7684\u5143\u7d20 Name Type Description stopCfm double Joint stop constraint force mixing (cfm) and error reduction parameter (erp) used by ODE stopErp provideFeedback bool Allows joints to publish their wrench data (force-torque) via a Gazebo plugin implicitSpringDamper bool If this flag is set to true, ODE will use ERP and CFM to simulate damping. This is a more stable numerical method for damping than the default damping tag. The cfmDamping element is deprecated and should be changed to implicitSpringDamper. springStiffness double Spring stiffness in N/m. springReference double Equilibrium position for the spring. cfmDamping fudgeFactor double Scale the excess for in a joint motor at joint limits. Should be between zero and one. \u548c\u7528\u4e8e <robot> and <link> \u7684< <gazebo> \u5143\u7d20\u4e00\u6837\uff0c\u6ca1\u6709\u5728\u4e0a\u8868\u5217\u51fa\u7684\u9879\u5c06\u76f4\u63a5\u63d2\u5165\u5230SDF\u6a21\u578b\u91cc\u7684 <joint> \uff0c\u53c2\u8003 ROS Motor and Sensor Plugins - d \u9057\u7559\u95ee\u9898 \u00b6 launch \u6587\u4ef6\u4e2d\u7684 transmission \u6ca1\u6709\u5f04\u660e\u767d .gazebo \u6587\u4ef6\u4e2d\u7528\u4e8e hokuyo\\_link \u7684\u4e00\u4e9b\u6807\u7b7e\u548c\u63d2\u4ef6\u6ca1\u6709\u5f04\u660e\u767d, camera_link \u4e5f\u662f\u5982\u6b64, \u8fd9\u4e9b\u6807\u7b7e\u7684\u89e3\u8bfb\u89c1[[2-Tutorial Using Gazebo plugins with ROS#^dd2599]] \u4e0b\u4e00\u4e2a\u6559\u7a0b\uff1a ROS Motor and Sensor Plugins . \u5176\u4ed6 (\u6682\u65f6\u4e0d\u7ba1) \u00b6 \u9a8c\u8bc1\u6a21\u578b\u662f\u5426\u8f6c\u6362\u6210SDF \u00b6 \u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u67e5\u770bURDF\u662f\u5426\u8f6c\u6362\u6210SDF\u683c\u5f0f\u3002 # gazebo2 and below gzsdf print MODEL.urdf # gazebo3 and above gz sdf -p MODEL.urdf Note: in Gazebo version 1.9 and greater, some of the debug info has been moved to a log file you can view with: cat ~/.gazebo/gzsdf.log \u5728 Gazebo\u91cc\u67e5\u770bURDF\u6a21\u578b \u00b6 Viewing the RRBot in Gazebo was already covered at the beginning of this tutorial. For your own custom robot, we assume its URDF lives in a ROS package named MYROBOT_description in the subfolder /urdf . The method to open a URDF from that location into Gazebo using ROS was covered in the previous tutorial, Using roslaunch Files to Spawn Models . If you have not completed that tutorial, do so now. From that tutorial you should have two ROS packages for your custom robot: MYROBOT_description and MYROBOT_gazebo . To view your robot and test it in Gazebo, you should be able to now run something like: roslaunch MYROBOT_gazebo MYROBOT.launch This should launch both the Gazebo server and GUI client with your robot automatically launched spawned inside. \u8c03\u6574 \u00b6 \u53c2\u8003\uff1a SDF user guide If your robot model behaves unexpectedly within Gazebo, it is likely because your URDF needs further tuning to accurately represent its physics in Gazebo. See the SDF user guide for more info on various properties available in Gazebo, which are also available in the URDF via the <gazebo> tag. \u5171\u4eab\u6a21\u578b \u00b6 If you have a common robot that other's might want to use in Gazebo, you are encouraged to add your URDF to the Gazebo Model Database . It is an online server that Gazebo connects to to pull down models from the internet. Its Mercurial repository is located on GitHub . See Gazebo Model Database documentation for how to submit a pull request to have your robot added to the database. Next steps \u00b6 \u4e0b\u4e00\u4e2a\u6559\u7a0b\uff1a ROS Motor and Sensor Plugins . \u539f\u7f51\u5740: \u8bbf\u95ee \u521b\u5efa\u65f6\u95f4: 2021-03-31 08:51:36 \u76ee\u5f55: default \u6807\u7b7e: \u65e0","title":"1 Tutorial Using a URDF in Gazebo"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#tutorial-using-a-urdf-in-gazebo","text":"Unified Robotic Description Format (URDF)\u4e3aXML\u683c\u5f0f\uff0c\u7528\u4e8e\u5728ROS\u4e2d\u63cf\u8ff0\u673a\u5668\u4eba\u3002 Gazebo\u53ef\u4ee5\u81ea\u52a8\u5c06URDF\u8f6c\u6362\u6210SDF","title":"Tutorial: Using a URDF in Gazebo"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#_1","text":"URDF\u683c\u5f0f - \u53ef\u4ee5\u63cf\u8ff0\u8d28\u70b9\u8fd0\u52a8\u548c\u52a8\u529b\u5b66\u7279\u6027\uff0c - \u4e0d\u80fd\u63cf\u8ff0\u673a\u5668\u4eba\u5728\u4e16\u754c\u91cc\u7684pose - \u4e0d\u80fd\u63cf\u8ff0oint loops (parallel linkages), and it lacks friction and other properties - \u4e0d\u80fd\u63cf\u8ff0\u975e\u673a\u5668\u4eba\uff0c\u6bd4\u5982\u5149\u7ebf\u3001\u9ad8\u7a0b\u56fe\u7b49\u3002 \u4e3a\u4e86\u514b\u670dURDF\u683c\u5f0f\u7684\u7f3a\u70b9\uff0c\u521b\u5efa\u4e86 Simulation Description Format (SDF)\u683c\u5f0f\u7528\u4e8eGazebo\u3002 SDF\u683c\u5f0f\u63cf\u8ff0\u4e86\u5143\u7d20\u6db5\u76d6\u4e16\u754c\u548c\u673a\u5668\u4eba\uff0c\u683c\u5f0f\u4e3aXML.","title":"\u80cc\u666f"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#rrbot","text":"\u4e00\u822c\u7684\u6b65\u9aa4\u662f\u9996\u5148\u5728 Rviz \u4e0b\u6d4b\u8bd5URDF\u6a21\u578b,\u7136\u540e\u518d\u5728Gazebo\u4e2d\u5bf9\u673a\u5668\u4eba\u6a21\u578b\u8fdb\u884c\u914d\u7f6e. \u53c2\u8003: ROS URDF Tutorials .","title":"RRBot \u793a\u4f8b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#rrbot_1","text":"cd ~/catkin_ws/src/ git clone https://github.com/ros-simulation/gazebo_ros_demos.git cd .. catkin_make \u5176\u4ed6\u53c2\u8003\uff1a ROS Overview Tutorials .","title":"\u4e0b\u8f7d RRBot"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#rvizgazebo","text":"\u5728Rviz\u4e0b\u548cGazbo\u4e0b\u67e5\u770b\u7684\u547d\u4ee4\u5982\u4e0b: roslaunch rrbot_description rrbot_rviz.launch roslaunch rrbot_gazebo rrbot_world.launch TIPS: - \u53ef\u80fd\u9700\u8981\u5b89\u88c5 sudo apt install ros-melodic-joint-state-publisher-gui - \u5982\u679c\u770b\u4e0d\u5230\uff0c\u5219\u8bd5\u7740\u5f3a\u5236\u5173\u6389\u5176\u4ed6\u8fdb\u7a0b killall roscore \u518d\u8bd5\u8bd5 (\u8fd9\u4e2a\u5f88\u6709\u6548) - gazebo_ros_control \u6559\u7a0b\u91cc\u7ed9\u51fa\u4e86\u5982\u4f55\u5229\u7528Rviz\u6765\u76d1\u89c6\u673a\u5668\u4eba\u5229\u7528 /joint_states \u53d1\u5e03\u7684\u72b6\u6001\u3002\u5728\u672c\u4f8b\u4e2d\uff0cRviz\u91cc\u7684RRbot\u63a5\u53d7\u865a\u62df\u7684 joint_states_publisher \u8282\u70b9\u53d1\u5e03\u7684 /joint_states Gazebo\u4e0b\u7684\u622a\u56fe\u5982\u4e0b\uff1a![[Pasted image 20210331112544.png]]","title":"Rviz\u91cc\u548cGazebo\u91cc\u67e5\u770b\u6a21\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#launch","text":"","title":"launch\u6587\u4ef6\u89e3\u6790"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#rrbot_rvizlaunch","text":"<launch> <param name= \"robot_description\" command= \"$(find xacro)/xacro --inorder '$(find rrbot_description)/urdf/rrbot.xacro'\" /> <!-- send fake joint values --> <node name= \"joint_state_publisher\" pkg= \"joint_state_publisher\" type= \"joint_state_publisher\" > <param name= \"use_gui\" value= \"TRUE\" /> </node> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"robot_state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find rrbot_description)/launch/rrbot.rviz\" /> </launch> \u4e3b\u8981\u529f\u80fd\u89c1\u6700\u540e\u4e00\u4e2a\u8fd0\u884c\u8282\u70b9,\u8fd0\u884crviz\u5305\u7684rviz\u8282\u70b9,\u8c03\u7528\u7684\u662f rrbot.rviz \u6587\u4ef6, \u5176\u4e2d\u8be5\u6587\u4ef6\u4e2d\u7684\u53c2\u6570 robot_description \u91cc\u7ed9\u51fa\u4e86\u673a\u5668\u4eba\u7684\u6a21\u578b,\u8be5\u53c2\u6570\u662f\u4f20\u9012\u7ed9 rrbot.rviz","title":"rrbot_rviz.launch"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#rrbot_worldlaunch","text":"\u8fd9\u4e2a\u662fGazebo\u91cc\u7684\u542f\u52a8\u6587\u4ef6, \u5185\u5bb9\u5982\u4e0b: <launch> <!-- these are the arguments you can pass this launch file, for example paused:=true --> <arg name= \"paused\" default= \"false\" /> <arg name= \"use_sim_time\" default= \"true\" /> <arg name= \"gui\" default= \"true\" /> <arg name= \"headless\" default= \"false\" /> <arg name= \"debug\" default= \"false\" /> <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --> <include file= \"$(find gazebo_ros)/launch/empty_world.launch\" > <arg name= \"world_name\" value= \"$(find rrbot_gazebo)/worlds/rrbot.world\" /> <arg name= \"debug\" value= \"$(arg debug)\" /> <arg name= \"gui\" value= \"$(arg gui)\" /> <arg name= \"paused\" value= \"$(arg paused)\" /> <arg name= \"use_sim_time\" value= \"$(arg use_sim_time)\" /> <arg name= \"headless\" value= \"$(arg headless)\" /> </include> <!-- Load the URDF into the ROS Parameter Server --> <param name= \"robot_description\" command= \"$(find xacro)/xacro --inorder '$(find rrbot_description)/urdf/rrbot.xacro'\" /> <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot --> <node name= \"urdf_spawner\" pkg= \"gazebo_ros\" type= \"spawn_model\" respawn= \"false\" output= \"screen\" args= \"-urdf -model rrbot -param robot_description\" /> <!-- ros_control rrbot launch file --> <!--include file=\"$(find rrbot_control)/launch/rrbot_control.launch\" /--> </launch> \u5176\u4e2d - \u4e16\u754c\u6a21\u578b\u4e3a: rrbot.world - \u8fd0\u884cspwan_model\u8282\u70b9\u751f\u6210\u673a\u5668\u4eba, \u8be5\u673a\u5668\u4eba\u6a21\u578b\u7531 robot_description \u7ed9\u51fa.","title":"rrbot_world.launch"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#rrbotxacro","text":"^23c4ed Xacro <?xml version=\"1.0\"?> <!-- Revolute-Revolute Manipulator --> <robot name= \"rrbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- Constants for robot dimensions --> <xacro:property name= \"PI\" value= \"3.1415926535897931\" /> <xacro:property name= \"mass\" value= \"1\" /> <!-- arbitrary value for mass --> <xacro:property name= \"width\" value= \"0.1\" /> <!-- Square dimensions (widthxwidth) of beams --> <xacro:property name= \"height1\" value= \"2\" /> <!-- Link 1 --> <xacro:property name= \"height2\" value= \"1\" /> <!-- Link 2 --> <xacro:property name= \"height3\" value= \"1\" /> <!-- Link 3 --> <xacro:property name= \"camera_link\" value= \"0.05\" /> <!-- Size of square 'camera' box --> <xacro:property name= \"axel_offset\" value= \"0.05\" /> <!-- Space btw top of beam and the each joint --> <!-- Import all Gazebo-customization elements, including Gazebo colors --> <xacro:include filename= \"$(find rrbot_description)/urdf/rrbot.gazebo\" /> <!-- Import Rviz colors --> <xacro:include filename= \"$(find rrbot_description)/urdf/materials.xacro\" /> <!-- Used for fixing robot to Gazebo 'base_link' --> <link name= \"world\" /> <joint name= \"fixed\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"link1\" /> </joint> <!-- Base Link --> <link name= \"link1\" > <collision> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height1*height1)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height1*height1 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> <joint name= \"joint1\" type= \"continuous\" > <parent link= \"link1\" /> <child link= \"link2\" /> <origin xyz= \"0 ${width} ${height1 - axel_offset}\" rpy= \"0 0 0\" /> <axis xyz= \"0 1 0\" /> <dynamics damping= \"0.7\" /> </joint> <!-- Middle Link --> <link name= \"link2\" > <collision> <origin xyz= \"0 0 ${height2/2 - axel_offset}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height2}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height2/2 - axel_offset}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height2}\" /> </geometry> <material name= \"black\" /> </visual> <inertial> <origin xyz= \"0 0 ${height2/2 - axel_offset}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height2*height2)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height2*height2 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> <joint name= \"joint2\" type= \"continuous\" > <parent link= \"link2\" /> <child link= \"link3\" /> <origin xyz= \"0 ${width} ${height2 - axel_offset*2}\" rpy= \"0 0 0\" /> <axis xyz= \"0 1 0\" /> <dynamics damping= \"0.7\" /> </joint> <!-- Top Link --> <link name= \"link3\" > <collision> <origin xyz= \"0 0 ${height3/2 - axel_offset}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height3}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height3/2 - axel_offset}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height3}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 ${height3/2 - axel_offset}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height3*height3)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height3*height3 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> <joint name= \"hokuyo_joint\" type= \"fixed\" > <axis xyz= \"0 1 0\" /> <origin xyz= \"0 0 ${height3 - axel_offset/2}\" rpy= \"0 0 0\" /> <parent link= \"link3\" /> <child link= \"hokuyo_link\" /> </joint> <!-- Hokuyo Laser --> <link name= \"hokuyo_link\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.1 0.1 0.1\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <mesh filename= \"package://rrbot_description/meshes/hokuyo.dae\" /> </geometry> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link> <joint name= \"camera_joint\" type= \"fixed\" > <axis xyz= \"0 1 0\" /> <origin xyz= \"${camera_link} 0 ${height3 - axel_offset*2}\" rpy= \"0 0 0\" /> <parent link= \"link3\" /> <child link= \"camera_link\" /> </joint> <!-- Camera --> <link name= \"camera_link\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"${camera_link} ${camera_link} ${camera_link}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"${camera_link} ${camera_link} ${camera_link}\" /> </geometry> <material name= \"red\" /> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link> <!-- generate an optical frame http://www.ros.org/reps/rep-0103.html#suffix-frames so that ros and opencv can operate on the camera frame correctly --> <joint name= \"camera_optical_joint\" type= \"fixed\" > <!-- these values have to be these values otherwise the gazebo camera image won't be aligned properly with the frame it is supposedly originating from --> <origin xyz= \"0 0 0\" rpy= \"${-pi/2} 0 ${-pi/2}\" /> <parent link= \"camera_link\" /> <child link= \"camera_link_optical\" /> </joint> <link name= \"camera_link_optical\" > </link> <transmission name= \"tran1\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"joint1\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> </joint> <actuator name= \"motor1\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> <transmission name= \"tran2\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"joint2\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> </joint> <actuator name= \"motor2\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </robot> \u9996\u5148\u7ed9\u51fa\u673a\u5668\u4eba\u7684\u540d\u5b57\u548c\u547d\u540d\u7a7a\u95f4 <robot name=\"rrbot\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\"> \u8bbe\u7f6e\u4e00\u4e9b\u5e38\u6570 <xacro:property name= \"PI\" value= \"3.1415926535897931\" /> <xacro:property name= \"mass\" value= \"1\" /> <!-- arbitrary value for mass --> <xacro:property name= \"width\" value= \"0.1\" /> <!-- Square dimensions (widthxwidth) of beams --> <xacro:property name= \"height1\" value= \"2\" /> <!-- Link 1 --> <xacro:property name= \"height2\" value= \"1\" /> <!-- Link 2 --> <xacro:property name= \"height3\" value= \"1\" /> <!-- Link 3 --> <xacro:property name= \"camera_link\" value= \"0.05\" /> <!-- Size of square 'camera' box --> <xacro:property name= \"axel_offset\" value= \"0.05\" /> <!-- Space btw top of beam and the each joint \u8c03\u7528\u4e00\u4e2agazebo\u683c\u5f0f\u548c\u4e00\u4e2axacro\u683c\u5f0f\u7684\u6587\u4ef6 <xacro:include filename= \"$(find rrbot_description)/urdf/rrbot.gazebo\" /> <!-- Import Rviz colors --> <xacro:include filename= \"$(find rrbot_description)/urdf/materials.xacro\" /> rrbot.gazebo a Gazebo specific file that includes most of our Gazebo-specific XML elements including the tags materials.xacro Rviz \u7684\u989c\u8272\u6587\u4ef6\uff0c\u7528\u4e8e\u5b58\u50a8rgba\u503c \u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2a\u7528\u4e8eGazebo, \u4e00\u4e2a\u7528\u4e8eRviz \u521b\u5efa\u4e00\u4e2aworld\u7684\u6bcdlink\u548cjoint\u5c06world\u548c\u673a\u5668\u4eba\u8fde\u63a5 <link name= \"world\" /> <joint name= \"fixed\" type= \"fixed\" > <parent link= \"world\" /> <child link= \"link1\" /> </joint> TIPS : \u5982\u679c\u662f\u8fd0\u52a8\u7684\uff0c\u5219\u4e0d\u9700\u8981\u6b64\u64cd\u4f5c - \u5bf9 link1 \u8fdb\u884c\u5b9a\u4e49 <link name= \"link1\" > <collision> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <mass value= \"${mass}\" /> <inertia ixx= \"${mass / 12.0 * (width*width + height1*height1)}\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"${mass / 12.0 * (height1*height1 + width*width)}\" iyz= \"0.0\" izz= \"${mass / 12.0 * (width*width + width*width)}\" /> </inertial> </link> \u5173\u4e8e link \u7684\u8be6\u7ec6\u89e3\u8bfb,\u89c1[[1-Tutorial Using a URDF in Gazebo#^efb6c3|xacro\u6587\u4ef6\u4e2dlink\u6807\u7b7e\u7684\u8be6\u7ec6\u89e3\u6790]] - \u5b9a\u4e49 joint1 \u7528\u4e8e\u8fde\u63a5link1\u548clink2 <joint name= \"joint1\" type= \"continuous\" > <parent link= \"link1\" /> <child link= \"link2\" /> <origin xyz= \"0 ${width} ${height1 - axel_offset}\" rpy= \"0 0 0\" /> <axis xyz= \"0 1 0\" /> <dynamics damping= \"0.7\" /> </joint> \u5173\u4e8ejoint\u7684\u8be6\u7ec6\u89e3\u6790\u89c1[[1-Tutorial Using a URDF in Gazebo#^56ef76]] - \u5176\u4ed6\u7684\u51e0\u4e2alink - hokuyo_link \u6fc0\u5149\u6d4b\u8dddlink\u7684\u5b9a\u4e49 <!-- Hokuyo Laser --> <link name= \"hokuyo_link\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.1 0.1 0.1\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <mesh filename= \"package://rrbot_description/meshes/hokuyo.dae\" /> </geometry> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link> <joint name= \"camera_joint\" type= \"fixed\" > <axis xyz= \"0 1 0\" /> <origin xyz= \"${camera_link} 0 ${height3 - axel_offset*2}\" rpy= \"0 0 0\" /> <parent link= \"link3\" /> <child link= \"camera_link\" /> </joint> \u5176\u4e2dmesh\u6807\u7b7e\u91cc\u7528\u4e86\u76f8\u5e94\u7684 hokuyo.dae \u6587\u4ef6. \u548cRviz\u4e00\u6837\uff0cGazebo\u652f\u6301 STL \u548c Collada \u6587\u4ef6\uff08.dae\uff09\u3002\u4f46\u662f\u63a8\u8350\u7528\u540e\u8005\uff0c\u56e0\u4e3a\u5b83\u652f\u6301\u989c\u8272\u3001\u7eb9\u7406\u3002 - transmission \u5143\u7d20 <transmission name= \"tran1\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"joint1\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> </joint> <actuator name= \"motor1\" > <hardwareInterface> hardware_interface/EffortJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission>","title":"rrbot.xacro\u6587\u4ef6\u89e3\u6790"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#xacrolink","text":"^efb6c3 \u9996\u5148\u9700\u8981\u719f\u6089URDF link \u5143\u7d20\u3002\u793a\u4f8b\u5982\u4e0b\uff1a <!-- Base Link --> <link name= \"link1\" > <collision> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 ${height1/2}\" rpy= \"0 0 0\" /> <geometry> <box size= \"${width} ${width} ${height1}\" /> </geometry> <material name= \"orange\" /> </visual> <inertial> <origin xyz= \"0 0 1\" rpy= \"0 0 0\" /> <mass value= \"1\" /> <inertia ixx= \"1.0\" ixy= \"0.0\" ixz= \"0.0\" iyy= \"1.0\" iyz= \"0.0\" izz= \"1.0\" /> </inertial> </link> \u51e0\u70b9\u8bf4\u660e - <collision> \u548c <visual> \u5143\u7d20\u7684\u5185\u5bb9\u57fa\u672c\u662f\u4e00\u6837\u7684, \u8fd9\u662f\u56e0\u4e3a\u4f7f\u5f97\u6a21\u578b\u65e2\u5728Gazebo\u4e2d\u80fd\u663e\u793a\u53c8\u80fd\u5728Rviz\u4e2d\u663e\u793a. \u5bf9\u4e8eGazebo\u6765\u8bf4, \u5982\u679c\u4e0d\u6307\u5b9a <collision> ,\u5219\u9ed8\u8ba4\u4e3a\u4e0d\u53ef\u89c1\u7684. - <visual> \u8fd8\u6307\u5b9a\u4e86\u6750\u8d28, <material name=\"orange\"/> , orange \u7528\u4e8erviz\u7684\u5b9a\u4e49\u89c1 materials.xacro ; orange \u7528\u4e8eGazebo\u7684\u5b9a\u4e49\u89c1 rrbot.gazebo , \u8be6\u7ec6\u89e3\u8bfb\u89c1[[1-Tutorial Using a URDF in Gazebo#^813610|material \u6750\u8d28\u5b9a\u4e49]] - Gazebo\u91cc\u7684\u5355\u4f4d\u4e3am\u548ckg REP 103: Standard Units of measure and Coordinate Conventions - <inertial> \u7ed9\u51fa\u4e86\u8d28\u91cf\u7279\u6027, \u8fd9\u4e2a\u662f\u7528\u4e8eGazebo(\u6211\u7684\u7406\u89e3)\u7269\u7406\u5f15\u64ce URDF link element , \u4e00\u4e9b\u8bbe\u7f6e\u53ef\u4ee5\u5728Gazebo-View\u83dc\u5355\u91cc\u9009\u62e9''Wireframe'' \u548c ''Center of Mass''\u67e5\u770b\u662f\u5426\u9009\u62e9\u6b63\u786e\u3002\u4e00\u822c\u53ef\u4ee5\u5229\u7528Solidworks\u7b49CAD\u5bf9\u60ef\u91cf\u8fdb\u884c\u8fd1\u4f3c;;","title":"xacro\u6587\u4ef6\u4e2dlink\u6807\u7b7e\u7684\u8be6\u7ec6\u89e3\u6790"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#material","text":"^813610 \u5229\u7528\u5982\u4e0b\u7684\u547d\u4ee4\u6307\u5b9a\u989c\u8272\uff0c <material name=\"orange\"/> orange\u989c\u8272\u5728\u5355\u72ec\u7684\u6587\u4ef6\u91cc\u5b9a\u4e49\uff0c\u6bd4\u5982 materials.xacro : <material name=\"orange\"> <color rgba=\"${255/255} ${108/255} ${10/255} 1.0\"/> </material> \u8fd9\u79cd\u65b9\u6cd5\u5728Gazebo\u91cc\u4e0d\u9002\u7528\uff0c\u5728Gazebo\u91cc\u9700\u8981\u91c7\u7528\u5982\u4e0b\u7684\u6807\u7b7e\uff1a <gazebo reference=\"link1\"> <material>Gazebo/Orange</material> </gazebo> RRBot\u793a\u4f8b\u4e2d\u8c03\u7528 rrbot.gazebo \u6587\u4ef6\uff0c\u5728\u8be5\u6587\u4ef6\u4e2d\u7ed9\u51fa\u4e86\u76f8\u5e94\u7684\u548cGazebo\u76f8\u5173\u7684\u6807\u7b7e\uff0c\u6bd4\u5982 <link> and <material> . Gazebo\u7684\u9ed8\u8ba4\u53ef\u7528\u6750\u8d28\u89c1 gazebo/media/materials/scripts/gazebo.material . \u5982\u679c\u8981\u81ea\u5df1\u521b\u5efa\u6750\u8d28\uff0c \u89c1\uff1a The <material> SDF documentation OGRE materials documentation","title":"material \u6750\u8d28\u5b9a\u4e49"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#joints","text":"^56ef76 \u4e0b\u9762\u7ed9\u51fajoint1\u7684\u5b9a\u4e49 <joint name= \"joint1\" type= \"continuous\" > <parent link= \"link1\" /> <child link= \"link2\" /> <origin xyz= \"0 ${width} ${height1 - axel_offset}\" rpy= \"0 0 0\" /> <axis xyz= \"0 1 0\" /> <dynamics damping= \"0.7\" /> </joint> \u9996\u5148\u9700\u8981\u719f\u6089 URDF joint documentation . \u5bf9\u4e8eGazebo\u6765\u8bf4\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f\u5982\u4e0b\u7684\u51e0\u70b9\uff1a <origin> , <parent> \u548c <child> \u662f\u5fc5\u987b\u7684 \u7701\u53bb\u4e86 <calibration> \u548c <safety_controller> \u5728 <dynamics> \u6807\u7b7e\u91cc\uff0cgazebo4\u53ea\u7528\u4e86 damping \u5c5e\u6027\uff0c Gazebo5 \u53ca\u4ee5\u4e0a\u7248\u672c\u8fd8\u7528\u4e86 friction \u5c5e\u6027 \u5728 <limit> \u7684\u5c5e\u6027\u662f\u53ef\u9009\u9879 dynamics damping=0.7 N\\*m\\*s/rad","title":"\u5173\u8282Joints\u8be6\u7ec6\u89e3\u8bfb"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#rrbotgazebo","text":"<?xml version=\"1.0\"?> <robot> <!-- ros_control plugin --> <gazebo> <plugin name= \"gazebo_ros_control\" filename= \"libgazebo_ros_control.so\" > <robotNamespace> /rrbot </robotNamespace> <robotSimType> gazebo_ros_control/DefaultRobotHWSim </robotSimType> </plugin> </gazebo> <!-- Link1 --> <gazebo reference= \"link1\" > <material> Gazebo/Orange </material> </gazebo> <!-- Link2 --> <gazebo reference= \"link2\" > <mu1> 0.2 </mu1> <mu2> 0.2 </mu2> <material> Gazebo/Black </material> </gazebo> <!-- Link3 --> <gazebo reference= \"link3\" > <mu1> 0.2 </mu1> <mu2> 0.2 </mu2> <material> Gazebo/Orange </material> </gazebo> <!-- camera_link --> <gazebo reference= \"camera_link\" > <mu1> 0.2 </mu1> <mu2> 0.2 </mu2> <material> Gazebo/Red </material> </gazebo> <!-- hokuyo --> <gazebo reference= \"hokuyo_link\" > <sensor type= \"gpu_ray\" name= \"head_hokuyo_sensor\" > <pose> 0 0 0 0 0 0 </pose> <visualize> false </visualize> <update_rate> 40 </update_rate> <ray> <scan> <horizontal> <samples> 720 </samples> <resolution> 1 </resolution> <min_angle> -1.570796 </min_angle> <max_angle> 1.570796 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <!-- Noise parameters based on published spec for Hokuyo laser achieving \"+-30mm\" accuracy at range < 10m. A mean of 0.0m and stddev of 0.01m will put 99.7% of samples within 0.03m of the true reading. --> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_ros_head_hokuyo_controller\" filename= \"libgazebo_ros_gpu_laser.so\" > <topicName> /rrbot/laser/scan </topicName> <frameName> hokuyo_link </frameName> </plugin> </sensor> </gazebo> <!-- camera --> <gazebo reference= \"camera_link\" > <sensor type= \"camera\" name= \"camera1\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 800 </width> <height> 800 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <!-- Noise is sampled independently per pixel on each frame. That pixel's noise value is added to each of its color channels, which at that point lie in the range [0,1]. --> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"camera_controller\" filename= \"libgazebo_ros_camera.so\" > <alwaysOn> true </alwaysOn> <updateRate> 0.0 </updateRate> <cameraName> rrbot/camera1 </cameraName> <imageTopicName> image_raw </imageTopicName> <cameraInfoTopicName> camera_info </cameraInfoTopicName> <frameName> camera_link_optical </frameName> <!-- setting hackBaseline to anything but 0.0 will cause a misalignment between the gazebo sensor image and the frame it is supposed to be attached to --> <hackBaseline> 0.0 </hackBaseline> <distortionK1> 0.0 </distortionK1> <distortionK2> 0.0 </distortionK2> <distortionK3> 0.0 </distortionK3> <distortionT1> 0.0 </distortionT1> <distortionT2> 0.0 </distortionT2> <CxPrime> 0 </CxPrime> <Cx> 0.0 </Cx> <Cy> 0.0 </Cy> <focalLength> 0.0 </focalLength> </plugin> </sensor> </gazebo> </robot> link1\u7684\u6750\u8d28\u5b9a\u4e49 <gazebo reference= \"link1\" > <material> Gazebo/Orange </material> </gazebo> \u540e\u9762\u7684reference,\u8868\u793a\u4e13\u95e8\u4e3alink1\u5b9a\u4e49\u7684, \u5982\u679c\u540e\u9762\u6ca1\u6709 reference=\"\" \u5c5e\u6027\uff0c\u5219\u8868\u660e\u8be5\u5143\u7d20\u7528\u4e8e\u6574\u4e2a\u673a\u5668\u4eba\u6a21\u578b\u3002 The elements for a <robot> inside the <gazebo> tag are listed in the following table: Name Type Description static bool If set to true, the model is immovable. Otherwise the model is simulated in the dynamics engine. \u5728 <gazebo> \u4e2d\u7684\u5176\u4ed6\u6807\u7b7e\u5219\u4f1a\u76f4\u63a5\u63d2\u5165\u5230SDF\u7684 <model> \u6807\u7b7e\u7528\u4e8e\u4ea7\u751fSDF\uff0c\u5bf9\u4e8e\u63d2\u4ef6\u5f88\u6709\u7528\uff0c\u89c1 ROS Motor and Sensor Plugins \u6559\u7a0b ( \u6ca1\u660e\u767d ) gazebo\u6587\u4ef6\u4e2d\u548clink\u76f8\u5173\u7684\u7684\u5143\u7d20 Name Type Description material value Material of visual element gravity bool Use gravity dampingFactor double Exponential velocity decay of the link velocity - takes the value and multiplies the previous link velocity by (1-dampingFactor). maxVel double maximum contact correction velocity truncation term. minDepth double minimum allowable depth before contact correction impulse is applied mu1 double Friction coefficients \u03bc for the principal contact directions along the contact surface as defined by the Open Dynamics Engine (ODE) (see parameter descriptions in ODE's user guide ) mu2 fdir1 string 3-tuple specifying direction of mu1 in the collision local reference frame. kp double Contact stiffness k_p and damping k_d for rigid body contacts as defined by ODE ( ODE uses erp and cfm but there is a mapping between erp/cfm and stiffness/damping ) kd selfCollide bool If true, the link can collide with other links in the model. maxContacts int Maximum number of contacts allowed between two entities. This value overrides the max_contacts element defined in physics. laserRetro double intensity value returned by laser sensor. \u4e0a\u8868\u4e2d\u6ca1\u6709\u63d0\u53ca\u7684\u6807\u7b7e\u5219\u4f1a\u76f4\u63a5\u63d2\u5165SDF\u7684 <link> \u7684\u5bf9\u5e94\u9879\u91cc\uff0c\u8fd9\u5bf9\u4e8e\u63d2\u4ef6\u7279\u522b\u6709\u7528\uff0c\u53c2\u89c1 ROS Motor and Sensor Plugins .gazebo \u6587\u4ef6\u4e2d\u548cjoint\u76f8\u5173\u7684\u7684\u5143\u7d20 Name Type Description stopCfm double Joint stop constraint force mixing (cfm) and error reduction parameter (erp) used by ODE stopErp provideFeedback bool Allows joints to publish their wrench data (force-torque) via a Gazebo plugin implicitSpringDamper bool If this flag is set to true, ODE will use ERP and CFM to simulate damping. This is a more stable numerical method for damping than the default damping tag. The cfmDamping element is deprecated and should be changed to implicitSpringDamper. springStiffness double Spring stiffness in N/m. springReference double Equilibrium position for the spring. cfmDamping fudgeFactor double Scale the excess for in a joint motor at joint limits. Should be between zero and one. \u548c\u7528\u4e8e <robot> and <link> \u7684< <gazebo> \u5143\u7d20\u4e00\u6837\uff0c\u6ca1\u6709\u5728\u4e0a\u8868\u5217\u51fa\u7684\u9879\u5c06\u76f4\u63a5\u63d2\u5165\u5230SDF\u6a21\u578b\u91cc\u7684 <joint> \uff0c\u53c2\u8003 ROS Motor and Sensor Plugins - d","title":"rrbot.gazebo\u89e3\u8bfb"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#_2","text":"launch \u6587\u4ef6\u4e2d\u7684 transmission \u6ca1\u6709\u5f04\u660e\u767d .gazebo \u6587\u4ef6\u4e2d\u7528\u4e8e hokuyo\\_link \u7684\u4e00\u4e9b\u6807\u7b7e\u548c\u63d2\u4ef6\u6ca1\u6709\u5f04\u660e\u767d, camera_link \u4e5f\u662f\u5982\u6b64, \u8fd9\u4e9b\u6807\u7b7e\u7684\u89e3\u8bfb\u89c1[[2-Tutorial Using Gazebo plugins with ROS#^dd2599]] \u4e0b\u4e00\u4e2a\u6559\u7a0b\uff1a ROS Motor and Sensor Plugins .","title":"\u9057\u7559\u95ee\u9898"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#_3","text":"","title":"\u5176\u4ed6 (\u6682\u65f6\u4e0d\u7ba1)"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#sdf","text":"\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u67e5\u770bURDF\u662f\u5426\u8f6c\u6362\u6210SDF\u683c\u5f0f\u3002 # gazebo2 and below gzsdf print MODEL.urdf # gazebo3 and above gz sdf -p MODEL.urdf Note: in Gazebo version 1.9 and greater, some of the debug info has been moved to a log file you can view with: cat ~/.gazebo/gzsdf.log","title":"\u9a8c\u8bc1\u6a21\u578b\u662f\u5426\u8f6c\u6362\u6210SDF"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#gazebourdf","text":"Viewing the RRBot in Gazebo was already covered at the beginning of this tutorial. For your own custom robot, we assume its URDF lives in a ROS package named MYROBOT_description in the subfolder /urdf . The method to open a URDF from that location into Gazebo using ROS was covered in the previous tutorial, Using roslaunch Files to Spawn Models . If you have not completed that tutorial, do so now. From that tutorial you should have two ROS packages for your custom robot: MYROBOT_description and MYROBOT_gazebo . To view your robot and test it in Gazebo, you should be able to now run something like: roslaunch MYROBOT_gazebo MYROBOT.launch This should launch both the Gazebo server and GUI client with your robot automatically launched spawned inside.","title":"\u5728 Gazebo\u91cc\u67e5\u770bURDF\u6a21\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#_4","text":"\u53c2\u8003\uff1a SDF user guide If your robot model behaves unexpectedly within Gazebo, it is likely because your URDF needs further tuning to accurately represent its physics in Gazebo. See the SDF user guide for more info on various properties available in Gazebo, which are also available in the URDF via the <gazebo> tag.","title":"\u8c03\u6574"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#_5","text":"If you have a common robot that other's might want to use in Gazebo, you are encouraged to add your URDF to the Gazebo Model Database . It is an online server that Gazebo connects to to pull down models from the internet. Its Mercurial repository is located on GitHub . See Gazebo Model Database documentation for how to submit a pull request to have your robot added to the database.","title":"\u5171\u4eab\u6a21\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/1-Tutorial%20Using%20a%20URDF%20in%20Gazebo/#next-steps","text":"\u4e0b\u4e00\u4e2a\u6559\u7a0b\uff1a ROS Motor and Sensor Plugins . \u539f\u7f51\u5740: \u8bbf\u95ee \u521b\u5efa\u65f6\u95f4: 2021-03-31 08:51:36 \u76ee\u5f55: default \u6807\u7b7e: \u65e0","title":"Next steps"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/","text":"\u65e0 created_at: 2021-04-03 10:06:31 original_url: http://gazebosim.org/tutorials?tut=ros_gzplugins Tutorial: Using Gazebo plugins with ROS \u00b6 Gazebo\u53ef\u4ee5\u8f93\u51fa\u654f\u611f\u5668\u7684\u8f93\u51fa\u4fe1\u606f, \u63a5\u6536motor\u7684\u8f93\u5165\u4fe1\u606f. \u672c\u6559\u7a0b\u7684\u63a5\u4e0a\u4e00\u8bfe\u7a0b[[1-Tutorial Using a URDF in Gazebo]] ( previous tutorial on URDFs ) \u63d2\u4ef6\u7c7b\u578b \u00b6 Gazebo \u652f\u6301\u591a\u79cd\u63d2\u4ef6 several plugin types , \u4e0d\u8fc7\u53ea\u6709\u5982\u4e0b3\u79cd\u7528\u4e8eURDF: ModelPlugins , to provide access to the physics::Model API SensorPlugins , to provide access to the sensors::Sensor API VisualPlugins , to provide access to the rendering::Visual API \u6700\u597d\u5148\u786e\u8ba4\u4e0b\u662f\u5426\u5b89\u88c5\u4e86\u63d2\u4ef6 sudo apt-get install ros-melodic-gazebo-plugins \u6dfb\u52a0\u6a21\u578b\u63d2\u4ef6 ModelPlugin \u00b6 \u76f4\u63a5\u5728 <robot> \u5143\u7d20\u4e0b\u7ed9\u51fa\u5373\u53ef, \u793a\u4f8b\u5982\u4e0b: <robot> ... robot description ... <gazebo> <plugin name=\"differential_drive_controller\" filename=\"libdiffdrive_plugin.so\"> ... plugin parameters ... </plugin> </gazebo> ... robot description ... </robot> Upon loading the robot model within Gazebo, the diffdrive_plugin code will be given a reference to the model itself, allowing it to manipulate it. Also, it will be give a reference to the SDF element of itself, in order to read the plugin parameters passed to it. Adding a SensorPlugin \u00b6 Sensors \u662f\u9644\u52a0\u5728link\u4e0a,\u56e0\u6b64\u654f\u611f\u5668\u63d2\u4ef6\u7684reference\u4e3alink, \u5728link reference\u4e0b\u5b9a\u4e49. <robot> ... robot description ... <link name=\"sensor_link\"> ... link description ... </link> <gazebo reference=\"sensor_link\"> <sensor type=\"camera\" name=\"camera1\"> ... sensor parameters ... <plugin name=\"camera_controller\" filename=\"libgazebo_ros_camera.so\"> ... plugin parameters .. </plugin> </sensor> </gazebo> </robot> Upon loading the robot model within Gazebo, the camera_controller code will be given a reference to the sensor, providing access to its API. Also, it will be give a reference to the SDF element of itself, in order to read the plugin parameters passed to it. RRBot \u4e2d\u7684\u76f8\u673a\u63d2\u4ef6 \u00b6 ^dd2599 \u4e3b\u8981\u6b65\u9aa4: \u5728 rrbot.xacro \u4e2d\u7ed9\u51fa\u76f8\u673alink\u548c\u76f8\u5173\u7684joint\u5b9a\u4e49 \u5728 .gazebo \u6587\u4ef6\u9488\u5bf9\u76f8\u673alink,\u7ed9\u51fa\u654f\u611f\u5668\u53c2\u6570\u548c\u654f\u611f\u5668\u63d2\u4ef6\u7684\u53c2\u6570\u548c\u5173\u8054 \u5728Gazebo\u4e2d\u8fdb\u884c\u4eff\u771f rrbot.xacro \u4e2d\u7684\u76f8\u673alink/joint\u5b9a\u4e49 \u00b6 \u9996\u5148\u9700\u8981\u5728 rrbot.xacro \u6a21\u578b\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u76f8\u673a\u7684link\u4ee5\u53cajoint\u5c06\u76f8\u673alink\u548c\u5176\u4ed6link\u8fde\u63a5\u8d77\u6765. <joint name= \"camera_joint\" type= \"fixed\" > <axis xyz= \"0 1 0\" /> <origin xyz= \"${camera_link} 0 ${height3 - axel_offset*2}\" rpy= \"0 0 0\" /> <parent link= \"link3\" /> <child link= \"camera_link\" /> </joint> <!-- Camera --> <link name= \"camera_link\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"${camera_link} ${camera_link} ${camera_link}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"${camera_link} ${camera_link} ${camera_link}\" /> </geometry> <material name= \"red\" /> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link> rrbot.gazebo \u4e2d\u7684\u76f8\u673a\u53ca\u63d2\u4ef6\u8bbe\u7f6e \u00b6 \u7136\u540e\u5728 rrbot.gazebo \u6587\u4ef6\u4e2d\u5bf9\u76f8\u673a\u8fdb\u884c\u5b9a\u4e49,\u5e76\u53d1\u5e03\u56fe\u5f62\u4fe1\u606f. <!-- camera --> <gazebo reference= \"camera_link\" > <sensor type= \"camera\" name= \"camera1\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 800 </width> <height> 800 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <!-- Noise is sampled independently per pixel on each frame. That pixel's noise value is added to each of its color channels, which at that point lie in the range [0,1]. --> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"camera_controller\" filename= \"libgazebo_ros_camera.so\" > <alwaysOn> true </alwaysOn> <updateRate> 0.0 </updateRate> <cameraName> rrbot/camera1 </cameraName> <imageTopicName> image_raw </imageTopicName> <cameraInfoTopicName> camera_info </cameraInfoTopicName> <frameName> camera_link </frameName> <hackBaseline> 0.07 </hackBaseline> <distortionK1> 0.0 </distortionK1> <distortionK2> 0.0 </distortionK2> <distortionK3> 0.0 </distortionK3> <distortionT1> 0.0 </distortionT1> <distortionT2> 0.0 </distortionT2> </plugin> </sensor> </gazebo> - reference=\"camera_link\" \u8868\u793a\u4e0b\u9762\u7684\u5143\u7d20\u662f\u9488\u5bf9 camer_link \u5b9a\u4e49\u7684. - \u58f0\u660e\u654f\u611f\u5668\u7684\u7c7b\u578b\u548c\u540d\u79f0 <sensor type=\"camera\" name=\"camera1\"> - Gazebo\u4e2d\u7684\u56fe\u5f62\u751f\u6210\u5468\u671f <update_rate>30.0</update_rate> , \u5b9e\u9645\u4e2d\u5982\u679c\u8fd0\u884c\u8fc7\u5feb, \u5219\u9891\u7387\u53ef\u80fd\u4f1a\u5c0f\u4e8e\u8fd9\u4e9b. - \u6839\u636e\u76f8\u673a\u6307\u6807\u5bf9\u5982\u4e0b\u7684\u6307\u6807\u8fdb\u884c\u8bbe\u7f6e: <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 800 </width> <height> 800 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> \u5176\u4e2dnear\u548cfar\u6307\u7684\u662f\u76f8\u673a\u80fd\u770b\u5230\u7684\u6700\u8fd1\u76ee\u6807\u548c\u6700\u8fdc\u76ee\u6807, \u5728optometry\u5750\u6807\u7cfb\u4e0b\u7ed9\u51fa. \u5c06\u76f8\u673a\u548c\u63d2\u4ef6\u8fdb\u884c\u5173\u8054 <plugin name=\"camera_controller\" filename=\"libgazebo_ros_camera.so\"> , \u63d2\u4ef6\u7684\u6e90\u6587\u4ef6\u4e3a gazebo_ros/gazebo_ros_camera.cpp ( \u627e\u4e0d\u5230\u8fd9\u4e2a\u6587\u4ef6? ) <plugin /> \u91cc\u7ed9\u51fa\u4e86\u63d2\u4ef6\u7684\u76f8\u5173\u53c2\u6570,\u6bd4\u5982 <cameraName> rrbot/camera1 </cameraName> <imageTopicName> image_raw </imageTopicName> <cameraInfoTopicName> camera_info </cameraInfoTopicName> \u53ef\u4ee5\u8ba2\u9605\u5982\u4e0b\u7531\u76f8\u673a\u53d1\u5e03\u7684\u6d88\u606f: /rrbot/camera1/image_raw /rrbot/camera1/camera_info \u200b \u8fd0\u884c\u793a\u4f8b \u00b6 \u5982\u4e0b: roslaunch rrbot_gazebo rrbot_world.launch roslaunch rrbot_description rrbot_rviz.launch In Rviz, add a ''Camera'' display and under ''Image Topic'' set it to /rrbot/camera1/image_raw . You should see a camera view of your Gazebo environment. In the following two pictures, a soda can was added to the environment for better visuals. The coke can added: ![[Pasted image 20210403110718.png]] \u5728\u5355\u6446\u6446\u4e0b\u6765\u540e\u7684\u76f8\u673a\u89c6\u56fe\u5982\u4e0b: ![[Pasted image 20210403110835.png]] RRBot \u4e2d\u7684\u6fc0\u5149\u96f7\u8fbe\u63d2\u4ef6 \u00b6 \u4e3b\u8981\u6b65\u9aa4: \u5148\u5728Xacro URDF\u4e2d\u6dfb\u52a0link\u548cjoint \u5728 rrbot.gazebo \u4e2d\u6dfb\u52a0\u96f7\u8fbe\u548c\u63d2\u4ef6 \u8fd0\u884claunch\u6587\u4ef6 \u5728Xacro URDF\u4e2d\u6dfb\u52a0link\u548cjoint \u00b6 <joint name= \"hokuyo_joint\" type= \"fixed\" > <axis xyz= \"0 1 0\" /> <origin xyz= \"0 0 ${height3 - axel_offset/2}\" rpy= \"0 0 0\" /> <parent link= \"link3\" /> <child link= \"hokuyo_link\" /> </joint> <!-- Hokuyo Laser --> <link name= \"hokuyo_link\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.1 0.1 0.1\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <mesh filename= \"package://rrbot_description/meshes/hokuyo.dae\" /> </geometry> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link> \u5728 rrbot.gazebo \u4e2d\u6dfb\u52a0\u96f7\u8fbe\u548c\u63d2\u4ef6 \u00b6 Now we'll add the plugin information to rrbot.gazebo , again as we did for the camera example: <!-- hokuyo --> <gazebo reference=\"hokuyo_link\"> <sensor type=\"gpu_ray\" name=\"head_hokuyo_sensor\"> <pose>0 0 0 0 0 0</pose> <visualize>false</visualize> <update_rate>40</update_rate> <ray> <scan> <horizontal> <samples>720</samples> <resolution>1</resolution> <min_angle>-1.570796</min_angle> <max_angle>1.570796</max_angle> </horizontal> </scan> <range> <min>0.10</min> <max>30.0</max> <resolution>0.01</resolution> </range> <noise> <type>gaussian</type> <!-- Noise parameters based on published spec for Hokuyo laser achieving \"+-30mm\" accuracy at range < 10m. A mean of 0.0m and stddev of 0.01m will put 99.7% of samples within 0.03m of the true reading. --> <mean>0.0</mean> <stddev>0.01</stddev> </noise> </ray> <plugin name=\"gazebo_ros_head_hokuyo_controller\" filename=\"libgazebo_ros_gpu_laser.so\"> <topicName>/rrbot/laser/scan</topicName> <frameName>hokuyo_link</frameName> </plugin> </sensor> </gazebo> \u51e0\u70b9\u8bf4\u660e <visualize>false</visualize> \u5982\u679c\u8bbe\u7f6e\u4e3atrue,\u5219\u53ef\u4ee5\u770b\u5230\u626b\u63cf\u533a\u57df. \u66f4\u591a\u5173\u4e8e <sensor> \u548c <ray> \u7684\u8bf4\u660e\u89c1 SDF Documentation . \u53d1\u5e03\u7684\u8bdd\u9898\u540d\u79f0` /rrbot/laser/scan \u8fd0\u884c\u793a\u4f8b \u00b6 After you have saved both rrbot.xacro and rrbot.gazebo , you should be able to launch both Rviz and Gazebo in separate terminals: roslaunch rrbot_gazebo rrbot.launch roslaunch rrbot_description rrbot_rviz.launch In Rviz, add a ''LaserScan'' display and under ''Topic'' set it to /rrbot/laser/scan . You should see a faint laser scan line in your Gazebo environment. While the pendulum is swinging, you should also see the laser scan swing. If the scan is too faint, you can up the size of the laser scan in the properties of the LaserScan display in Rviz. A size of 1m is very easy to see. In the following two pictures, a house and construction barrel was added to the environment for better visuals. View from Gazebo: The corresponding laser view from Rviz: \u4e0b\u4e00\u6b65 \u00b6 Next we will analyze the ros_control packages integrated with Gazebo for tight controller/actuator/simulator integration Actuators, controllers, and ros_control . \u540e\u9762\u662f\u8fd8\u6ca1\u770b\u7684 \u00b6 gazebo_plugins \u4e2d\u7684\u53ef\u7528\u63d2\u4ef6 \u00b6 The following sections document all of the plugins available in the gazebo_plugins . We suggest you review them in order because more detail is covered in the first couple of plugins and you can learn some of the concepts from the various plugins' documentation. The names of each section is derived from the plugin class name. For example, \"Block Laser\" is from the GazeboRosBlockLaser class and can be found in the file gazebo_plugins/src/gazebo_ros_block_laser.cpp . If there are some sections blank, it means that this author got tired of documenting every plugin and you should fill in the area with your experience should you have knowledge and examples of how to use the particular plugin. \u76f8\u673a\u63d2\u4ef6 \u00b6 Description: provides ROS interface for simulating cameras such as wge100_camera by publishing the CameraInfo and Image ROS messages as described in sensor_msgs . Multicamera \u00b6 Description: synchronizes multiple camera's shutters such that they publish their images together. Typically used for stereo cameras, uses a very similar interface as the plain Camera plugin Note: currently only supports stereo cameras. See Github issue . Atlas Code Example \u00b6 In this code example there is both a left and right camera: <gazebo reference=\"left_camera_frame\"> <sensor type=\"multicamera\" name=\"stereo_camera\"> <update_rate>30.0</update_rate> <camera name=\"left\"> <horizontal_fov>1.3962634</horizontal_fov> <image> <width>800</width> <height>800</height> <format>R8G8B8</format> </image> <clip> <near>0.02</near> <far>300</far> </clip> <noise> <type>gaussian</type> <mean>0.0</mean> <stddev>0.007</stddev> </noise> </camera> <camera name=\"right\"> <pose>0 -0.07 0 0 0 0</pose> <horizontal_fov>1.3962634</horizontal_fov> <image> <width>800</width> <height>800</height> <format>R8G8B8</format> </image> <clip> <near>0.02</near> <far>300</far> </clip> <noise> <type>gaussian</type> <mean>0.0</mean> <stddev>0.007</stddev> </noise> </camera> <plugin name=\"stereo_camera_controller\" filename=\"libgazebo_ros_multicamera.so\"> <alwaysOn>true</alwaysOn> <updateRate>0.0</updateRate> <cameraName>multisense_sl/camera</cameraName> <imageTopicName>image_raw</imageTopicName> <cameraInfoTopicName>camera_info</cameraInfoTopicName> <frameName>left_camera_optical_frame</frameName> <!--<rightFrameName>right_camera_optical_frame</rightFrameName>--> <hackBaseline>0.07</hackBaseline> <distortionK1>0.0</distortionK1> <distortionK2>0.0</distortionK2> <distortionK3>0.0</distortionK3> <distortionT1>0.0</distortionT1> <distortionT2>0.0</distortionT2> </plugin> </sensor> </gazebo> Depth Camera \u00b6 Description: simulates a sensor like a Kinect, which is duplicated in the Kinect plugin. Will probably be merged in the future. Openni Kinect \u00b6 Description: simulates a Microsoft Kinect, publishes the same topics as the corresponding ROS drivers for the Microsoft kinect as documented in the Fuerte documentation here . <gazebo reference=\"${link_name}\"> <sensor name=\"${link_name}_camera\" type=\"depth\"> <update_rate>20</update_rate> <camera> <horizontal_fov>1.047198</horizontal_fov> <image> <width>640</width> <height>480</height> <format>R8G8B8</format> </image> <clip> <near>0.05</near> <far>3</far> </clip> </camera> <plugin name=\"${link_name}_controller\" filename=\"libgazebo_ros_openni_kinect.so\"> <baseline>0.2</baseline> <alwaysOn>true</alwaysOn> <updateRate>1.0</updateRate> <cameraName>${camera_name}_ir</cameraName> <imageTopicName>/${camera_name}/color/image_raw</imageTopicName> <cameraInfoTopicName>/${camera_name}/color/camera_info</cameraInfoTopicName> <depthImageTopicName>/${camera_name}/depth/image_raw</depthImageTopicName> <depthImageInfoTopicName>/${camera_name}/depth/camera_info</depthImageInfoTopicName> <pointCloudTopicName>/${camera_name}/depth/points</pointCloudTopicName> <frameName>${frame_name}</frameName> <pointCloudCutoff>0.5</pointCloudCutoff> <pointCloudCutoffMax>3.0</pointCloudCutoffMax> <distortionK1>0.00000001</distortionK1> <distortionK2>0.00000001</distortionK2> <distortionK3>0.00000001</distortionK3> <distortionT1>0.00000001</distortionT1> <distortionT2>0.00000001</distortionT2> <CxPrime>0</CxPrime> <Cx>0</Cx> <Cy>0</Cy> <focalLength>0</focalLength> <hackBaseline>0</hackBaseline> </plugin> </sensor> </gazebo> You can find a more detailed description for configuring a depth camera in Use a Gazebo Depth Camera with ROS . GPU Laser \u00b6 Description: simulates laser range sensor by broadcasting LaserScan message as described in sensor_msgs. See Hokuyo Laser Scanners Reference . \u00b6 Laser \u00b6 Description: the non-GPU version of GPU Laser , but essentially uses the same code. See GPU Laser for documentation. To run with RRBot, open rrbot.gazebo and change the following two lines. replace <sensor type=\"gpu_ray\" name=\"head_hokuyo_sensor\"> with <sensor type=\"ray\" name=\"head_hokuyo_sensor\"> and replace <plugin name=\"gazebo_ros_head_hokuyo_controller\" filename=\"libgazebo_ros_gpu_laser.so\"> with <plugin name=\"gazebo_ros_head_hokuyo_controller\" filename=\"libgazebo_ros_laser.so\"> save, then launch the same launch files as for GPU Laser. Block Laser \u00b6 Description: provides grid style laser range scanner simulation (e.g. Velodyne). F3D (Force Feedback Ground Truth) \u00b6 Description: broadcasts external forces on a body in simulation over WrenchStamped message as described in geometry_msgs. Force \u00b6 Description: ROS interface for applying Wrench (geometry_msgs) on a body in simulation. IMU (GazeboRosImu) \u00b6 Description: simulates IMU sensor. Measurements are computed by the ROS plugin, not by Gazebo. See usage snippet sample below for implementation. <robot> : <gazebo> <plugin name=\"imu_plugin\" filename=\"libgazebo_ros_imu.so\"> <alwaysOn>true</alwaysOn> <bodyName>base_footprint</bodyName> <topicName>imu</topicName> <serviceName>imu_service</serviceName> <gaussianNoise>0.0</gaussianNoise> <updateRate>20.0</updateRate> </plugin> </gazebo> </robot> IMU sensor (GazeboRosImuSensor) \u00b6 Description: simulates an Inertial Motion Unit sensor, the main differences from IMU (GazeboRosIMU) are: - inheritance from SensorPlugin instead of ModelPlugin, - measurements are given by gazebo ImuSensor instead of being computed by the ros plugin, - gravity is included in inertial measurements. - set initialOrientationAsReference to false to comply with REP 145 . <gazebo reference=\"imu_link\"> <gravity>true</gravity> <sensor name=\"imu_sensor\" type=\"imu\"> <always_on>true</always_on> <update_rate>100</update_rate> <visualize>true</visualize> <topic>__default_topic__</topic> <plugin filename=\"libgazebo_ros_imu_sensor.so\" name=\"imu_plugin\"> <topicName>imu</topicName> <bodyName>imu_link</bodyName> <updateRateHZ>10.0</updateRateHZ> <gaussianNoise>0.0</gaussianNoise> <xyzOffset>0 0 0</xyzOffset> <rpyOffset>0 0 0</rpyOffset> <frameName>imu_link</frameName> <initialOrientationAsReference>false</initialOrientationAsReference> </plugin> <pose>0 0 0 0 0 0</pose> </sensor> </gazebo> Joint Pose Trajectory \u00b6 Description: listens to a joint_trajectory_action and plays back the set of joint positions. Sets the set of joints to exact positions without regards to simulated physics and forces. P3D (3D Position Interface for Ground Truth) \u00b6 Description: broadcasts the inertial pose of any body in simulation via Odometry message as described in nav_msgs via ROS topic. Projector \u00b6 Description: projects a static texture from a source outwards, such as used with the PR2's original head camera sensor. See API documentation for more information. Prosilica Camera \u00b6 Description: simulates interfaces exposed by a ROS Prosilica Camera . Here's an example URDF Xacro macro . Bumper \u00b6 Description: provides contact feedback via ContactsState message . <gazebo> <plugin name=\"${name}_gazebo_ros_bumper_controller\" filename=\"libgazebo_ros_bumper.so\"> <alwaysOn>true</alwaysOn> <updateRate>${update_rate}</updateRate> <bumperTopicName>${name}_bumper</bumperTopicName> <frameName>world</frameName> </plugin> </gazebo> Differential Drive \u00b6 Description: model plugin that provides a basic controller for differential drive robots in Gazebo. You need a well defined differential drive robot to use this plugin. <gazebo> <plugin name=\"differential_drive_controller\" filename=\"libgazebo_ros_diff_drive.so\"> <!-- Plugin update rate in Hz --> <updateRate>${update_rate}</updateRate> <!-- Name of left joint, defaults to `left_joint` --> <leftJoint>base_link_left_wheel_joint</leftJoint> <!-- Name of right joint, defaults to `right_joint` --> <rightJoint>base_link_right_wheel_joint</rightJoint> <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m --> <wheelSeparation>0.5380</wheelSeparation> <!-- Diameter of the wheels, in meters, defaults to 0.15 m --> <wheelDiameter>0.2410</wheelDiameter> <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 --> <wheelAcceleration>1.0</wheelAcceleration> <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm --> <wheelTorque>20</wheelTorque> <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` --> <commandTopic>cmd_vel</commandTopic> <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` --> <odometryTopic>odom</odometryTopic> <!-- Odometry frame, defaults to `odom` --> <odometryFrame>odom</odometryFrame> <!-- Robot frame to calculate odometry from, defaults to `base_footprint` --> <robotBaseFrame>base_footprint</robotBaseFrame> <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD --> <odometrySource>1</odometrySource> <!-- Set to true to publish transforms for the wheel links, defaults to false --> <publishWheelTF>true</publishWheelTF> <!-- Set to true to publish transforms for the odometry, defaults to true --> <publishOdom>true</publishOdom> <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false --> <publishWheelJointState>true</publishWheelJointState> <!-- Set to true to swap right and left wheels, defaults to true --> <legacyMode>false</legacyMode> </plugin> </gazebo> Skid Steering Drive \u00b6 Description: model plugin that provides a basic controller for skid steering drive robots in Gazebo (Pioneer 3AT for instance). <gazebo> <plugin name=\"skid_steer_drive_controller\" filename=\"libgazebo_ros_skid_steer_drive.so\"> <updateRate>100.0</updateRate> <robotNamespace>/</robotNamespace> <leftFrontJoint>front_left_wheel_joint</leftFrontJoint> <rightFrontJoint>front_right_wheel_joint</rightFrontJoint> <leftRearJoint>back_left_wheel_joint</leftRearJoint> <rightRearJoint>back_right_wheel_joint</rightRearJoint> <wheelSeparation>0.4</wheelSeparation> <wheelDiameter>0.215</wheelDiameter> <robotBaseFrame>base_link</robotBaseFrame> <torque>20</torque> <topicName>cmd_vel</topicName> <broadcastTF>false</broadcastTF> </plugin> </gazebo> Video Plugin \u00b6 Description: visual plugin that displays a ROS image stream on an OGRE Texture inside gazebo. This plugin does not modify the texture of one of the existing link surfaces, but creates a new texture on top of it. The texture will be created on the XY plane, visible from the +Z side. The plugin requires a pixel size while constructing the texture, and will resize incoming ROS image messages to match if they are a different size. <gazebo reference=\"display_screen_link\"> <visual> <plugin name=\"display_video_controller\" filename=\"libgazebo_ros_video.so\"> <topicName>image</topicName> <height>120</height> <width>160</width> </plugin> </visual> </gazebo> Planar Move Plugin \u00b6 Description: model plugin that allows arbitrary objects (for instance cubes, spheres and cylinders) to be moved along a horizontal plane using a geometry_msgs/Twist message. The plugin works by imparting a linear velocity (XY) and an angular velocity (Z) to the object every cycle. Here is a full URDF example that demonstrates how to control a floating box inside gazebo using this plugin, using different visual and collision elements. Note: The object needs to have sufficient inertia to prevent undesirable motions - which can occur as a reaction to the supplied velocity. You can try increasing inertia until the object moves as desired. It is also good to have the center of mass close to the ground. <robot name=\"test_model\"> <!-- root link, on the ground just below the model origin --> <link name=\"base_footprint\"> <visual> <origin xyz=\"0 0 0\" rpy=\"0 0 0\" /> <geometry> <box size=\"0.001 0.001 0.001\" /> </geometry> </visual> </link> <joint name=\"base_link_joint\" type=\"fixed\"> <origin xyz=\"0.0 0 1.25\" rpy=\"0 0 0\" /> <parent link=\"base_footprint\"/> <child link=\"base_link\" /> </joint> <!-- the model --> <link name=\"base_link\"> <inertial> <mass value=\"50\" /> <origin xyz=\"0 0 -1.25\" /> <inertia ixx=\"50.0\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"50.0\" iyz=\"0.0\" izz=\"50.0\" /> </inertial> <visual> <geometry> <box size=\"0.5 0.5 1.0\" /> <!-- does not need to match collision --> </geometry> </visual> <collision> <origin xyz=\"0 0 -1.0\" /> <geometry> <cylinder length=\"0.5\" radius=\"0.25\" /> </geometry> </collision> </link> <gazebo> <plugin name=\"object_controller\" filename=\"libgazebo_ros_planar_move.so\"> <commandTopic>cmd_vel</commandTopic> <odometryTopic>odom</odometryTopic> <odometryFrame>odom</odometryFrame> <odometryRate>20.0</odometryRate> <robotBaseFrame>base_footprint</robotBaseFrame> </plugin> </gazebo> </robot> Template \u00b6 Description: an example c++ plugin template for anyone who wants to write their own plugin. Issue report, contribution \u00b6 Gazebo-ROS plugins are stored in a ROS package. See gazebo_plugins wiki page about how you can contribute. 3 rd party plugins \u00b6 In addition to the plugins explained above, there are also a number of 3 rd party Gazebo-ROS plugins. Some of them are found on ros.org ( example of search keyword ). If a 3 rd party plugin is useful and generic enough, please consider pulling it into the official gazebo_plugins package (wiki page) by opening a suggestion at the issue tracker of each repository. Next Steps \u00b6 \u539f\u7f51\u5740: \u8bbf\u95ee \u521b\u5efa\u65f6\u95f4: 2021-04-03 10:06:31 \u76ee\u5f55: default \u6807\u7b7e: \u65e0","title":"2 Tutorial Using Gazebo plugins with ROS"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#tutorial-using-gazebo-plugins-with-ros","text":"Gazebo\u53ef\u4ee5\u8f93\u51fa\u654f\u611f\u5668\u7684\u8f93\u51fa\u4fe1\u606f, \u63a5\u6536motor\u7684\u8f93\u5165\u4fe1\u606f. \u672c\u6559\u7a0b\u7684\u63a5\u4e0a\u4e00\u8bfe\u7a0b[[1-Tutorial Using a URDF in Gazebo]] ( previous tutorial on URDFs )","title":"Tutorial: Using Gazebo plugins with ROS"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#_1","text":"Gazebo \u652f\u6301\u591a\u79cd\u63d2\u4ef6 several plugin types , \u4e0d\u8fc7\u53ea\u6709\u5982\u4e0b3\u79cd\u7528\u4e8eURDF: ModelPlugins , to provide access to the physics::Model API SensorPlugins , to provide access to the sensors::Sensor API VisualPlugins , to provide access to the rendering::Visual API \u6700\u597d\u5148\u786e\u8ba4\u4e0b\u662f\u5426\u5b89\u88c5\u4e86\u63d2\u4ef6 sudo apt-get install ros-melodic-gazebo-plugins","title":"\u63d2\u4ef6\u7c7b\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#modelplugin","text":"\u76f4\u63a5\u5728 <robot> \u5143\u7d20\u4e0b\u7ed9\u51fa\u5373\u53ef, \u793a\u4f8b\u5982\u4e0b: <robot> ... robot description ... <gazebo> <plugin name=\"differential_drive_controller\" filename=\"libdiffdrive_plugin.so\"> ... plugin parameters ... </plugin> </gazebo> ... robot description ... </robot> Upon loading the robot model within Gazebo, the diffdrive_plugin code will be given a reference to the model itself, allowing it to manipulate it. Also, it will be give a reference to the SDF element of itself, in order to read the plugin parameters passed to it.","title":"\u6dfb\u52a0\u6a21\u578b\u63d2\u4ef6 ModelPlugin"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#adding-a-sensorplugin","text":"Sensors \u662f\u9644\u52a0\u5728link\u4e0a,\u56e0\u6b64\u654f\u611f\u5668\u63d2\u4ef6\u7684reference\u4e3alink, \u5728link reference\u4e0b\u5b9a\u4e49. <robot> ... robot description ... <link name=\"sensor_link\"> ... link description ... </link> <gazebo reference=\"sensor_link\"> <sensor type=\"camera\" name=\"camera1\"> ... sensor parameters ... <plugin name=\"camera_controller\" filename=\"libgazebo_ros_camera.so\"> ... plugin parameters .. </plugin> </sensor> </gazebo> </robot> Upon loading the robot model within Gazebo, the camera_controller code will be given a reference to the sensor, providing access to its API. Also, it will be give a reference to the SDF element of itself, in order to read the plugin parameters passed to it.","title":"Adding a SensorPlugin"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#rrbot","text":"^dd2599 \u4e3b\u8981\u6b65\u9aa4: \u5728 rrbot.xacro \u4e2d\u7ed9\u51fa\u76f8\u673alink\u548c\u76f8\u5173\u7684joint\u5b9a\u4e49 \u5728 .gazebo \u6587\u4ef6\u9488\u5bf9\u76f8\u673alink,\u7ed9\u51fa\u654f\u611f\u5668\u53c2\u6570\u548c\u654f\u611f\u5668\u63d2\u4ef6\u7684\u53c2\u6570\u548c\u5173\u8054 \u5728Gazebo\u4e2d\u8fdb\u884c\u4eff\u771f","title":"RRBot \u4e2d\u7684\u76f8\u673a\u63d2\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#rrbotxacrolinkjoint","text":"\u9996\u5148\u9700\u8981\u5728 rrbot.xacro \u6a21\u578b\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u76f8\u673a\u7684link\u4ee5\u53cajoint\u5c06\u76f8\u673alink\u548c\u5176\u4ed6link\u8fde\u63a5\u8d77\u6765. <joint name= \"camera_joint\" type= \"fixed\" > <axis xyz= \"0 1 0\" /> <origin xyz= \"${camera_link} 0 ${height3 - axel_offset*2}\" rpy= \"0 0 0\" /> <parent link= \"link3\" /> <child link= \"camera_link\" /> </joint> <!-- Camera --> <link name= \"camera_link\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"${camera_link} ${camera_link} ${camera_link}\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"${camera_link} ${camera_link} ${camera_link}\" /> </geometry> <material name= \"red\" /> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link>","title":"rrbot.xacro\u4e2d\u7684\u76f8\u673alink/joint\u5b9a\u4e49"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#rrbotgazebo","text":"\u7136\u540e\u5728 rrbot.gazebo \u6587\u4ef6\u4e2d\u5bf9\u76f8\u673a\u8fdb\u884c\u5b9a\u4e49,\u5e76\u53d1\u5e03\u56fe\u5f62\u4fe1\u606f. <!-- camera --> <gazebo reference= \"camera_link\" > <sensor type= \"camera\" name= \"camera1\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 800 </width> <height> 800 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <!-- Noise is sampled independently per pixel on each frame. That pixel's noise value is added to each of its color channels, which at that point lie in the range [0,1]. --> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"camera_controller\" filename= \"libgazebo_ros_camera.so\" > <alwaysOn> true </alwaysOn> <updateRate> 0.0 </updateRate> <cameraName> rrbot/camera1 </cameraName> <imageTopicName> image_raw </imageTopicName> <cameraInfoTopicName> camera_info </cameraInfoTopicName> <frameName> camera_link </frameName> <hackBaseline> 0.07 </hackBaseline> <distortionK1> 0.0 </distortionK1> <distortionK2> 0.0 </distortionK2> <distortionK3> 0.0 </distortionK3> <distortionT1> 0.0 </distortionT1> <distortionT2> 0.0 </distortionT2> </plugin> </sensor> </gazebo> - reference=\"camera_link\" \u8868\u793a\u4e0b\u9762\u7684\u5143\u7d20\u662f\u9488\u5bf9 camer_link \u5b9a\u4e49\u7684. - \u58f0\u660e\u654f\u611f\u5668\u7684\u7c7b\u578b\u548c\u540d\u79f0 <sensor type=\"camera\" name=\"camera1\"> - Gazebo\u4e2d\u7684\u56fe\u5f62\u751f\u6210\u5468\u671f <update_rate>30.0</update_rate> , \u5b9e\u9645\u4e2d\u5982\u679c\u8fd0\u884c\u8fc7\u5feb, \u5219\u9891\u7387\u53ef\u80fd\u4f1a\u5c0f\u4e8e\u8fd9\u4e9b. - \u6839\u636e\u76f8\u673a\u6307\u6807\u5bf9\u5982\u4e0b\u7684\u6307\u6807\u8fdb\u884c\u8bbe\u7f6e: <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 800 </width> <height> 800 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> \u5176\u4e2dnear\u548cfar\u6307\u7684\u662f\u76f8\u673a\u80fd\u770b\u5230\u7684\u6700\u8fd1\u76ee\u6807\u548c\u6700\u8fdc\u76ee\u6807, \u5728optometry\u5750\u6807\u7cfb\u4e0b\u7ed9\u51fa. \u5c06\u76f8\u673a\u548c\u63d2\u4ef6\u8fdb\u884c\u5173\u8054 <plugin name=\"camera_controller\" filename=\"libgazebo_ros_camera.so\"> , \u63d2\u4ef6\u7684\u6e90\u6587\u4ef6\u4e3a gazebo_ros/gazebo_ros_camera.cpp ( \u627e\u4e0d\u5230\u8fd9\u4e2a\u6587\u4ef6? ) <plugin /> \u91cc\u7ed9\u51fa\u4e86\u63d2\u4ef6\u7684\u76f8\u5173\u53c2\u6570,\u6bd4\u5982 <cameraName> rrbot/camera1 </cameraName> <imageTopicName> image_raw </imageTopicName> <cameraInfoTopicName> camera_info </cameraInfoTopicName> \u53ef\u4ee5\u8ba2\u9605\u5982\u4e0b\u7531\u76f8\u673a\u53d1\u5e03\u7684\u6d88\u606f: /rrbot/camera1/image_raw /rrbot/camera1/camera_info \u200b","title":"rrbot.gazebo\u4e2d\u7684\u76f8\u673a\u53ca\u63d2\u4ef6\u8bbe\u7f6e"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#_2","text":"\u5982\u4e0b: roslaunch rrbot_gazebo rrbot_world.launch roslaunch rrbot_description rrbot_rviz.launch In Rviz, add a ''Camera'' display and under ''Image Topic'' set it to /rrbot/camera1/image_raw . You should see a camera view of your Gazebo environment. In the following two pictures, a soda can was added to the environment for better visuals. The coke can added: ![[Pasted image 20210403110718.png]] \u5728\u5355\u6446\u6446\u4e0b\u6765\u540e\u7684\u76f8\u673a\u89c6\u56fe\u5982\u4e0b: ![[Pasted image 20210403110835.png]]","title":"\u8fd0\u884c\u793a\u4f8b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#rrbot_1","text":"\u4e3b\u8981\u6b65\u9aa4: \u5148\u5728Xacro URDF\u4e2d\u6dfb\u52a0link\u548cjoint \u5728 rrbot.gazebo \u4e2d\u6dfb\u52a0\u96f7\u8fbe\u548c\u63d2\u4ef6 \u8fd0\u884claunch\u6587\u4ef6","title":"RRBot \u4e2d\u7684\u6fc0\u5149\u96f7\u8fbe\u63d2\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#xacro-urdflinkjoint","text":"<joint name= \"hokuyo_joint\" type= \"fixed\" > <axis xyz= \"0 1 0\" /> <origin xyz= \"0 0 ${height3 - axel_offset/2}\" rpy= \"0 0 0\" /> <parent link= \"link3\" /> <child link= \"hokuyo_link\" /> </joint> <!-- Hokuyo Laser --> <link name= \"hokuyo_link\" > <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.1 0.1 0.1\" /> </geometry> </collision> <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <mesh filename= \"package://rrbot_description/meshes/hokuyo.dae\" /> </geometry> </visual> <inertial> <mass value= \"1e-5\" /> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <inertia ixx= \"1e-6\" ixy= \"0\" ixz= \"0\" iyy= \"1e-6\" iyz= \"0\" izz= \"1e-6\" /> </inertial> </link>","title":"\u5728Xacro URDF\u4e2d\u6dfb\u52a0link\u548cjoint"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#rrbotgazebo_1","text":"Now we'll add the plugin information to rrbot.gazebo , again as we did for the camera example: <!-- hokuyo --> <gazebo reference=\"hokuyo_link\"> <sensor type=\"gpu_ray\" name=\"head_hokuyo_sensor\"> <pose>0 0 0 0 0 0</pose> <visualize>false</visualize> <update_rate>40</update_rate> <ray> <scan> <horizontal> <samples>720</samples> <resolution>1</resolution> <min_angle>-1.570796</min_angle> <max_angle>1.570796</max_angle> </horizontal> </scan> <range> <min>0.10</min> <max>30.0</max> <resolution>0.01</resolution> </range> <noise> <type>gaussian</type> <!-- Noise parameters based on published spec for Hokuyo laser achieving \"+-30mm\" accuracy at range < 10m. A mean of 0.0m and stddev of 0.01m will put 99.7% of samples within 0.03m of the true reading. --> <mean>0.0</mean> <stddev>0.01</stddev> </noise> </ray> <plugin name=\"gazebo_ros_head_hokuyo_controller\" filename=\"libgazebo_ros_gpu_laser.so\"> <topicName>/rrbot/laser/scan</topicName> <frameName>hokuyo_link</frameName> </plugin> </sensor> </gazebo> \u51e0\u70b9\u8bf4\u660e <visualize>false</visualize> \u5982\u679c\u8bbe\u7f6e\u4e3atrue,\u5219\u53ef\u4ee5\u770b\u5230\u626b\u63cf\u533a\u57df. \u66f4\u591a\u5173\u4e8e <sensor> \u548c <ray> \u7684\u8bf4\u660e\u89c1 SDF Documentation . \u53d1\u5e03\u7684\u8bdd\u9898\u540d\u79f0` /rrbot/laser/scan","title":"\u5728rrbot.gazebo\u4e2d\u6dfb\u52a0\u96f7\u8fbe\u548c\u63d2\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#_3","text":"After you have saved both rrbot.xacro and rrbot.gazebo , you should be able to launch both Rviz and Gazebo in separate terminals: roslaunch rrbot_gazebo rrbot.launch roslaunch rrbot_description rrbot_rviz.launch In Rviz, add a ''LaserScan'' display and under ''Topic'' set it to /rrbot/laser/scan . You should see a faint laser scan line in your Gazebo environment. While the pendulum is swinging, you should also see the laser scan swing. If the scan is too faint, you can up the size of the laser scan in the properties of the LaserScan display in Rviz. A size of 1m is very easy to see. In the following two pictures, a house and construction barrel was added to the environment for better visuals. View from Gazebo: The corresponding laser view from Rviz:","title":"\u8fd0\u884c\u793a\u4f8b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#_4","text":"Next we will analyze the ros_control packages integrated with Gazebo for tight controller/actuator/simulator integration Actuators, controllers, and ros_control .","title":"\u4e0b\u4e00\u6b65"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#_5","text":"","title":"\u540e\u9762\u662f\u8fd8\u6ca1\u770b\u7684"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#gazebo_plugins","text":"The following sections document all of the plugins available in the gazebo_plugins . We suggest you review them in order because more detail is covered in the first couple of plugins and you can learn some of the concepts from the various plugins' documentation. The names of each section is derived from the plugin class name. For example, \"Block Laser\" is from the GazeboRosBlockLaser class and can be found in the file gazebo_plugins/src/gazebo_ros_block_laser.cpp . If there are some sections blank, it means that this author got tired of documenting every plugin and you should fill in the area with your experience should you have knowledge and examples of how to use the particular plugin.","title":"gazebo_plugins\u4e2d\u7684\u53ef\u7528\u63d2\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#_6","text":"Description: provides ROS interface for simulating cameras such as wge100_camera by publishing the CameraInfo and Image ROS messages as described in sensor_msgs .","title":"\u76f8\u673a\u63d2\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#multicamera","text":"Description: synchronizes multiple camera's shutters such that they publish their images together. Typically used for stereo cameras, uses a very similar interface as the plain Camera plugin Note: currently only supports stereo cameras. See Github issue .","title":"Multicamera"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#atlas-code-example","text":"In this code example there is both a left and right camera: <gazebo reference=\"left_camera_frame\"> <sensor type=\"multicamera\" name=\"stereo_camera\"> <update_rate>30.0</update_rate> <camera name=\"left\"> <horizontal_fov>1.3962634</horizontal_fov> <image> <width>800</width> <height>800</height> <format>R8G8B8</format> </image> <clip> <near>0.02</near> <far>300</far> </clip> <noise> <type>gaussian</type> <mean>0.0</mean> <stddev>0.007</stddev> </noise> </camera> <camera name=\"right\"> <pose>0 -0.07 0 0 0 0</pose> <horizontal_fov>1.3962634</horizontal_fov> <image> <width>800</width> <height>800</height> <format>R8G8B8</format> </image> <clip> <near>0.02</near> <far>300</far> </clip> <noise> <type>gaussian</type> <mean>0.0</mean> <stddev>0.007</stddev> </noise> </camera> <plugin name=\"stereo_camera_controller\" filename=\"libgazebo_ros_multicamera.so\"> <alwaysOn>true</alwaysOn> <updateRate>0.0</updateRate> <cameraName>multisense_sl/camera</cameraName> <imageTopicName>image_raw</imageTopicName> <cameraInfoTopicName>camera_info</cameraInfoTopicName> <frameName>left_camera_optical_frame</frameName> <!--<rightFrameName>right_camera_optical_frame</rightFrameName>--> <hackBaseline>0.07</hackBaseline> <distortionK1>0.0</distortionK1> <distortionK2>0.0</distortionK2> <distortionK3>0.0</distortionK3> <distortionT1>0.0</distortionT1> <distortionT2>0.0</distortionT2> </plugin> </sensor> </gazebo>","title":"Atlas Code Example"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#depth-camera","text":"Description: simulates a sensor like a Kinect, which is duplicated in the Kinect plugin. Will probably be merged in the future.","title":"Depth Camera"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#openni-kinect","text":"Description: simulates a Microsoft Kinect, publishes the same topics as the corresponding ROS drivers for the Microsoft kinect as documented in the Fuerte documentation here . <gazebo reference=\"${link_name}\"> <sensor name=\"${link_name}_camera\" type=\"depth\"> <update_rate>20</update_rate> <camera> <horizontal_fov>1.047198</horizontal_fov> <image> <width>640</width> <height>480</height> <format>R8G8B8</format> </image> <clip> <near>0.05</near> <far>3</far> </clip> </camera> <plugin name=\"${link_name}_controller\" filename=\"libgazebo_ros_openni_kinect.so\"> <baseline>0.2</baseline> <alwaysOn>true</alwaysOn> <updateRate>1.0</updateRate> <cameraName>${camera_name}_ir</cameraName> <imageTopicName>/${camera_name}/color/image_raw</imageTopicName> <cameraInfoTopicName>/${camera_name}/color/camera_info</cameraInfoTopicName> <depthImageTopicName>/${camera_name}/depth/image_raw</depthImageTopicName> <depthImageInfoTopicName>/${camera_name}/depth/camera_info</depthImageInfoTopicName> <pointCloudTopicName>/${camera_name}/depth/points</pointCloudTopicName> <frameName>${frame_name}</frameName> <pointCloudCutoff>0.5</pointCloudCutoff> <pointCloudCutoffMax>3.0</pointCloudCutoffMax> <distortionK1>0.00000001</distortionK1> <distortionK2>0.00000001</distortionK2> <distortionK3>0.00000001</distortionK3> <distortionT1>0.00000001</distortionT1> <distortionT2>0.00000001</distortionT2> <CxPrime>0</CxPrime> <Cx>0</Cx> <Cy>0</Cy> <focalLength>0</focalLength> <hackBaseline>0</hackBaseline> </plugin> </sensor> </gazebo> You can find a more detailed description for configuring a depth camera in Use a Gazebo Depth Camera with ROS .","title":"Openni Kinect"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#gpu-laser","text":"Description: simulates laser range sensor by broadcasting LaserScan message as described in sensor_msgs. See Hokuyo Laser Scanners Reference .","title":"GPU Laser"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#_7","text":"","title":""},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#laser","text":"Description: the non-GPU version of GPU Laser , but essentially uses the same code. See GPU Laser for documentation. To run with RRBot, open rrbot.gazebo and change the following two lines. replace <sensor type=\"gpu_ray\" name=\"head_hokuyo_sensor\"> with <sensor type=\"ray\" name=\"head_hokuyo_sensor\"> and replace <plugin name=\"gazebo_ros_head_hokuyo_controller\" filename=\"libgazebo_ros_gpu_laser.so\"> with <plugin name=\"gazebo_ros_head_hokuyo_controller\" filename=\"libgazebo_ros_laser.so\"> save, then launch the same launch files as for GPU Laser.","title":"Laser"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#block-laser","text":"Description: provides grid style laser range scanner simulation (e.g. Velodyne).","title":"Block Laser"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#f3d-force-feedback-ground-truth","text":"Description: broadcasts external forces on a body in simulation over WrenchStamped message as described in geometry_msgs.","title":"F3D (Force Feedback Ground Truth)"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#force","text":"Description: ROS interface for applying Wrench (geometry_msgs) on a body in simulation.","title":"Force"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#imu-gazeborosimu","text":"Description: simulates IMU sensor. Measurements are computed by the ROS plugin, not by Gazebo. See usage snippet sample below for implementation. <robot> : <gazebo> <plugin name=\"imu_plugin\" filename=\"libgazebo_ros_imu.so\"> <alwaysOn>true</alwaysOn> <bodyName>base_footprint</bodyName> <topicName>imu</topicName> <serviceName>imu_service</serviceName> <gaussianNoise>0.0</gaussianNoise> <updateRate>20.0</updateRate> </plugin> </gazebo> </robot>","title":"IMU (GazeboRosImu)"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#imu-sensor-gazeborosimusensor","text":"Description: simulates an Inertial Motion Unit sensor, the main differences from IMU (GazeboRosIMU) are: - inheritance from SensorPlugin instead of ModelPlugin, - measurements are given by gazebo ImuSensor instead of being computed by the ros plugin, - gravity is included in inertial measurements. - set initialOrientationAsReference to false to comply with REP 145 . <gazebo reference=\"imu_link\"> <gravity>true</gravity> <sensor name=\"imu_sensor\" type=\"imu\"> <always_on>true</always_on> <update_rate>100</update_rate> <visualize>true</visualize> <topic>__default_topic__</topic> <plugin filename=\"libgazebo_ros_imu_sensor.so\" name=\"imu_plugin\"> <topicName>imu</topicName> <bodyName>imu_link</bodyName> <updateRateHZ>10.0</updateRateHZ> <gaussianNoise>0.0</gaussianNoise> <xyzOffset>0 0 0</xyzOffset> <rpyOffset>0 0 0</rpyOffset> <frameName>imu_link</frameName> <initialOrientationAsReference>false</initialOrientationAsReference> </plugin> <pose>0 0 0 0 0 0</pose> </sensor> </gazebo>","title":"IMU sensor (GazeboRosImuSensor)"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#joint-pose-trajectory","text":"Description: listens to a joint_trajectory_action and plays back the set of joint positions. Sets the set of joints to exact positions without regards to simulated physics and forces.","title":"Joint Pose Trajectory"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#p3d-3d-position-interface-for-ground-truth","text":"Description: broadcasts the inertial pose of any body in simulation via Odometry message as described in nav_msgs via ROS topic.","title":"P3D (3D Position Interface for Ground Truth)"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#projector","text":"Description: projects a static texture from a source outwards, such as used with the PR2's original head camera sensor. See API documentation for more information.","title":"Projector"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#prosilica-camera","text":"Description: simulates interfaces exposed by a ROS Prosilica Camera . Here's an example URDF Xacro macro .","title":"Prosilica Camera"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#bumper","text":"Description: provides contact feedback via ContactsState message . <gazebo> <plugin name=\"${name}_gazebo_ros_bumper_controller\" filename=\"libgazebo_ros_bumper.so\"> <alwaysOn>true</alwaysOn> <updateRate>${update_rate}</updateRate> <bumperTopicName>${name}_bumper</bumperTopicName> <frameName>world</frameName> </plugin> </gazebo>","title":"Bumper"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#differential-drive","text":"Description: model plugin that provides a basic controller for differential drive robots in Gazebo. You need a well defined differential drive robot to use this plugin. <gazebo> <plugin name=\"differential_drive_controller\" filename=\"libgazebo_ros_diff_drive.so\"> <!-- Plugin update rate in Hz --> <updateRate>${update_rate}</updateRate> <!-- Name of left joint, defaults to `left_joint` --> <leftJoint>base_link_left_wheel_joint</leftJoint> <!-- Name of right joint, defaults to `right_joint` --> <rightJoint>base_link_right_wheel_joint</rightJoint> <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m --> <wheelSeparation>0.5380</wheelSeparation> <!-- Diameter of the wheels, in meters, defaults to 0.15 m --> <wheelDiameter>0.2410</wheelDiameter> <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 --> <wheelAcceleration>1.0</wheelAcceleration> <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm --> <wheelTorque>20</wheelTorque> <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` --> <commandTopic>cmd_vel</commandTopic> <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` --> <odometryTopic>odom</odometryTopic> <!-- Odometry frame, defaults to `odom` --> <odometryFrame>odom</odometryFrame> <!-- Robot frame to calculate odometry from, defaults to `base_footprint` --> <robotBaseFrame>base_footprint</robotBaseFrame> <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD --> <odometrySource>1</odometrySource> <!-- Set to true to publish transforms for the wheel links, defaults to false --> <publishWheelTF>true</publishWheelTF> <!-- Set to true to publish transforms for the odometry, defaults to true --> <publishOdom>true</publishOdom> <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false --> <publishWheelJointState>true</publishWheelJointState> <!-- Set to true to swap right and left wheels, defaults to true --> <legacyMode>false</legacyMode> </plugin> </gazebo>","title":"Differential Drive"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#skid-steering-drive","text":"Description: model plugin that provides a basic controller for skid steering drive robots in Gazebo (Pioneer 3AT for instance). <gazebo> <plugin name=\"skid_steer_drive_controller\" filename=\"libgazebo_ros_skid_steer_drive.so\"> <updateRate>100.0</updateRate> <robotNamespace>/</robotNamespace> <leftFrontJoint>front_left_wheel_joint</leftFrontJoint> <rightFrontJoint>front_right_wheel_joint</rightFrontJoint> <leftRearJoint>back_left_wheel_joint</leftRearJoint> <rightRearJoint>back_right_wheel_joint</rightRearJoint> <wheelSeparation>0.4</wheelSeparation> <wheelDiameter>0.215</wheelDiameter> <robotBaseFrame>base_link</robotBaseFrame> <torque>20</torque> <topicName>cmd_vel</topicName> <broadcastTF>false</broadcastTF> </plugin> </gazebo>","title":"Skid Steering Drive"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#video-plugin","text":"Description: visual plugin that displays a ROS image stream on an OGRE Texture inside gazebo. This plugin does not modify the texture of one of the existing link surfaces, but creates a new texture on top of it. The texture will be created on the XY plane, visible from the +Z side. The plugin requires a pixel size while constructing the texture, and will resize incoming ROS image messages to match if they are a different size. <gazebo reference=\"display_screen_link\"> <visual> <plugin name=\"display_video_controller\" filename=\"libgazebo_ros_video.so\"> <topicName>image</topicName> <height>120</height> <width>160</width> </plugin> </visual> </gazebo>","title":"Video Plugin"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#planar-move-plugin","text":"Description: model plugin that allows arbitrary objects (for instance cubes, spheres and cylinders) to be moved along a horizontal plane using a geometry_msgs/Twist message. The plugin works by imparting a linear velocity (XY) and an angular velocity (Z) to the object every cycle. Here is a full URDF example that demonstrates how to control a floating box inside gazebo using this plugin, using different visual and collision elements. Note: The object needs to have sufficient inertia to prevent undesirable motions - which can occur as a reaction to the supplied velocity. You can try increasing inertia until the object moves as desired. It is also good to have the center of mass close to the ground. <robot name=\"test_model\"> <!-- root link, on the ground just below the model origin --> <link name=\"base_footprint\"> <visual> <origin xyz=\"0 0 0\" rpy=\"0 0 0\" /> <geometry> <box size=\"0.001 0.001 0.001\" /> </geometry> </visual> </link> <joint name=\"base_link_joint\" type=\"fixed\"> <origin xyz=\"0.0 0 1.25\" rpy=\"0 0 0\" /> <parent link=\"base_footprint\"/> <child link=\"base_link\" /> </joint> <!-- the model --> <link name=\"base_link\"> <inertial> <mass value=\"50\" /> <origin xyz=\"0 0 -1.25\" /> <inertia ixx=\"50.0\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"50.0\" iyz=\"0.0\" izz=\"50.0\" /> </inertial> <visual> <geometry> <box size=\"0.5 0.5 1.0\" /> <!-- does not need to match collision --> </geometry> </visual> <collision> <origin xyz=\"0 0 -1.0\" /> <geometry> <cylinder length=\"0.5\" radius=\"0.25\" /> </geometry> </collision> </link> <gazebo> <plugin name=\"object_controller\" filename=\"libgazebo_ros_planar_move.so\"> <commandTopic>cmd_vel</commandTopic> <odometryTopic>odom</odometryTopic> <odometryFrame>odom</odometryFrame> <odometryRate>20.0</odometryRate> <robotBaseFrame>base_footprint</robotBaseFrame> </plugin> </gazebo> </robot>","title":"Planar Move Plugin"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#template","text":"Description: an example c++ plugin template for anyone who wants to write their own plugin.","title":"Template"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#issue-report-contribution","text":"Gazebo-ROS plugins are stored in a ROS package. See gazebo_plugins wiki page about how you can contribute.","title":"Issue report, contribution"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#3rd-party-plugins","text":"In addition to the plugins explained above, there are also a number of 3 rd party Gazebo-ROS plugins. Some of them are found on ros.org ( example of search keyword ). If a 3 rd party plugin is useful and generic enough, please consider pulling it into the official gazebo_plugins package (wiki page) by opening a suggestion at the issue tracker of each repository.","title":"3rd party plugins"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/2-Tutorial%20Using%20Gazebo%20plugins%20with%20ROS/#next-steps","text":"\u539f\u7f51\u5740: \u8bbf\u95ee \u521b\u5efa\u65f6\u95f4: 2021-04-03 10:06:31 \u76ee\u5f55: default \u6807\u7b7e: \u65e0","title":"Next Steps"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/","text":"Tutorial: ROS Control \u00b6 \u672c\u6559\u7a0b\u5229\u7528 ros_control \u5de5\u5177\u5305\u9a71\u52a8\u673a\u5668\u4eba\u4e2d\u7684\u5173\u8282. \u4e0a\u4e00\u8bfe\u7a0b\u4e3a: Using URDF in Gazebo \u9996\u5148\u9700\u8981\u786e\u4fdd\u5b89\u88c5\u4e86ros_control, \u5b89\u88c5\u8fc7\u7a0b\u89c1 installation instructions . Make sure you have already installed ros_control, ros_controllers, and their dependencies as described in the ros_control \u4ecb\u7ecd \u00b6 We encourage you to read an overview of the documentation on ros_control before proceeding. ros_control \u548c Gazebo \u4e2d\u7684\u6570\u636e\u6d41 \u00b6 Simulating a robot's controllers in Gazebo can be accomplished using ros_control and a simple Gazebo plugin adapter. \u4eff\u771f \u786c\u4ef6 \u63a7\u5236\u5668\u4ee5\u53ca\u4f20\u52a8(transmissions)\u7684\u5927\u81f4\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a: ![[Pasted image 20210403115415.png]] \u5173\u7cfb\u5982\u4e0b: \u6765\u81ea ROS\u63a2\u7d22\u603b\u7ed3\uff08\u4e09\u5341\u4e00\uff09\u2014\u2014ros_control Controller Manager\uff1a\u6bcf\u4e2a\u673a\u5668\u4eba\u53ef\u80fd\u6709\u591a\u4e2acontroller\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e2a\u63a7\u5236\u5668\u7ba1\u7406\u5668\u7684\u6982\u5ff5\uff0c\u63d0\u4f9b\u4e00\u79cd\u901a\u7528\u7684\u63a5\u53e3\u6765\u7ba1\u7406\u4e0d\u540c\u7684controller\u3002controller manager\u7684\u8f93\u5165\u5c31\u662fROS\u4e0a\u5c42\u5e94\u7528\u7684\u8f93\u51fa\u3002 Controller\uff1acontroller\u53ef\u4ee5\u5b8c\u6210\u6bcf\u4e2ajoint\u7684\u63a7\u5236\uff0c\u8bf7\u6c42\u4e0b\u5c42\u7684\u786c\u4ef6\u8d44\u6e90\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e86PID\u63a7\u5236\u5668\uff0c\u8bfb\u53d6\u786c\u4ef6\u8d44\u6e90\u63a5\u53e3\u4e2d\u7684\u72b6\u6001\uff0c\u5728\u53d1\u5e03\u63a7\u5236\u547d\u4ee4\u3002 Hardware Rescource\uff1a\u4e3a\u4e0a\u4e0b\u4e24\u5c42\u63d0\u4f9b\u786c\u4ef6\u8d44\u6e90\u7684\u63a5\u53e3\u3002 RobotHW\uff1a\u786c\u4ef6\u62bd\u8c61\u5c42\u548c\u786c\u4ef6\u76f4\u63a5\u6253\u4ea4\u9053\uff0c\u901a\u8fc7write\u548cread\u65b9\u6cd5\u6765\u5b8c\u6210\u786c\u4ef6\u7684\u64cd\u4f5c\uff0c\u8fd9\u4e00\u5c42\u4e5f\u5305\u542b\u5173\u8282\u9650\u4f4d\u3001\u529b\u77e9\u8f6c\u6362\u3001\u72b6\u6001\u8f6c\u6362\u7b49\u529f\u80fd\u3002 Real Robot\uff1a\u5b9e\u9645\u7684\u673a\u5668\u4eba\u4e0a\u4e5f\u9700\u8981\u6709\u81ea\u5df1\u7684\u5d4c\u5165\u5f0f\u63a7\u5236\u5668\uff0c\u63a5\u6536\u5230\u547d\u4ee4\u540e\u9700\u8981\u53cd\u6620\u5230\u6267\u884c\u5668\u4e0a\uff0c\u6bd4\u5982\u63a5\u6536\u5230\u4f4d\u7f6e1\u7684\u547d\u4ee4\u540e\uff0c\u90a3\u5c31\u9700\u8981\u8ba9\u6267\u884c\u5668\u5feb\u901f\u3001\u7a33\u5b9a\u7684\u5230\u8fbe\u4f4d\u7f6e1\u3002 RRBot \u5b9e\u8df5 \u00b6 ^ae67a5 \u4e3b\u8981\u6b65\u9aa4\u5982\u4e0b: \u5728URDF\u6a21\u578b\u91cc\u6dfb\u52a0\u4f20\u52a8\u90e8\u4ef6(transmission elements) \u5728 .gazebo \u91cc\u6dfb\u52a0 gazebo_ros_control \u63d2\u4ef6 \u5728 rrbot.xacro \u91cc\u6dfb\u52a0\u4f20\u52a8\u90e8\u4ef6 \u00b6 \u5982\u4e0b: <transmission name= \"tran1\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"joint1\" > <hardwareInterface> EffortJointInterface </hardwareInterface> </joint> <actuator name= \"motor1\" > <hardwareInterface> EffortJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> <transmission name= \"tran2\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"joint2\" > <hardwareInterface> EffortJointInterface </hardwareInterface> </joint> <actuator name= \"motor2\" > <hardwareInterface> EffortJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> \u5176\u4e2d: joint name=\"joint1\" \u8868\u660e\u8be5\u4f20\u52a8\u90e8\u4ef6\u662fjoint1\u7684\u4f20\u52a8\u90e8\u4ef6, transmission\u7684\u6807\u7b7e\u7684\u4f5c\u7528\u662f\u5c06\u9a71\u52a8\u673a\u6784\u548cjoint\u8054\u7cfb\u8d77\u6765. <hardwareInterface> \u5b9a\u4e49\u5728 <actuator> \u548c <joint> \u6807\u7b7e\u4e2d\u7684\uff0c\u5b83\u544a\u8bc9gazebo_ros_control\u63d2\u4ef6\u8981\u52a0\u8f7d\u54ea\u4e9b\u786c\u4ef6\u63a5\u53e3\uff08\u4f4d\u7f6e\uff0c\u901f\u5ea6\u6216\u529b\u5ea6\u63a5\u53e3\uff09\u3002\u5f53\u524d\u4ec5\u5b9e\u73b0\u529b\u5ea6\u63a5\u53e3\u3002 \u5728 rrbot.gazebo \u91cc\u6dfb\u52a0 gazebo_ros_control \u63d2\u4ef6 \u00b6 \u5982\u4e0b,\u6dfb\u52a0\u63d2\u4ef6\u53ef\u4ee5\u8bfb\u53d6 xacro \u6587\u4ef6\u4e2d\u7684 <transmission> \u6807\u7b7e\u91cc\u7684\u5185\u5bb9 <gazebo> <plugin name= \"gazebo_ros_control\" filename= \"libgazebo_ros_control.so\" > <robotNamespace> /rrbot </robotNamespace> </plugin> </gazebo> In addition to the transmission tags, a Gazebo plugin needs to be added to your URDF that actually parses the transmission tags and loads the appropriate hardware interfaces and controller manager. By default the gazebo_ros_control plugin is very simple, though it is also extensible via an additional plugin architecture to allow power users to create their own custom robot hardware interfaces between ros_control and Gazebo. The default plugin XML should be added to your URDF: <gazebo> <plugin name=\"gazebo_ros_control\" filename=\"libgazebo_ros_control.so\"> <robotNamespace>/MYROBOT</robotNamespace> </plugin> </gazebo> gazebo_ros_control <plugin> \u6807\u7b7e\u7684\u76f8\u5173\u9009\u9879 <robotNamespace> : The ROS namespace to be used for this instance of the plugin, defaults to robot name in URDF/SDF <controlPeriod> : The period of the controller update (in seconds), defaults to Gazebo's period <robotParam> : The location of the robot_description (URDF) on the parameter server, defaults to '/robot_description' <robotSimType> : The pluginlib name of a custom robot sim interface to be used (see below for more details), defaults to 'DefaultRobotHWSim' \u521b\u5efa .yaml \u914d\u7f6e\u6587\u4ef6 \u00b6 PID\u63a7\u5236\u5668\u7684\u589e\u76ca\u77e9\u9635\u548c\u63a7\u5236\u5668\u8bbe\u7f6e\u9700\u8981\u5b58\u50a8\u5728yaml\u6587\u4ef6\u4e0b, \u7528\u4e8e\u88abros\u7684\u53c2\u6570\u670d\u52a1\u5668\u8bfb\u53d6. \u6bd4\u5982: MYROBOT_control/config/rrbot_control.yaml : rrbot : # Publish all joint states ----------------------------------- joint_state_controller : type : joint_state_controller/JointStateController publish_rate : 50 # Position Controllers --------------------------------------- joint1_position_controller : type : effort_controllers/JointPositionController joint : joint1 pid : { p : 100.0 , i : 0.01 , d : 10.0 } joint2_position_controller : type : effort_controllers/JointPositionController joint : joint2 pid : { p : 100.0 , i : 0.01 , d : 10.0 } \u521b\u5efa roslaunch \u542f\u52a8\u6587\u4ef6 \u00b6 \u5982\u4e0b\u6240\u793a: <launch> <!-- Load joint controller configurations from YAML file to parameter server --> <rosparam file= \"$(find rrbot_control)/config/rrbot_control.yaml\" command= \"load\" /> <!-- load the controllers --> <node name= \"controller_spawner\" pkg= \"controller_manager\" type= \"spawner\" respawn= \"false\" output= \"screen\" ns= \"/rrbot\" args= \"joint1_position_controller joint2_position_controller joint_state_controller\" /> <!-- convert joint states to TF transforms for rviz, etc --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"robot_state_publisher\" respawn= \"false\" output= \"screen\" > <remap from= \"/joint_states\" to= \"/rrbot/joint_states\" /> </node> </launch> \u89e3\u8bfb \u00b6 <rosparam file=\"$(find rrbot_control)/config/rrbot_control.yaml\" command=\"load\"/> \u5bfc\u5165\u914d\u7f6e\u6587\u4ef6 \u542f\u52a8controller_manager\u5305\u91cc\u7684\u8282\u70b9spawner \u4f5c\u7528\u662fload\u4e09\u4e2a\u63a7\u5236\u5668 joint1_position_controller joint2_position_controller joint_state_controller <!-- load the controllers --> <node name= \"controller_spawner\" pkg= \"controller_manager\" type= \"spawner\" respawn= \"false\" output= \"screen\" ns= \"/rrbot\" args= \"joint1_position_controller joint2_position_controller joint_state_controller\" /> \u542f\u52a8 robot_state _publisher , \u8be5\u8282\u70b9\u4ec5\u4fa6\u542c\u6765\u81ea joint_state_controller \u7684 joint_states \u6d88\u606f\uff0c\u7136\u540e\u5c06\u8f6c\u6362\u53d1\u5e03\u5230tf\u3002 <!-- convert joint states to TF transforms for rviz, etc --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"robot_state_publisher\" respawn= \"false\" output= \"screen\" > <remap from= \"/joint_states\" to= \"/rrbot/joint_states\" /> </node> \u542f\u52a8roslaunch \u00b6 \u9996\u5148\u542f\u52a8\u4eff\u771f roslaunch rrbot_gazebo rrbot_world.launch \u7136\u540e\u542f\u52a8\u63a7\u5236\u5668 roslaunch rrbot_control rrbot_control.launch \u8fdb\u9636\u9605\u8bfb \u00b6 \u624b\u52a8\u53d1\u9001\u547d\u4ee4 \u00b6 \u8f93\u5165\u5982\u4e0b\u7684\u547d\u4ee4, \u4f1a\u53d1\u73b0gazebo\u91cc\u7684\u673a\u68b0\u81c2\u5173\u8282\u52a8\u4e86 rostopic pub -1 /rrbot/joint1_position_controller/command std_msgs/Float64 \"data: 1.5\" rostopic pub -1 /rrbot/joint2_position_controller/command std_msgs/Float64 \"data: 1.0\" rostopic pub\u7684\u7528\u6cd5: pub <topic-name> <topic-type> [data...] rostopic pub /topic_name std_msgs/String hello \u6ca1\u6709\u60f3\u660e\u767d\u539f\u7406 \u4e0b\u4e00\u6b65 \u00b6 Learn about ROS message and service calls that are available for use with Gazebo in the tutorial ROS Communication with Gazebo . \u4ee5\u4e0b\u6ca1\u770b \u00b6 Advanced: custom gazebo_ros_control Simulation Plugins \u00b6 The gazebo_ros_control Gazebo plugin also provides a pluginlib-based interface to implement custom interfaces between Gazebo and ros_control for simulating more complex mechanisms (nonlinear springs, linkages, etc). These plugins must inherit gazebo_ros_control::RobotHWSim which implements a simulated ros_control hardware_interface::RobotHW. RobotHWSim provides API-level access to read and command joint properties in the Gazebo simulator. The respective RobotHWSim sub-class is specified in a URDF model and is loaded when the robot model is loaded. For example, the following XML will load the default plugin (same behavior as when using no <robotSimType> tag): <gazebo> <plugin name=\"gazebo_ros_control\" filename=\"libgazebo_ros_control.so\"> <robotNamespace>/MYROBOT</robotNamespace> <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType> </plugin> </gazebo> RRBot Example \u00b6 Using service calls manually \u00b6 If you first load the rrbot_control.yaml files to the parameter server, you could load the controllers manually through service requests. We'll include them here for reference though we usually prefer roslaunch: Load the controllers: rosservice call /rrbot/controller_manager/load_controller \"name: 'joint1_position_controller'\" rosservice call /rrbot/controller_manager/load_controller \"name: 'joint2_position_controller'\" Start the controllers: rosservice call /rrbot/controller_manager/switch_controller \"{start_controllers: ['joint1_position_controller','joint2_position_controller'], stop_controllers: [], strictness: 2}\" Stop the controllers: rosservice call /rrbot/controller_manager/switch_controller \"{start_controllers: [], stop_controllers: ['joint1_position_controller','joint2_position_controller'], strictness: 2}\" Use RQT To Send Commands \u00b6 In this section we'll go over tools to help you visualize the performance of your controller and tune any gains/parameters the controller might have, particularly PID gains. We'll be using RQT , ROS's plugin-based user interface, so be sure you first have that installed. Start RQT: rosrun rqt_gui rqt_gui Add a Command Publisher \u00b6 On the 'Plugins' menu of RQT add the 'Topics->Message Publisher' plugin then choose the topic from the drop down box that commands any particular controller that you want to publish to. For the RRBot, add the controller: /rrbot/joint1_position_controller/command Then press the green plus sign button at the top right. Enable the topic publisher by checking the check box on the left of the topic name. Set the rate column to 100 (the frequency we send it commands - 100hz in this case). Next, expand the topic so that you see the \"data\" row. In the expression column, on the data row, try different radian values between joint1's joint limits - in RRBot's case there are no limits because the joints are continuous, so any value works. You should be able to get the RRBot to swing around if you are doing this tutorial with that robot. Next, in that same expression box we'll have it automatically change values using a sine wave. Add the following: sin(i/100) For more advanced control, you can configure it to publish a sine wave to your robot's exact joint limits: sin(i/rate*speed)*diff + offset An explanation of variables: i - the RQT variable for time rate - the frequency that this expression is evaluated. This should be the same number as in the rate column of the topic publisher. Recommended value is 100. speed - how quick you want the join to actuate. Start off with just 1 for a slow speed upper_limit and lower_limits - the joint limits of the hardware being controlled by this controller diff = (upper_limit - lower_limit)/2 offset = upper_limit-diff Visualize the controller's performance \u00b6 Add a Plot plugin to RQT and add the same topic as the one you chose above for the topic publisher: /rrbot/joint1_position_controller/command/data Click the green add button. You should now see a sine wave being plotted on the screen. Add another topic to the Plot plugin that tracks the actual position of the actuator being controlled. You will want to the reduce the error between these two values by tuning the PID gains, as shown in the next step. For the RRBot: /rrbot/joint1_position_controller/state/process_value Your screen should look something like this: ![[Pasted image 20210403115439.png]] Note: the RQT plot plugin is known to have bugs after running for a while (>1min). The drawings start acting strangely. The current solution is to press the blue refresh button at the top right of the plugin. Tune the PID gains \u00b6 Finally, we'll use dynamic reconfigure to tune the proportional, derivative, and integral gains of the PID controller, assuming this is applicable to your robot. Add the 'Dynamic Reconfigure' plugin to RQT and click 'Expand All' to see the sub-options. Assuming your controller uses PID, you should use a \"pid\" option. Clicking on it should reveal 5 sliders that let you tune the controller, as pictured in the following screenshot. Adjust these values until you get the desired performance of your controller. ![[Pasted image 20210403115459.png]] Use roslaunch to save your RQT perspective \u00b6 A pre-configured RQT perspective for the rrbot can be easily launched with the following command: roslaunch rrbot_control rrbot_rqt.launch You can use that as a template for doing this with your own robot. Connect Rviz to Gazebo Simulation \u00b6 Now that you are using ros_control to send commands to your robot in simulation, you can also use the ros_control joint_state_controller to read the state of the robot from Gazebo. The idea behind a good simulator is that you should be able to use the same software on your real hardware as you do in simulation. A good starting point for that is visualizing your simulated robot in Rviz, similar to how it is done with real hardware. Assuming you are already starting a joint_state_controller as documented above in your rosparam and roslaunch files, your next step is to start Rviz: rosrun rviz rviz Under \"Global Options\" change your \"Fixed Frame\" to \"world\" to resolve any errors it might be giving you. Next, add a \"RobotModel\" display type to Rviz and you should then see your simulated robot in Gazebo being visualized in Rviz! Demo Code \u00b6 The example code used for the RRBot in this tutorial is available in the repository gazebo_ros_demos .","title":"3 Tutorial ROS Control"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#tutorial-ros-control","text":"\u672c\u6559\u7a0b\u5229\u7528 ros_control \u5de5\u5177\u5305\u9a71\u52a8\u673a\u5668\u4eba\u4e2d\u7684\u5173\u8282. \u4e0a\u4e00\u8bfe\u7a0b\u4e3a: Using URDF in Gazebo \u9996\u5148\u9700\u8981\u786e\u4fdd\u5b89\u88c5\u4e86ros_control, \u5b89\u88c5\u8fc7\u7a0b\u89c1 installation instructions . Make sure you have already installed ros_control, ros_controllers, and their dependencies as described in the","title":"Tutorial: ROS Control"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#ros_control","text":"We encourage you to read an overview of the documentation on ros_control before proceeding.","title":"ros_control \u4ecb\u7ecd"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#ros_control-gazebo","text":"Simulating a robot's controllers in Gazebo can be accomplished using ros_control and a simple Gazebo plugin adapter. \u4eff\u771f \u786c\u4ef6 \u63a7\u5236\u5668\u4ee5\u53ca\u4f20\u52a8(transmissions)\u7684\u5927\u81f4\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a: ![[Pasted image 20210403115415.png]] \u5173\u7cfb\u5982\u4e0b: \u6765\u81ea ROS\u63a2\u7d22\u603b\u7ed3\uff08\u4e09\u5341\u4e00\uff09\u2014\u2014ros_control Controller Manager\uff1a\u6bcf\u4e2a\u673a\u5668\u4eba\u53ef\u80fd\u6709\u591a\u4e2acontroller\uff0c\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e2a\u63a7\u5236\u5668\u7ba1\u7406\u5668\u7684\u6982\u5ff5\uff0c\u63d0\u4f9b\u4e00\u79cd\u901a\u7528\u7684\u63a5\u53e3\u6765\u7ba1\u7406\u4e0d\u540c\u7684controller\u3002controller manager\u7684\u8f93\u5165\u5c31\u662fROS\u4e0a\u5c42\u5e94\u7528\u7684\u8f93\u51fa\u3002 Controller\uff1acontroller\u53ef\u4ee5\u5b8c\u6210\u6bcf\u4e2ajoint\u7684\u63a7\u5236\uff0c\u8bf7\u6c42\u4e0b\u5c42\u7684\u786c\u4ef6\u8d44\u6e90\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e86PID\u63a7\u5236\u5668\uff0c\u8bfb\u53d6\u786c\u4ef6\u8d44\u6e90\u63a5\u53e3\u4e2d\u7684\u72b6\u6001\uff0c\u5728\u53d1\u5e03\u63a7\u5236\u547d\u4ee4\u3002 Hardware Rescource\uff1a\u4e3a\u4e0a\u4e0b\u4e24\u5c42\u63d0\u4f9b\u786c\u4ef6\u8d44\u6e90\u7684\u63a5\u53e3\u3002 RobotHW\uff1a\u786c\u4ef6\u62bd\u8c61\u5c42\u548c\u786c\u4ef6\u76f4\u63a5\u6253\u4ea4\u9053\uff0c\u901a\u8fc7write\u548cread\u65b9\u6cd5\u6765\u5b8c\u6210\u786c\u4ef6\u7684\u64cd\u4f5c\uff0c\u8fd9\u4e00\u5c42\u4e5f\u5305\u542b\u5173\u8282\u9650\u4f4d\u3001\u529b\u77e9\u8f6c\u6362\u3001\u72b6\u6001\u8f6c\u6362\u7b49\u529f\u80fd\u3002 Real Robot\uff1a\u5b9e\u9645\u7684\u673a\u5668\u4eba\u4e0a\u4e5f\u9700\u8981\u6709\u81ea\u5df1\u7684\u5d4c\u5165\u5f0f\u63a7\u5236\u5668\uff0c\u63a5\u6536\u5230\u547d\u4ee4\u540e\u9700\u8981\u53cd\u6620\u5230\u6267\u884c\u5668\u4e0a\uff0c\u6bd4\u5982\u63a5\u6536\u5230\u4f4d\u7f6e1\u7684\u547d\u4ee4\u540e\uff0c\u90a3\u5c31\u9700\u8981\u8ba9\u6267\u884c\u5668\u5feb\u901f\u3001\u7a33\u5b9a\u7684\u5230\u8fbe\u4f4d\u7f6e1\u3002","title":"ros_control \u548c Gazebo \u4e2d\u7684\u6570\u636e\u6d41"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#rrbot","text":"^ae67a5 \u4e3b\u8981\u6b65\u9aa4\u5982\u4e0b: \u5728URDF\u6a21\u578b\u91cc\u6dfb\u52a0\u4f20\u52a8\u90e8\u4ef6(transmission elements) \u5728 .gazebo \u91cc\u6dfb\u52a0 gazebo_ros_control \u63d2\u4ef6","title":"RRBot \u5b9e\u8df5"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#rrbotxacro","text":"\u5982\u4e0b: <transmission name= \"tran1\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"joint1\" > <hardwareInterface> EffortJointInterface </hardwareInterface> </joint> <actuator name= \"motor1\" > <hardwareInterface> EffortJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> <transmission name= \"tran2\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"joint2\" > <hardwareInterface> EffortJointInterface </hardwareInterface> </joint> <actuator name= \"motor2\" > <hardwareInterface> EffortJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> \u5176\u4e2d: joint name=\"joint1\" \u8868\u660e\u8be5\u4f20\u52a8\u90e8\u4ef6\u662fjoint1\u7684\u4f20\u52a8\u90e8\u4ef6, transmission\u7684\u6807\u7b7e\u7684\u4f5c\u7528\u662f\u5c06\u9a71\u52a8\u673a\u6784\u548cjoint\u8054\u7cfb\u8d77\u6765. <hardwareInterface> \u5b9a\u4e49\u5728 <actuator> \u548c <joint> \u6807\u7b7e\u4e2d\u7684\uff0c\u5b83\u544a\u8bc9gazebo_ros_control\u63d2\u4ef6\u8981\u52a0\u8f7d\u54ea\u4e9b\u786c\u4ef6\u63a5\u53e3\uff08\u4f4d\u7f6e\uff0c\u901f\u5ea6\u6216\u529b\u5ea6\u63a5\u53e3\uff09\u3002\u5f53\u524d\u4ec5\u5b9e\u73b0\u529b\u5ea6\u63a5\u53e3\u3002","title":"\u5728rrbot.xacro\u91cc\u6dfb\u52a0\u4f20\u52a8\u90e8\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#rrbotgazebogazebo_ros_control","text":"\u5982\u4e0b,\u6dfb\u52a0\u63d2\u4ef6\u53ef\u4ee5\u8bfb\u53d6 xacro \u6587\u4ef6\u4e2d\u7684 <transmission> \u6807\u7b7e\u91cc\u7684\u5185\u5bb9 <gazebo> <plugin name= \"gazebo_ros_control\" filename= \"libgazebo_ros_control.so\" > <robotNamespace> /rrbot </robotNamespace> </plugin> </gazebo> In addition to the transmission tags, a Gazebo plugin needs to be added to your URDF that actually parses the transmission tags and loads the appropriate hardware interfaces and controller manager. By default the gazebo_ros_control plugin is very simple, though it is also extensible via an additional plugin architecture to allow power users to create their own custom robot hardware interfaces between ros_control and Gazebo. The default plugin XML should be added to your URDF: <gazebo> <plugin name=\"gazebo_ros_control\" filename=\"libgazebo_ros_control.so\"> <robotNamespace>/MYROBOT</robotNamespace> </plugin> </gazebo> gazebo_ros_control <plugin> \u6807\u7b7e\u7684\u76f8\u5173\u9009\u9879 <robotNamespace> : The ROS namespace to be used for this instance of the plugin, defaults to robot name in URDF/SDF <controlPeriod> : The period of the controller update (in seconds), defaults to Gazebo's period <robotParam> : The location of the robot_description (URDF) on the parameter server, defaults to '/robot_description' <robotSimType> : The pluginlib name of a custom robot sim interface to be used (see below for more details), defaults to 'DefaultRobotHWSim'","title":"\u5728rrbot.gazebo\u91cc\u6dfb\u52a0gazebo_ros_control\u63d2\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#yaml","text":"PID\u63a7\u5236\u5668\u7684\u589e\u76ca\u77e9\u9635\u548c\u63a7\u5236\u5668\u8bbe\u7f6e\u9700\u8981\u5b58\u50a8\u5728yaml\u6587\u4ef6\u4e0b, \u7528\u4e8e\u88abros\u7684\u53c2\u6570\u670d\u52a1\u5668\u8bfb\u53d6. \u6bd4\u5982: MYROBOT_control/config/rrbot_control.yaml : rrbot : # Publish all joint states ----------------------------------- joint_state_controller : type : joint_state_controller/JointStateController publish_rate : 50 # Position Controllers --------------------------------------- joint1_position_controller : type : effort_controllers/JointPositionController joint : joint1 pid : { p : 100.0 , i : 0.01 , d : 10.0 } joint2_position_controller : type : effort_controllers/JointPositionController joint : joint2 pid : { p : 100.0 , i : 0.01 , d : 10.0 }","title":"\u521b\u5efa .yaml \u914d\u7f6e\u6587\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#roslaunch","text":"\u5982\u4e0b\u6240\u793a: <launch> <!-- Load joint controller configurations from YAML file to parameter server --> <rosparam file= \"$(find rrbot_control)/config/rrbot_control.yaml\" command= \"load\" /> <!-- load the controllers --> <node name= \"controller_spawner\" pkg= \"controller_manager\" type= \"spawner\" respawn= \"false\" output= \"screen\" ns= \"/rrbot\" args= \"joint1_position_controller joint2_position_controller joint_state_controller\" /> <!-- convert joint states to TF transforms for rviz, etc --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"robot_state_publisher\" respawn= \"false\" output= \"screen\" > <remap from= \"/joint_states\" to= \"/rrbot/joint_states\" /> </node> </launch>","title":"\u521b\u5efa roslaunch \u542f\u52a8\u6587\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#_1","text":"<rosparam file=\"$(find rrbot_control)/config/rrbot_control.yaml\" command=\"load\"/> \u5bfc\u5165\u914d\u7f6e\u6587\u4ef6 \u542f\u52a8controller_manager\u5305\u91cc\u7684\u8282\u70b9spawner \u4f5c\u7528\u662fload\u4e09\u4e2a\u63a7\u5236\u5668 joint1_position_controller joint2_position_controller joint_state_controller <!-- load the controllers --> <node name= \"controller_spawner\" pkg= \"controller_manager\" type= \"spawner\" respawn= \"false\" output= \"screen\" ns= \"/rrbot\" args= \"joint1_position_controller joint2_position_controller joint_state_controller\" /> \u542f\u52a8 robot_state _publisher , \u8be5\u8282\u70b9\u4ec5\u4fa6\u542c\u6765\u81ea joint_state_controller \u7684 joint_states \u6d88\u606f\uff0c\u7136\u540e\u5c06\u8f6c\u6362\u53d1\u5e03\u5230tf\u3002 <!-- convert joint states to TF transforms for rviz, etc --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"robot_state_publisher\" respawn= \"false\" output= \"screen\" > <remap from= \"/joint_states\" to= \"/rrbot/joint_states\" /> </node>","title":"\u89e3\u8bfb"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#roslaunch_1","text":"\u9996\u5148\u542f\u52a8\u4eff\u771f roslaunch rrbot_gazebo rrbot_world.launch \u7136\u540e\u542f\u52a8\u63a7\u5236\u5668 roslaunch rrbot_control rrbot_control.launch","title":"\u542f\u52a8roslaunch"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#_2","text":"","title":"\u8fdb\u9636\u9605\u8bfb"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#_3","text":"\u8f93\u5165\u5982\u4e0b\u7684\u547d\u4ee4, \u4f1a\u53d1\u73b0gazebo\u91cc\u7684\u673a\u68b0\u81c2\u5173\u8282\u52a8\u4e86 rostopic pub -1 /rrbot/joint1_position_controller/command std_msgs/Float64 \"data: 1.5\" rostopic pub -1 /rrbot/joint2_position_controller/command std_msgs/Float64 \"data: 1.0\" rostopic pub\u7684\u7528\u6cd5: pub <topic-name> <topic-type> [data...] rostopic pub /topic_name std_msgs/String hello \u6ca1\u6709\u60f3\u660e\u767d\u539f\u7406","title":"\u624b\u52a8\u53d1\u9001\u547d\u4ee4"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#_4","text":"Learn about ROS message and service calls that are available for use with Gazebo in the tutorial ROS Communication with Gazebo .","title":"\u4e0b\u4e00\u6b65"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#_5","text":"","title":"\u4ee5\u4e0b\u6ca1\u770b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#advanced-custom-gazebo_ros_control-simulation-plugins","text":"The gazebo_ros_control Gazebo plugin also provides a pluginlib-based interface to implement custom interfaces between Gazebo and ros_control for simulating more complex mechanisms (nonlinear springs, linkages, etc). These plugins must inherit gazebo_ros_control::RobotHWSim which implements a simulated ros_control hardware_interface::RobotHW. RobotHWSim provides API-level access to read and command joint properties in the Gazebo simulator. The respective RobotHWSim sub-class is specified in a URDF model and is loaded when the robot model is loaded. For example, the following XML will load the default plugin (same behavior as when using no <robotSimType> tag): <gazebo> <plugin name=\"gazebo_ros_control\" filename=\"libgazebo_ros_control.so\"> <robotNamespace>/MYROBOT</robotNamespace> <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType> </plugin> </gazebo>","title":"Advanced: custom gazebo_ros_control Simulation Plugins"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#rrbot-example","text":"","title":"RRBot Example"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#using-service-calls-manually","text":"If you first load the rrbot_control.yaml files to the parameter server, you could load the controllers manually through service requests. We'll include them here for reference though we usually prefer roslaunch: Load the controllers: rosservice call /rrbot/controller_manager/load_controller \"name: 'joint1_position_controller'\" rosservice call /rrbot/controller_manager/load_controller \"name: 'joint2_position_controller'\" Start the controllers: rosservice call /rrbot/controller_manager/switch_controller \"{start_controllers: ['joint1_position_controller','joint2_position_controller'], stop_controllers: [], strictness: 2}\" Stop the controllers: rosservice call /rrbot/controller_manager/switch_controller \"{start_controllers: [], stop_controllers: ['joint1_position_controller','joint2_position_controller'], strictness: 2}\"","title":"Using service calls manually"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#use-rqt-to-send-commands","text":"In this section we'll go over tools to help you visualize the performance of your controller and tune any gains/parameters the controller might have, particularly PID gains. We'll be using RQT , ROS's plugin-based user interface, so be sure you first have that installed. Start RQT: rosrun rqt_gui rqt_gui","title":"Use RQT To Send Commands"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#add-a-command-publisher","text":"On the 'Plugins' menu of RQT add the 'Topics->Message Publisher' plugin then choose the topic from the drop down box that commands any particular controller that you want to publish to. For the RRBot, add the controller: /rrbot/joint1_position_controller/command Then press the green plus sign button at the top right. Enable the topic publisher by checking the check box on the left of the topic name. Set the rate column to 100 (the frequency we send it commands - 100hz in this case). Next, expand the topic so that you see the \"data\" row. In the expression column, on the data row, try different radian values between joint1's joint limits - in RRBot's case there are no limits because the joints are continuous, so any value works. You should be able to get the RRBot to swing around if you are doing this tutorial with that robot. Next, in that same expression box we'll have it automatically change values using a sine wave. Add the following: sin(i/100) For more advanced control, you can configure it to publish a sine wave to your robot's exact joint limits: sin(i/rate*speed)*diff + offset An explanation of variables: i - the RQT variable for time rate - the frequency that this expression is evaluated. This should be the same number as in the rate column of the topic publisher. Recommended value is 100. speed - how quick you want the join to actuate. Start off with just 1 for a slow speed upper_limit and lower_limits - the joint limits of the hardware being controlled by this controller diff = (upper_limit - lower_limit)/2 offset = upper_limit-diff","title":"Add a Command Publisher"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#visualize-the-controllers-performance","text":"Add a Plot plugin to RQT and add the same topic as the one you chose above for the topic publisher: /rrbot/joint1_position_controller/command/data Click the green add button. You should now see a sine wave being plotted on the screen. Add another topic to the Plot plugin that tracks the actual position of the actuator being controlled. You will want to the reduce the error between these two values by tuning the PID gains, as shown in the next step. For the RRBot: /rrbot/joint1_position_controller/state/process_value Your screen should look something like this: ![[Pasted image 20210403115439.png]] Note: the RQT plot plugin is known to have bugs after running for a while (>1min). The drawings start acting strangely. The current solution is to press the blue refresh button at the top right of the plugin.","title":"Visualize the controller's performance"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#tune-the-pid-gains","text":"Finally, we'll use dynamic reconfigure to tune the proportional, derivative, and integral gains of the PID controller, assuming this is applicable to your robot. Add the 'Dynamic Reconfigure' plugin to RQT and click 'Expand All' to see the sub-options. Assuming your controller uses PID, you should use a \"pid\" option. Clicking on it should reveal 5 sliders that let you tune the controller, as pictured in the following screenshot. Adjust these values until you get the desired performance of your controller. ![[Pasted image 20210403115459.png]]","title":"Tune the PID gains"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#use-roslaunch-to-save-your-rqt-perspective","text":"A pre-configured RQT perspective for the rrbot can be easily launched with the following command: roslaunch rrbot_control rrbot_rqt.launch You can use that as a template for doing this with your own robot.","title":"Use roslaunch to save your RQT perspective"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#connect-rviz-to-gazebo-simulation","text":"Now that you are using ros_control to send commands to your robot in simulation, you can also use the ros_control joint_state_controller to read the state of the robot from Gazebo. The idea behind a good simulator is that you should be able to use the same software on your real hardware as you do in simulation. A good starting point for that is visualizing your simulated robot in Rviz, similar to how it is done with real hardware. Assuming you are already starting a joint_state_controller as documented above in your rosparam and roslaunch files, your next step is to start Rviz: rosrun rviz rviz Under \"Global Options\" change your \"Fixed Frame\" to \"world\" to resolve any errors it might be giving you. Next, add a \"RobotModel\" display type to Rviz and you should then see your simulated robot in Gazebo being visualized in Rviz!","title":"Connect Rviz to Gazebo Simulation"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/3-Tutorial%20ROS%20Control/#demo-code","text":"The example code used for the RRBot in this tutorial is available in the repository gazebo_ros_demos .","title":"Demo Code"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/","text":"Tutorial: ROS Communication \u00b6 Gazebo provides a set of ROS API's that allows users to modify and get information about various aspects of the simulated world. In the following sections, we will demonstrate some of the utilities for manipulating the simulation world and objects. The complete list of ROS messages and services for gazebo can be found here also. \u524d\u671f\u51c6\u5907 \u00b6 \u9996\u5148\u9700\u8981\u5b89\u88c5\u4e86RRBot\u793a\u8303\u4f8b\u7a0b, \u89c1 Using URDF in Gazebo . \u786e\u4fdd\u5b89\u88c5\u4e86Gazebo roscore & rosrun gazebo_ros gazebo \u76f8\u5173\u672f\u8bed \u00b6 \u72b6\u6001\u5305\u62ec\u4f4d\u7f6e\u548c\u59ff\u6001 \u4e00\u4e2a\u5bf9\u8c61\u5177\u6709\u56fa\u6709\u5c5e\u6027,\u6bd4\u5982\u8d28\u91cf\u548c\u6469\u64e6\u7cfb\u6570\u7b49 Gazebo\u4e2d\u7684model\u5c31\u662f\u901a\u8fc7joints\u5c06\u4e00\u4e9bbody\u8fde\u63a5\u5728\u4f9d\u9760 In the following context, the pose and twist of a rigid body object is referred to as its '''state''. An object also has intrinsic '''properties''', such as mass and friction coefficients. In Gazebo, a '''body''' refers to a rigid body, synonymous to '''link''' in the URDF context. A Gazebo '''model''' is a conglomeration of bodies connected by '''joints'''. gazebo_ros_api_plugin \u63d2\u4ef6 \u00b6 gazebo_ros_api_plugin \u4f4d\u4e8e gazebo_ros \u5de5\u5177\u5305\u5185, \u7528\u4e8e\u5bf9gazebo\u8282\u70b9\u521d\u59cb\u5316. \u8be5\u63d2\u4ef6\u53ea\u548c gzserver \u4e00\u8d77\u52a0\u8f7d. \u5b83\u5c06ROS\u56de\u8c03\u8c03\u5ea6\u7a0b\u5e8f\uff08\u6d88\u606f\u4f20\u9012\uff09\u4e0eGazebo\u7684\u5185\u90e8\u8c03\u5ea6\u7a0b\u5e8f\u96c6\u6210\u5728\u4e00\u8d77\uff0c\u4ee5\u63d0\u4f9b\u4ee5\u4e0b\u6240\u8ff0\u7684ROS\u63a5\u53e3\u3002\u8be5ROS API\u4f7f\u7528\u6237\u53ef\u4ee5\u5728ROS\u4e0a\u64cd\u7eb5\u4eff\u771f\u73af\u5883\u7684\u5c5e\u6027\uff0c\u4ee5\u53ca\u5728\u73af\u5883\u4e2d\u751f\u6210\u548c\u53cd\u601d\u6a21\u578b\u7684\u72b6\u6001\u3002 \u5173\u4e8e gazebo_ros_paths_plugin \u63d2\u4ef6 \u00b6 \u8be5 gazebo_ros_paths_plugin \u540c\u6837\u4f4d\u4e8e gazebo_ros \u5de5\u5177\u5305\u5185, \u7528\u4e8e\u5141\u8bb8Gazebo\u67e5\u627eROS\u8d44\u6e90, \u4e5f\u5373\u89e3\u6790ROS\u8f6f\u4ef6\u5305\u8def\u5f84\u540d. \u8be5\u63d2\u4ef6\u548c gzserver and gzclient \u4e00\u8d77\u52a0\u8f7d. Gazebo \u53d1\u5e03\u7684\u53c2\u6570 \u00b6 \u53c2\u6570\uff1a /use_sim_time \uff1a Bool -\u901a\u77e5ROS\u5c06 /clock \u53d1\u5e03\u7684\u8bdd\u9898\u7528\u4e8eROS\u65f6\u95f4\u3002 Gazebo uses the ROS parameter server to notify other applications, particularly Rviz, if simulation time should be used via the /use_sim_time parameter. This should be set automatically by Gazebo as true when you start gazebo_ros /use_sim_time is true if gazebo_ros is publishing to the ROS /clock topic in order to provide a ROS system with simulation-synchronized time. For more info on simulation time, see ROS C++ Time . \u67e5\u770b\u53c2\u6570\u503c \u00b6 \u67e5\u770b\u53c2\u6570 rosparam get /use_sim_time Gazebo \u8ba2\u9605\u7684\u8bdd\u9898 \u00b6 \u8bdd\u9898 ~/set_link_state : gazebo_msgs/LinkState - Sets the state (pose/twist) of a link. ~/set_model_state : gazebo_msgs/ModelState - Sets the state (pose/twist) of a model. \u901a\u8fc7\u8bdd\u9898\u8bbe\u7f6e\u6a21\u578b\u4f4d\u7f6e\u548c\u59ff\u6001 \u00b6 \u4e3b\u9898 \u53ef\u7528\u4e8e\u5feb\u901f\u8bbe\u7f6e\u6a21\u578b\u7684\u59ff\u52bf\u548c\u626d\u66f2\uff0c\u800c\u65e0\u9700\u7b49\u5f85\u59ff\u52bf\u8bbe\u7f6e\u64cd\u4f5c\u5b8c\u6210\u3002\u4e3a\u6b64\uff0c\u5c06\u6240\u9700\u7684 \u6a21\u578b\u72b6\u6001\u6d88\u606f \u53d1\u5e03\u5230\u4e3b\u9898\u3002\u4f8b\u5982\uff0c\u8981\u901a\u8fc7\u4e3b\u9898\u6d4b\u8bd5\u59ff\u52bf\u8bbe\u7f6e\uff0c\u53ef\u901a\u8fc7\u4ece\u5728\u7ebf\u6570\u636e\u5e93\u4e2d\u751f\u6210\u65b0\u6a21\u578b\u6765\u5411\u6a21\u62df\u4e2d\u6dfb\u52a0\u53ef\u4e50\u7f50\uff1a /gazebo/set_model_state Topics \u53ef\u7528\u4e8e\u5feb\u901f\u8bbe\u7f6e\u6a21\u578b\u7684\u59ff\u52bf\u548c\u626d\u66f2\uff0c\u800c\u65e0\u9700\u7b49\u5f85\u59ff\u52bf\u8bbe\u7f6e\u64cd\u4f5c\u5b8c\u6210\u3002 \u9996\u5148\u53ef\u4ee5\u53d1\u5e03\u4e00\u4e2a model state message \u5230 /gazebo/set_model_state \u8bdd\u9898\u4e2d. \u6bd4\u5982,\u6dfb\u52a0\u4e00\u4e2acoke\u5230\u4eff\u771f\u573a\u666f\u4e2d, \u7136\u540e\u901a\u8fc7\u53d1\u5e03\u8bdd\u9898\u7684\u65b9\u5f0f\u8bbe\u7f6ecoke\u7684\u4f4d\u7f6e rosrun gazebo_ros spawn_model -sdf -database coke_can -model coke_can -y 1 rostopic pub -r 20 /gazebo/set_model_state gazebo_msgs/ModelState '{model_name: coke_can, pose: { position: { x: 1, y: 0, z: 2 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: { x: 0, y: 0, z: 0 }, angular: { x: 0, y: 0, z: 0} }, reference_frame: world }' You should see the coke can hovering in front of the RRBot, just asking to be hit (we'll get there). Gazebo \u53d1\u5e03\u7684\u8bdd\u9898 \u00b6 /clock : rosgraph_msgs/Clock - \u53d1\u5e03\u4eff\u771f\u65f6\u95f4, \u548c /use_sim_time \u53c2\u6570\u4e00\u8d77\u4f7f\u7528 ~/link_states : gazebo_msgs/LinkStates - \u53d1\u5e03\u6240\u6709link\u5728\u4eff\u771f\u65f6\u7684\u72b6\u6001 ~/model_states : gazebo_msgs/ModelStates - \u53d1\u5e03\u6a21\u578b\u5728\u4eff\u771f\u65f6\u7684\u72b6\u6001 \u5229\u7528\u8bdd\u9898\u67e5\u770b\u6a21\u578b\u548clink\u72b6\u6001 \u00b6 Gazebo\u53d1\u5e03\u7684 /gazebo/link_states and /gazebo/model_states \u8bdd\u9898\u5305\u542b\u53c8\u5bf9\u8c61\u5728gazebo\u4e16\u754c\u5750\u6807\u7cfb\u7684\u4f4d\u7f6e\u548c\u59ff\u6001. \u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u547d\u4ee4\u8fdb\u884c\u67e5\u770b: rostopic echo -n 1 /gazebo/model_states rostopic echo -n 1 /gazebo/link_states \u91cd\u7533\u4e00\u4e0b\uff0c\u201c\u94fe\u63a5\u201d\u88ab\u5b9a\u4e49\u4e3a\u5177\u6709\u7ed9\u5b9a\u60ef\u6027\uff0c\u89c6\u89c9\u548c\u78b0\u649e\u5c5e\u6027\u7684\u521a\u4f53\u3002\u800c\u201c\u6a21\u578b\u201d\u5b9a\u4e49\u4e3a\u94fe\u63a5\u548c\u5173\u8282\u7684\u96c6\u5408\u3002\u201c\u201d\u6a21\u578b\u201d\u7684\u72b6\u6001\u662f\u5176\u89c4\u8303\u201c\u201d\u94fe\u63a5\u201d\u201d\u7684\u72b6\u6001\u3002\u5047\u5b9aURDF\u5f3a\u5236\u91c7\u7528\u6811\u7ed3\u6784\uff0c\u5219\u6a21\u578b\u7684\u89c4\u8303\u94fe\u63a5\u7531\u5176\u6839\u94fe\u63a5\u5b9a\u4e49\u3002 \u670d\u52a1\uff1a\u5728\u4eff\u771f\u4e2d\u521b\u5efa\u548c\u9500\u6bc1\u6a21\u578b \u00b6 \u4e0b\u9762\u7684services\u53ef\u4ee5\u7528\u4e8e\u4ea7\u751f\u6216\u8005\u9500\u6bc1\u6a21\u578b ~/spawn_urdf_model : gazebo_msgs/SpawnModel - Use this service to spawn a Universal Robotic Description Format (URDF) ~/spawn_sdf_model : gazebo_msgs/SpawnModel - Use this service to spawn a model written in Gazebo Simulation Description Format (SDF) ~/delete_model : gazebo_msgs/DeleteModel - This service allows the user to delete a model from simulation. Spawn Model \u7528\u6cd5 \u00b6 \u76f8\u5173\u6559\u7a0b: Using roslaunch Files to Spawn Models A helper script called spawn_model is provided for calling the model spawning services offered by gazebo_ros . The most practical method for spawning a model using the service call method is with a roslaunch file. Details are provided in the tutorial. There are many ways to use spawn_model to add URDFs and SDFs to Gazebo. The following are a few of the examples: Spawn a URDF from file - first convert .xacro file to .xml then spawn: rosrun xacro xacro `rospack find rrbot_description`/urdf/rrbot.xacro >> `rospack find rrbot_description`/urdf/rrbot.xml rosrun gazebo_ros spawn_model -file `rospack find rrbot_description`/urdf/rrbot.xml -urdf -y 1 -model rrbot1 -robot_namespace rrbot1 URDF from parameter server using roslaunch and xacro: See Using roslaunch Files to Spawn Models SDF from local model database: rosrun gazebo_ros spawn_model -file `echo $GAZEBO_MODEL_PATH`/coke_can/model.sdf -sdf -model coke_can1 -y 0.2 -x -0.3 SDF from the online model database: rosrun gazebo_ros spawn_model -database coke_can -sdf -model coke_can3 -y 2.2 -x -0.3 To see all of the available arguments for spawn_model including namespaces, trimesh properties, joint positions and RPY orientation run: rosrun gazebo_ros spawn_model -h TIPS : spwan_mode\u7684\u7528\u6cd5 mdeng1985@LAPTOP-T9AM7QKA:~/catkin_ws$ rosrun gazebo_ros spawn_model -h usage: spawn_model [ -h ] ( -urdf | -sdf ) ( -file FILE_NAME | -param PARAM_NAME | -database MODEL_NAME | -stdin ) -model MODEL_NAME [ -reference_frame REFERENCE_FRAME ] [ -gazebo_namespace GAZEBO_NAMESPACE ] [ -robot_namespace ROBOT_NAMESPACE ] [ -unpause ] [ -wait MODEL_NAME ] [ -x X ] [ -y Y ] [ -z Z ] [ -R R ] [ -P P ] [ -Y Y ] [ -J JOINT_NAME JOINT_POSITION ] [ -package_to_model ] [ -b ] Spawn a model in gazebo using the ROS API optional arguments: -h, --help show this help message and exit -urdf Incoming xml is in urdf format -sdf Incoming xml is in sdf format -file FILE_NAME Load model xml from file -param PARAM_NAME Load model xml from ROS parameter -database MODEL_NAME Load model XML from specified model in Gazebo Model Database -stdin Load model from stdin -model MODEL_NAME Name of model to spawn -reference_frame REFERENCE_FRAME Name of the model/body where initial pose is defined. If left empty or specified as \"world\" , gazebo world frame is used -gazebo_namespace GAZEBO_NAMESPACE ROS namespace of gazebo offered ROS interfaces. Defaults to /gazebo/ -robot_namespace ROBOT_NAMESPACE change ROS namespace of gazebo-plugins -unpause !!!Experimental!!! unpause physics after spawning model -wait MODEL_NAME !!!Experimental!!! wait for model to exist -x X x component of initial position, meters -y Y y component of initial position, meters -z Z z component of initial position, meters -R R roll angle of initial orientation, radians -P P pitch angle of initial orientation, radians -Y Y yaw angle of initial orientation, radians -J JOINT_NAME JOINT_POSITION initialize the specified joint at the specified position -package_to_model convert urdf <mesh filename = \"package://...\" to <mesh filename = \"model://...\" -b bond to gazebo and delete the model when this program is interrupted mdeng1985@LAPTOP-T9AM7QKA:~/catkin_ws$ \u5220\u9664\u6a21\u578b \u00b6 Deleting models that are already in Gazebo is easier as long as you know the model name you gave the object. If you spawned a rrbot named \"rrbot1\" as described in the previous section, you can remove it with: rosservice call gazebo/delete_model '{model_name: rrbot1}' \u670d\u52a1: \u8bbe\u7f6e\u72b6\u6001\u548c\u5c5e\u6027 \u00b6 These services allow the user to set state and property information about simulation and objects in simulation: ~/set_link_properties : gazebo_msgs/SetLinkProperties ~/set_physics_properties : gazebo_msgs/SetPhysicsProperties ~/set_model_state : gazebo_msgs/SetModelState ~/set_model_configuration : gazebo_msgs/SetModelConfiguration - This service allows the user to set model joint positions without invoking dynamics. ~/set_joint_properties : gazebo_msgs/SetJointProperties` ~/set_link_state : gazebo_msgs/SetLinkState ~/set_link_state : gazebo_msgs/LinkState ~/set_model_state : gazebo_msgs/ModelState \u793a\u4f8b \u00b6 \u6dfb\u52a0\u4e00\u4e2acoke_can1\u6a21\u578b rosrun gazebo_ros spawn_model -sdf -database coke_can -model coke_can1 -y 1 \u8bbe\u7f6ecoke_can1\u7684\u72b6\u6001 rosservice call /gazebo/set_model_state '{model_state: { model_name: coke_can, pose: { position: { x: 0.3, y: 0.2 ,z: 0 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }' \u9a71\u52a8rrbot\u8e22\u98decoke_can1 rosservice call /gazebo/set_model_state '{model_state: { model_name: rrbot, pose: { position: { x: 1, y: 1 ,z: 10 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }' \u670d\u52a1: \u83b7\u53d6\u72b6\u6001\u548c\u5c5e\u6027 \u00b6 ~/get_model_properties : gazebo_msgs/GetModelProperties - This service returns the properties of a model in simulation. ~/get_model_state : gazebo_msgs/GetModelState - This service returns the states of a model in simulation. ~/get_world_properties : gazebo_msgs/GetWorldProperties - This service returns the properties of the simulation world. ~/get_joint_properties : gazebo_msgs/GetJointProperties - This service returns the properties of a joint in simulation. ~/get_link_properties : gazebo_msgs/GetLinkProperties - This service returns the properties of a link in simulation. ~/get_link_state : gazebo_msgs/GetLinkState - This service returns the states of a link in simulation. ~/get_physics_properties : gazebo_msgs/GetPhysicsProperties - This service returns the properties of the physics engine used in simulation. ~/link_states : gazebo_msgs/LinkStates - Publish complete link states in world frame ~/model_states : gazebo_msgs/ModelStates - Publish complete model states in world frame \u6ce8\u610f \u00b6 link_names are in gazebo scoped name notation, [model_name::body_name] \u83b7\u53d6\u6a21\u578b\u72b6\u6001\u793a\u4f8b \u00b6 \u8981\u5f97\u5230\u521a\u624d\u8e22\u8d70\u7684\u53ef\u4e50\u74f6\u72b6\u6001 rosservice call gazebo/get_model_state '{model_name: coke_can}' \u53ef\u4ee5\u5f97\u5230\u7c7b\u4f3c\u5982\u4e0b\u7684\u4fe1\u606f pose: position: x: -10.3172263825 y: -1.95098702647 z: -0.00413857755159 orientation: x: -0.0218349987011 y: -0.00515029763403 z: 0.545795377598 w: 0.83761811887 twist: linear: x: -0.000385525262354 y: -0.000344915539911 z: -0.00206406538336 angular: x: -0.104256200218 y: 0.0370371098566 z: 0.0132837766211 success: True \u5f97\u5230\u4eff\u771f\u4e16\u754c\u548c\u76ee\u6807\u7684\u5c5e\u6027 \u00b6 You can get a list of models (ground_plane, coke cane, rrbot) in the world by running: rosservice call gazebo/get_world_properties sim_time: 1013.366 model_names: ['ground_plane', 'rrbot', 'coke_can'] rendering_enabled: True success: True status_message: GetWorldProperties: got properties and retrieve details of a specific model by rosservice call gazebo/get_model_properties '{model_name: rrbot}' parent_model_name: '' canonical_body_name: '' body_names: ['link1', 'link2', 'link3'] geom_names: ['link1_geom', 'link2_geom', 'link3_geom', 'link3_geom_camera_link', 'link3_geom_hokuyo_link'] joint_names: ['fixed', 'joint1', 'joint2'] child_model_names: [] is_static: False success: True status_message: GetModelProperties: got properties \u670d\u52a1: \u529b\u63a7\u5236 \u00b6 ~/apply_body_wrench : gazebo_msgs/ApplyBodyWrench - Apply wrench to a body in simulation. All active wrenches applied to the same body are cumulative. ~/apply_joint_effort : gazebo_msgs/ApplyJointEffort - Apply effort to a joint in simulation. All active efforts applied to the same joint are cumulative. ~/clear_joint_forces : gazebo_msgs/JointRequest - Clear applied efforts to a joint. ~/clear_body_wrenches : gazebo_msgs/ClearBodyWrenches - Clear applied wrench to a body. \u5bf9link\u65bd\u52a0\u529b\u77e9 \u00b6 \u9996\u5148\u628a\u524d\u9762\u7684\u53ef\u4e50\u5bf9\u8c61\u5220\u9664\u4e86 rosservice call gazebo/delete_model '{model_name: coke_can}' rosservice call gazebo/delete_model '{model_name: coke_can1}' \u6dfb\u52a0\u65b0\u7684\u53ef\u4e50\u5bf9\u8c61 rosrun gazebo_ros spawn_model -sdf -database coke_can -model coke_can -y 1 \u7ed9o /gazebo/set_physics_properties \u53d1\u9001\u4e00\u4e2a\u670d\u52a1, \u5173\u95ed\u5f15\u529b rosservice call /gazebo/set_physics_properties \" time_step: 0.001 max_update_rate: 1000.0 gravity: x: 0.0 y: 0.0 z: 0.0 ode_config: auto_disable_bodies: False sor_pgs_precon_iters: 0 sor_pgs_iters: 50 sor_pgs_w: 1.3 sor_pgs_rms_error_tol: 0.0 contact_surface_layer: 0.001 contact_max_correcting_vel: 100.0 cfm: 0.0 erp: 0.2 max_contacts: 20\" \u8c03\u7528 /gazebo/apply_body_wrench \u670d\u52a1,\u7ed9\u53ef\u4e50\u65bd\u52a00.01 Nm\u7684\u626d\u77e9\uff0c\u6301\u7eed1\u79d2\u949f\uff0c\u60a8\u5c06\u770b\u5230\u53ef\u4e50\u7f50\u6cbfx\u8f74\u6b63\u65b9\u5411\u65cb\u8f6c\uff1a rosservice call /gazebo/apply_body_wrench '{body_name: \"coke_can::link\" , wrench: { torque: { x: 0.01, y: 0 , z: 0 } }, start_time: 10000000000, duration: 1000000000 }' \u65bd\u52a0\u8d1f\u5411\u529b\u77e9 \u6e05\u9664\u529b\u77e9 rosservice call /gazebo/clear_body_wrenches '{body_name: \"coke_can::link\"}' \u5bf9\u5173\u8282\u65bd\u52a0\u529b\u77e9 \u00b6 Call /gazebo/apply_joint_effort to apply torque to the joint rosservice call /gazebo/apply_joint_effort \"joint_name: 'joint2' effort: 10.0 start_time: secs: 0 nsecs: 0 duration: secs: 10 nsecs: 0\" \u6e05\u9664\u529b\u77e9: rosservice call /gazebo/clear_joint_forces '{joint_name: joint2}' \u670d\u52a1: \u4eff\u771f\u63a7\u5236 \u00b6 These services allow the user to pause and unpause physics in simulation: ~/pause_physics : std_srvs/Empty - Pause physics updates. ~/unpause_physics : std_srvs/Empty - Resume physics updates. ~/reset_simulation : std_srvs/Empty - Resets the entire simulation including the time ~/reset_world : std_srvs/Empty - Resets the model's poses \u6682\u505c\u4eff\u771f \u00b6 Say you want to get a good screenshot of your soda can flying in the air. You can pause the physics engine by calling: rosservice call gazebo/pause_physics When simulation is paused, simulation time is stopped and objects become static. However, Gazebo's internal update loop (such as custom dynamic plugin updates) are still running, but given that the simulation time is not changing, anything throttled by simulation time will not update. To resume simulation, unpause the physic engine by calling: rosservice call gazebo/unpause_physics \u4e0b\u4e00\u6b65 \u00b6 Learn how to create custom ROS plugins for Gazebo .","title":"4 Tutorial ROS Communication"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#tutorial-ros-communication","text":"Gazebo provides a set of ROS API's that allows users to modify and get information about various aspects of the simulated world. In the following sections, we will demonstrate some of the utilities for manipulating the simulation world and objects. The complete list of ROS messages and services for gazebo can be found here also.","title":"Tutorial: ROS Communication"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_1","text":"\u9996\u5148\u9700\u8981\u5b89\u88c5\u4e86RRBot\u793a\u8303\u4f8b\u7a0b, \u89c1 Using URDF in Gazebo . \u786e\u4fdd\u5b89\u88c5\u4e86Gazebo roscore & rosrun gazebo_ros gazebo","title":"\u524d\u671f\u51c6\u5907"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_2","text":"\u72b6\u6001\u5305\u62ec\u4f4d\u7f6e\u548c\u59ff\u6001 \u4e00\u4e2a\u5bf9\u8c61\u5177\u6709\u56fa\u6709\u5c5e\u6027,\u6bd4\u5982\u8d28\u91cf\u548c\u6469\u64e6\u7cfb\u6570\u7b49 Gazebo\u4e2d\u7684model\u5c31\u662f\u901a\u8fc7joints\u5c06\u4e00\u4e9bbody\u8fde\u63a5\u5728\u4f9d\u9760 In the following context, the pose and twist of a rigid body object is referred to as its '''state''. An object also has intrinsic '''properties''', such as mass and friction coefficients. In Gazebo, a '''body''' refers to a rigid body, synonymous to '''link''' in the URDF context. A Gazebo '''model''' is a conglomeration of bodies connected by '''joints'''.","title":"\u76f8\u5173\u672f\u8bed"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#gazebo_ros_api_plugin","text":"gazebo_ros_api_plugin \u4f4d\u4e8e gazebo_ros \u5de5\u5177\u5305\u5185, \u7528\u4e8e\u5bf9gazebo\u8282\u70b9\u521d\u59cb\u5316. \u8be5\u63d2\u4ef6\u53ea\u548c gzserver \u4e00\u8d77\u52a0\u8f7d. \u5b83\u5c06ROS\u56de\u8c03\u8c03\u5ea6\u7a0b\u5e8f\uff08\u6d88\u606f\u4f20\u9012\uff09\u4e0eGazebo\u7684\u5185\u90e8\u8c03\u5ea6\u7a0b\u5e8f\u96c6\u6210\u5728\u4e00\u8d77\uff0c\u4ee5\u63d0\u4f9b\u4ee5\u4e0b\u6240\u8ff0\u7684ROS\u63a5\u53e3\u3002\u8be5ROS API\u4f7f\u7528\u6237\u53ef\u4ee5\u5728ROS\u4e0a\u64cd\u7eb5\u4eff\u771f\u73af\u5883\u7684\u5c5e\u6027\uff0c\u4ee5\u53ca\u5728\u73af\u5883\u4e2d\u751f\u6210\u548c\u53cd\u601d\u6a21\u578b\u7684\u72b6\u6001\u3002","title":"gazebo_ros_api_plugin\u63d2\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#gazebo_ros_paths_plugin","text":"\u8be5 gazebo_ros_paths_plugin \u540c\u6837\u4f4d\u4e8e gazebo_ros \u5de5\u5177\u5305\u5185, \u7528\u4e8e\u5141\u8bb8Gazebo\u67e5\u627eROS\u8d44\u6e90, \u4e5f\u5373\u89e3\u6790ROS\u8f6f\u4ef6\u5305\u8def\u5f84\u540d. \u8be5\u63d2\u4ef6\u548c gzserver and gzclient \u4e00\u8d77\u52a0\u8f7d.","title":"\u5173\u4e8egazebo_ros_paths_plugin\u63d2\u4ef6"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#gazebo","text":"\u53c2\u6570\uff1a /use_sim_time \uff1a Bool -\u901a\u77e5ROS\u5c06 /clock \u53d1\u5e03\u7684\u8bdd\u9898\u7528\u4e8eROS\u65f6\u95f4\u3002 Gazebo uses the ROS parameter server to notify other applications, particularly Rviz, if simulation time should be used via the /use_sim_time parameter. This should be set automatically by Gazebo as true when you start gazebo_ros /use_sim_time is true if gazebo_ros is publishing to the ROS /clock topic in order to provide a ROS system with simulation-synchronized time. For more info on simulation time, see ROS C++ Time .","title":"Gazebo \u53d1\u5e03\u7684\u53c2\u6570"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_3","text":"\u67e5\u770b\u53c2\u6570 rosparam get /use_sim_time","title":"\u67e5\u770b\u53c2\u6570\u503c"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#gazebo_1","text":"\u8bdd\u9898 ~/set_link_state : gazebo_msgs/LinkState - Sets the state (pose/twist) of a link. ~/set_model_state : gazebo_msgs/ModelState - Sets the state (pose/twist) of a model.","title":"Gazebo \u8ba2\u9605\u7684\u8bdd\u9898"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_4","text":"\u4e3b\u9898 \u53ef\u7528\u4e8e\u5feb\u901f\u8bbe\u7f6e\u6a21\u578b\u7684\u59ff\u52bf\u548c\u626d\u66f2\uff0c\u800c\u65e0\u9700\u7b49\u5f85\u59ff\u52bf\u8bbe\u7f6e\u64cd\u4f5c\u5b8c\u6210\u3002\u4e3a\u6b64\uff0c\u5c06\u6240\u9700\u7684 \u6a21\u578b\u72b6\u6001\u6d88\u606f \u53d1\u5e03\u5230\u4e3b\u9898\u3002\u4f8b\u5982\uff0c\u8981\u901a\u8fc7\u4e3b\u9898\u6d4b\u8bd5\u59ff\u52bf\u8bbe\u7f6e\uff0c\u53ef\u901a\u8fc7\u4ece\u5728\u7ebf\u6570\u636e\u5e93\u4e2d\u751f\u6210\u65b0\u6a21\u578b\u6765\u5411\u6a21\u62df\u4e2d\u6dfb\u52a0\u53ef\u4e50\u7f50\uff1a /gazebo/set_model_state Topics \u53ef\u7528\u4e8e\u5feb\u901f\u8bbe\u7f6e\u6a21\u578b\u7684\u59ff\u52bf\u548c\u626d\u66f2\uff0c\u800c\u65e0\u9700\u7b49\u5f85\u59ff\u52bf\u8bbe\u7f6e\u64cd\u4f5c\u5b8c\u6210\u3002 \u9996\u5148\u53ef\u4ee5\u53d1\u5e03\u4e00\u4e2a model state message \u5230 /gazebo/set_model_state \u8bdd\u9898\u4e2d. \u6bd4\u5982,\u6dfb\u52a0\u4e00\u4e2acoke\u5230\u4eff\u771f\u573a\u666f\u4e2d, \u7136\u540e\u901a\u8fc7\u53d1\u5e03\u8bdd\u9898\u7684\u65b9\u5f0f\u8bbe\u7f6ecoke\u7684\u4f4d\u7f6e rosrun gazebo_ros spawn_model -sdf -database coke_can -model coke_can -y 1 rostopic pub -r 20 /gazebo/set_model_state gazebo_msgs/ModelState '{model_name: coke_can, pose: { position: { x: 1, y: 0, z: 2 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: { x: 0, y: 0, z: 0 }, angular: { x: 0, y: 0, z: 0} }, reference_frame: world }' You should see the coke can hovering in front of the RRBot, just asking to be hit (we'll get there).","title":"\u901a\u8fc7\u8bdd\u9898\u8bbe\u7f6e\u6a21\u578b\u4f4d\u7f6e\u548c\u59ff\u6001"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#gazebo_2","text":"/clock : rosgraph_msgs/Clock - \u53d1\u5e03\u4eff\u771f\u65f6\u95f4, \u548c /use_sim_time \u53c2\u6570\u4e00\u8d77\u4f7f\u7528 ~/link_states : gazebo_msgs/LinkStates - \u53d1\u5e03\u6240\u6709link\u5728\u4eff\u771f\u65f6\u7684\u72b6\u6001 ~/model_states : gazebo_msgs/ModelStates - \u53d1\u5e03\u6a21\u578b\u5728\u4eff\u771f\u65f6\u7684\u72b6\u6001","title":"Gazebo \u53d1\u5e03\u7684\u8bdd\u9898"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#link","text":"Gazebo\u53d1\u5e03\u7684 /gazebo/link_states and /gazebo/model_states \u8bdd\u9898\u5305\u542b\u53c8\u5bf9\u8c61\u5728gazebo\u4e16\u754c\u5750\u6807\u7cfb\u7684\u4f4d\u7f6e\u548c\u59ff\u6001. \u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u547d\u4ee4\u8fdb\u884c\u67e5\u770b: rostopic echo -n 1 /gazebo/model_states rostopic echo -n 1 /gazebo/link_states \u91cd\u7533\u4e00\u4e0b\uff0c\u201c\u94fe\u63a5\u201d\u88ab\u5b9a\u4e49\u4e3a\u5177\u6709\u7ed9\u5b9a\u60ef\u6027\uff0c\u89c6\u89c9\u548c\u78b0\u649e\u5c5e\u6027\u7684\u521a\u4f53\u3002\u800c\u201c\u6a21\u578b\u201d\u5b9a\u4e49\u4e3a\u94fe\u63a5\u548c\u5173\u8282\u7684\u96c6\u5408\u3002\u201c\u201d\u6a21\u578b\u201d\u7684\u72b6\u6001\u662f\u5176\u89c4\u8303\u201c\u201d\u94fe\u63a5\u201d\u201d\u7684\u72b6\u6001\u3002\u5047\u5b9aURDF\u5f3a\u5236\u91c7\u7528\u6811\u7ed3\u6784\uff0c\u5219\u6a21\u578b\u7684\u89c4\u8303\u94fe\u63a5\u7531\u5176\u6839\u94fe\u63a5\u5b9a\u4e49\u3002","title":"\u5229\u7528\u8bdd\u9898\u67e5\u770b\u6a21\u578b\u548clink\u72b6\u6001"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_5","text":"\u4e0b\u9762\u7684services\u53ef\u4ee5\u7528\u4e8e\u4ea7\u751f\u6216\u8005\u9500\u6bc1\u6a21\u578b ~/spawn_urdf_model : gazebo_msgs/SpawnModel - Use this service to spawn a Universal Robotic Description Format (URDF) ~/spawn_sdf_model : gazebo_msgs/SpawnModel - Use this service to spawn a model written in Gazebo Simulation Description Format (SDF) ~/delete_model : gazebo_msgs/DeleteModel - This service allows the user to delete a model from simulation.","title":"\u670d\u52a1\uff1a\u5728\u4eff\u771f\u4e2d\u521b\u5efa\u548c\u9500\u6bc1\u6a21\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#spawn-model","text":"\u76f8\u5173\u6559\u7a0b: Using roslaunch Files to Spawn Models A helper script called spawn_model is provided for calling the model spawning services offered by gazebo_ros . The most practical method for spawning a model using the service call method is with a roslaunch file. Details are provided in the tutorial. There are many ways to use spawn_model to add URDFs and SDFs to Gazebo. The following are a few of the examples: Spawn a URDF from file - first convert .xacro file to .xml then spawn: rosrun xacro xacro `rospack find rrbot_description`/urdf/rrbot.xacro >> `rospack find rrbot_description`/urdf/rrbot.xml rosrun gazebo_ros spawn_model -file `rospack find rrbot_description`/urdf/rrbot.xml -urdf -y 1 -model rrbot1 -robot_namespace rrbot1 URDF from parameter server using roslaunch and xacro: See Using roslaunch Files to Spawn Models SDF from local model database: rosrun gazebo_ros spawn_model -file `echo $GAZEBO_MODEL_PATH`/coke_can/model.sdf -sdf -model coke_can1 -y 0.2 -x -0.3 SDF from the online model database: rosrun gazebo_ros spawn_model -database coke_can -sdf -model coke_can3 -y 2.2 -x -0.3 To see all of the available arguments for spawn_model including namespaces, trimesh properties, joint positions and RPY orientation run: rosrun gazebo_ros spawn_model -h TIPS : spwan_mode\u7684\u7528\u6cd5 mdeng1985@LAPTOP-T9AM7QKA:~/catkin_ws$ rosrun gazebo_ros spawn_model -h usage: spawn_model [ -h ] ( -urdf | -sdf ) ( -file FILE_NAME | -param PARAM_NAME | -database MODEL_NAME | -stdin ) -model MODEL_NAME [ -reference_frame REFERENCE_FRAME ] [ -gazebo_namespace GAZEBO_NAMESPACE ] [ -robot_namespace ROBOT_NAMESPACE ] [ -unpause ] [ -wait MODEL_NAME ] [ -x X ] [ -y Y ] [ -z Z ] [ -R R ] [ -P P ] [ -Y Y ] [ -J JOINT_NAME JOINT_POSITION ] [ -package_to_model ] [ -b ] Spawn a model in gazebo using the ROS API optional arguments: -h, --help show this help message and exit -urdf Incoming xml is in urdf format -sdf Incoming xml is in sdf format -file FILE_NAME Load model xml from file -param PARAM_NAME Load model xml from ROS parameter -database MODEL_NAME Load model XML from specified model in Gazebo Model Database -stdin Load model from stdin -model MODEL_NAME Name of model to spawn -reference_frame REFERENCE_FRAME Name of the model/body where initial pose is defined. If left empty or specified as \"world\" , gazebo world frame is used -gazebo_namespace GAZEBO_NAMESPACE ROS namespace of gazebo offered ROS interfaces. Defaults to /gazebo/ -robot_namespace ROBOT_NAMESPACE change ROS namespace of gazebo-plugins -unpause !!!Experimental!!! unpause physics after spawning model -wait MODEL_NAME !!!Experimental!!! wait for model to exist -x X x component of initial position, meters -y Y y component of initial position, meters -z Z z component of initial position, meters -R R roll angle of initial orientation, radians -P P pitch angle of initial orientation, radians -Y Y yaw angle of initial orientation, radians -J JOINT_NAME JOINT_POSITION initialize the specified joint at the specified position -package_to_model convert urdf <mesh filename = \"package://...\" to <mesh filename = \"model://...\" -b bond to gazebo and delete the model when this program is interrupted mdeng1985@LAPTOP-T9AM7QKA:~/catkin_ws$","title":"Spawn Model \u7528\u6cd5"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_6","text":"Deleting models that are already in Gazebo is easier as long as you know the model name you gave the object. If you spawned a rrbot named \"rrbot1\" as described in the previous section, you can remove it with: rosservice call gazebo/delete_model '{model_name: rrbot1}'","title":"\u5220\u9664\u6a21\u578b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_7","text":"These services allow the user to set state and property information about simulation and objects in simulation: ~/set_link_properties : gazebo_msgs/SetLinkProperties ~/set_physics_properties : gazebo_msgs/SetPhysicsProperties ~/set_model_state : gazebo_msgs/SetModelState ~/set_model_configuration : gazebo_msgs/SetModelConfiguration - This service allows the user to set model joint positions without invoking dynamics. ~/set_joint_properties : gazebo_msgs/SetJointProperties` ~/set_link_state : gazebo_msgs/SetLinkState ~/set_link_state : gazebo_msgs/LinkState ~/set_model_state : gazebo_msgs/ModelState","title":"\u670d\u52a1: \u8bbe\u7f6e\u72b6\u6001\u548c\u5c5e\u6027"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_8","text":"\u6dfb\u52a0\u4e00\u4e2acoke_can1\u6a21\u578b rosrun gazebo_ros spawn_model -sdf -database coke_can -model coke_can1 -y 1 \u8bbe\u7f6ecoke_can1\u7684\u72b6\u6001 rosservice call /gazebo/set_model_state '{model_state: { model_name: coke_can, pose: { position: { x: 0.3, y: 0.2 ,z: 0 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }' \u9a71\u52a8rrbot\u8e22\u98decoke_can1 rosservice call /gazebo/set_model_state '{model_state: { model_name: rrbot, pose: { position: { x: 1, y: 1 ,z: 10 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: {x: 0.0 , y: 0 ,z: 0 } , angular: { x: 0.0 , y: 0 , z: 0.0 } } , reference_frame: world } }'","title":"\u793a\u4f8b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_9","text":"~/get_model_properties : gazebo_msgs/GetModelProperties - This service returns the properties of a model in simulation. ~/get_model_state : gazebo_msgs/GetModelState - This service returns the states of a model in simulation. ~/get_world_properties : gazebo_msgs/GetWorldProperties - This service returns the properties of the simulation world. ~/get_joint_properties : gazebo_msgs/GetJointProperties - This service returns the properties of a joint in simulation. ~/get_link_properties : gazebo_msgs/GetLinkProperties - This service returns the properties of a link in simulation. ~/get_link_state : gazebo_msgs/GetLinkState - This service returns the states of a link in simulation. ~/get_physics_properties : gazebo_msgs/GetPhysicsProperties - This service returns the properties of the physics engine used in simulation. ~/link_states : gazebo_msgs/LinkStates - Publish complete link states in world frame ~/model_states : gazebo_msgs/ModelStates - Publish complete model states in world frame","title":"\u670d\u52a1: \u83b7\u53d6\u72b6\u6001\u548c\u5c5e\u6027"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_10","text":"link_names are in gazebo scoped name notation, [model_name::body_name]","title":"\u6ce8\u610f"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_11","text":"\u8981\u5f97\u5230\u521a\u624d\u8e22\u8d70\u7684\u53ef\u4e50\u74f6\u72b6\u6001 rosservice call gazebo/get_model_state '{model_name: coke_can}' \u53ef\u4ee5\u5f97\u5230\u7c7b\u4f3c\u5982\u4e0b\u7684\u4fe1\u606f pose: position: x: -10.3172263825 y: -1.95098702647 z: -0.00413857755159 orientation: x: -0.0218349987011 y: -0.00515029763403 z: 0.545795377598 w: 0.83761811887 twist: linear: x: -0.000385525262354 y: -0.000344915539911 z: -0.00206406538336 angular: x: -0.104256200218 y: 0.0370371098566 z: 0.0132837766211 success: True","title":"\u83b7\u53d6\u6a21\u578b\u72b6\u6001\u793a\u4f8b"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_12","text":"You can get a list of models (ground_plane, coke cane, rrbot) in the world by running: rosservice call gazebo/get_world_properties sim_time: 1013.366 model_names: ['ground_plane', 'rrbot', 'coke_can'] rendering_enabled: True success: True status_message: GetWorldProperties: got properties and retrieve details of a specific model by rosservice call gazebo/get_model_properties '{model_name: rrbot}' parent_model_name: '' canonical_body_name: '' body_names: ['link1', 'link2', 'link3'] geom_names: ['link1_geom', 'link2_geom', 'link3_geom', 'link3_geom_camera_link', 'link3_geom_hokuyo_link'] joint_names: ['fixed', 'joint1', 'joint2'] child_model_names: [] is_static: False success: True status_message: GetModelProperties: got properties","title":"\u5f97\u5230\u4eff\u771f\u4e16\u754c\u548c\u76ee\u6807\u7684\u5c5e\u6027"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_13","text":"~/apply_body_wrench : gazebo_msgs/ApplyBodyWrench - Apply wrench to a body in simulation. All active wrenches applied to the same body are cumulative. ~/apply_joint_effort : gazebo_msgs/ApplyJointEffort - Apply effort to a joint in simulation. All active efforts applied to the same joint are cumulative. ~/clear_joint_forces : gazebo_msgs/JointRequest - Clear applied efforts to a joint. ~/clear_body_wrenches : gazebo_msgs/ClearBodyWrenches - Clear applied wrench to a body.","title":"\u670d\u52a1: \u529b\u63a7\u5236"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#link_1","text":"\u9996\u5148\u628a\u524d\u9762\u7684\u53ef\u4e50\u5bf9\u8c61\u5220\u9664\u4e86 rosservice call gazebo/delete_model '{model_name: coke_can}' rosservice call gazebo/delete_model '{model_name: coke_can1}' \u6dfb\u52a0\u65b0\u7684\u53ef\u4e50\u5bf9\u8c61 rosrun gazebo_ros spawn_model -sdf -database coke_can -model coke_can -y 1 \u7ed9o /gazebo/set_physics_properties \u53d1\u9001\u4e00\u4e2a\u670d\u52a1, \u5173\u95ed\u5f15\u529b rosservice call /gazebo/set_physics_properties \" time_step: 0.001 max_update_rate: 1000.0 gravity: x: 0.0 y: 0.0 z: 0.0 ode_config: auto_disable_bodies: False sor_pgs_precon_iters: 0 sor_pgs_iters: 50 sor_pgs_w: 1.3 sor_pgs_rms_error_tol: 0.0 contact_surface_layer: 0.001 contact_max_correcting_vel: 100.0 cfm: 0.0 erp: 0.2 max_contacts: 20\" \u8c03\u7528 /gazebo/apply_body_wrench \u670d\u52a1,\u7ed9\u53ef\u4e50\u65bd\u52a00.01 Nm\u7684\u626d\u77e9\uff0c\u6301\u7eed1\u79d2\u949f\uff0c\u60a8\u5c06\u770b\u5230\u53ef\u4e50\u7f50\u6cbfx\u8f74\u6b63\u65b9\u5411\u65cb\u8f6c\uff1a rosservice call /gazebo/apply_body_wrench '{body_name: \"coke_can::link\" , wrench: { torque: { x: 0.01, y: 0 , z: 0 } }, start_time: 10000000000, duration: 1000000000 }' \u65bd\u52a0\u8d1f\u5411\u529b\u77e9 \u6e05\u9664\u529b\u77e9 rosservice call /gazebo/clear_body_wrenches '{body_name: \"coke_can::link\"}'","title":"\u5bf9link\u65bd\u52a0\u529b\u77e9"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_14","text":"Call /gazebo/apply_joint_effort to apply torque to the joint rosservice call /gazebo/apply_joint_effort \"joint_name: 'joint2' effort: 10.0 start_time: secs: 0 nsecs: 0 duration: secs: 10 nsecs: 0\" \u6e05\u9664\u529b\u77e9: rosservice call /gazebo/clear_joint_forces '{joint_name: joint2}'","title":"\u5bf9\u5173\u8282\u65bd\u52a0\u529b\u77e9"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_15","text":"These services allow the user to pause and unpause physics in simulation: ~/pause_physics : std_srvs/Empty - Pause physics updates. ~/unpause_physics : std_srvs/Empty - Resume physics updates. ~/reset_simulation : std_srvs/Empty - Resets the entire simulation including the time ~/reset_world : std_srvs/Empty - Resets the model's poses","title":"\u670d\u52a1: \u4eff\u771f\u63a7\u5236"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_16","text":"Say you want to get a good screenshot of your soda can flying in the air. You can pause the physics engine by calling: rosservice call gazebo/pause_physics When simulation is paused, simulation time is stopped and objects become static. However, Gazebo's internal update loop (such as custom dynamic plugin updates) are still running, but given that the simulation time is not changing, anything throttled by simulation time will not update. To resume simulation, unpause the physic engine by calling: rosservice call gazebo/unpause_physics","title":"\u6682\u505c\u4eff\u771f"},{"location":"ROS/6-gazebo%20%E5%AE%98%E6%96%B9tutorials/Connect%20to%20ROS/4-Tutorial%20ROS%20Communication/#_17","text":"Learn how to create custom ROS plugins for Gazebo .","title":"\u4e0b\u4e00\u6b65"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/","text":"54\uff1a ROS Control Intro: Build your own controller \u00b6 \u8bfe\u7a0b\u7f51\u5740 This notebook is additional material for the ROS Developers Live Class n.54 created and provided for free by Alberto Ezquerro and Ricardo Tellez of The Construct . You can distribute this notebook as long as you provide copy of this paragraph with it. Why this class? \u00b6 Up to this point, you are using the default controllers that the ros_control packages provide, which is the most common practice. In some cases, it may be interesting to create a custom ROS controller that sends specific commands to your joints. In today's live class, we are going to learn the following contents: 1. How to create a ROS Controller for joints 2. How to use it in your robot Pre-requisites for this live class are: * Basic knowledge of ROS concepts such as topics, publish and subscribe, ROS Service using C++ . If you don't know about it, check this course * Knowledge of C++ * Knowledge of URDF format for robot definition . If you don't know about it, check this course . * Love for Robotics * ...that's it!! Simulation to be used today \u00b6 We are going to use the Pi Robot simulation How to use this ROSject \u00b6 A ROSject is a ROS project packaged in such a way that all the material it contains ( ROS code, Gazebo simulations and Notebooks ) can be shared with any body using only a web link . That is what we did with all the attendants to the Live Class, we shared this ROSject with them (so they can have access to all the ROS material they contain). Check this webinar to learn more about ROSjects and how to create your own ROSjects . You will need to have a free account at the ROS Development Studio (ROSDS). Get the account and then follow the indications below. 0. Requirements for the controller \u00b6 It will be a controller to control effort based joints It is going to accept position values It is going to be called MyPositionController 1. Creating the package \u00b6 Create a new package named my_controller with the following dependencies: roscpp , pluginlib , controller_interface , and hardware_interface . To do that, just execute the following command: $ cd ~/ catkin_ws / src $ catkin_create_pkg my_controller roscpp pluginlib controller_interface hardware_interface 2. Creating the source code of the controller \u00b6 Inside the src folder that was created in your new package, create a file named my_controller.cpp . Let's populate it! Add the required include files \u00b6 Include the libraries that allow us to define a new controller, a new hardware interface and a new plugin #include <controller_interface/controller.h> #include <hardware_interface/joint_command_interface.h> #include <pluginlib/class_list_macros.h> #include <std_msgs/Float64.h> Add a name space for our controller \u00b6 This namespace allow us to differentiate controllers that have the same name, but different implementation (so we do not confuse ourselves): namespace my_controller_ns { } Create the class of the controller \u00b6 Since we are creating an effort controller we are going to create our controller inheriting from the hardware interface EffortJointInterface . This means that our controller has to follow that interface in order to be able to properly communicate with an effort joint in the hardware. class MyPositionController : public controller_interface :: Controller < hardware_interface :: EffortJointInterface > { }; Initialize the controller \u00b6 The init() function is called when your controller is loaded by the controller manager . Inside this function, you must: get the name of the joint that you will control from the Parameter Server first (so from the YAML file, which you will modify later) get the actual joint object that provides access to the resources of the joint. We will use that object in the realtime loop . get the value of the gain parameter start the subscriber for receiving desired joint positions bool init ( hardware_interface :: EffortJointInterface * hw , ros :: NodeHandle & n ) { std :: string my_joint ; if ( ! n . getParam ( \"joint\" , my_joint )) { ROS_ERROR ( \"Could not find joint name\" ); return false ; } joint_ = hw -> getHandle ( my_joint ); // throws on failure command_ = joint_ . getPosition (); // set the current joint goal to the current joint position // Load gain using gains set on parameter server if ( ! n . getParam ( \"gain\" , gain_ )) { ROS_ERROR ( \"Could not find the gain parameter value\" ); return false ; } // Start command subscriber sub_command_ = n . subscribe < std_msgs :: Float64 > ( \"command\" , 1 , & MyPositionController :: setCommandCB , this ); return true ; } Create the update loop \u00b6 The update loop is the control loop that is going to be executed by the controller . It is here where you put your controller code. Here you are defining the command that you are going to send to your joint. In this case, it's a product between an * error * variable and a * gain_ * variable. The error variable is defined as the difference between the current position (* joint_.getPosition() ) of the joint and the goal position ( setpoint_ *) of the joint. In this example we have put a very simple controller. You can create the controller as complex as possible, but remember not to put too much computation to prevent to break the controller loop time. void update ( const ros :: Time & time , const ros :: Duration & period ) { double error = command_ - joint_ . getPosition (); double commanded_effort = error * gain_ ; joint_ . setCommand ( commanded_effort ); } void setCommandCB ( const std_msgs :: Float64ConstPtr & msg ) { command_ = msg -> data ; } Add the start and stop functions \u00b6 You need to add two functions that will be executed during the start and stop of the controller by the controller manager. Put in those the content you want to be done for initialization of the controller and for stopping of the controller . void starting ( const ros :: Time & time ) { } void stopping ( const ros :: Time & time ) { } Add some required class members \u00b6 Those are required to make the class work private : hardware_interface :: JointHandle joint_ ; double gain_ ; double command_ ; ros :: Subscriber sub_command_ ; Register this library as a controller available \u00b6 Here, you are calling the special macro plugin PLUGINLIB_EXPORT_CLASS in order to allow this class to be dynamically loaded. PLUGINLIB_EXPORT_CLASS ( my_controller_ns :: MyPositionController , controller_interface :: ControllerBase ); More info about how the pluginlib works, here . The full controller code \u00b6 At the end, the code of your controller should look like this: #include <controller_interface/controller.h> #include <hardware_interface/joint_command_interface.h> #include <pluginlib/class_list_macros.h> #include <std_msgs/Float64.h> namespace my_controller_ns { class MyPositionController : public controller_interface :: Controller < hardware_interface :: EffortJointInterface > { bool init ( hardware_interface :: EffortJointInterface * hw , ros :: NodeHandle & n ) { std :: string my_joint ; if ( ! n . getParam ( \"joint\" , my_joint )) { ROS_ERROR ( \"Could not find joint name\" ); return false ; } joint_ = hw -> getHandle ( my_joint ); // throws on failure command_ = joint_ . getPosition (); // Load gain using gains set on parameter server if ( ! n . getParam ( \"gain\" , gain_ )) { ROS_ERROR ( \"Could not find the gain parameter value\" ); return false ; } // Start command subscriber sub_command_ = n . subscribe < std_msgs :: Float64 > ( \"command\" , 1 , & MyPositionController :: setCommandCB , this ); return true ; } void update ( const ros :: Time & time , const ros :: Duration & period ) { double error = command_ - joint_ . getPosition (); double commanded_effort = error * gain_ ; joint_ . setCommand ( commanded_effort ); } void setCommandCB ( const std_msgs :: Float64ConstPtr & msg ) { command_ = msg -> data ; } void starting ( const ros :: Time & time ) { } void stopping ( const ros :: Time & time ) { } private : hardware_interface :: JointHandle joint_ ; double gain_ ; double command_ ; ros :: Subscriber sub_command_ ; }; PLUGINLIB_EXPORT_CLASS ( my_controller_ns :: MyPositionController , controller_interface :: ControllerBase ); } 3. Compiling the controller \u00b6 Create a plugin description file \u00b6 Inside your package, create a new file named controller_plugins.xml . This file is a description of the controller plugin. It indicates the path where the library will be placed when we compile the controller, as well as the name, type, and class of the controller. Copy the following code into it: < library path = \"lib/libmy_controller_lib\" > < class name = \"my_controller/MyPositionController\" type = \"my_controller_ns::MyPositionController\" base_class_type = \"controller_interface::ControllerBase\" /> </ library > Update the package.xml file \u00b6 This line indicates that our package will provide a plugin. This is very important because if we don't add this line, the controller manager won't be able to find our new controller and load it. Go to the package.xml file of your package. Inside the <export> tag, place the following line: < controller_interface plugin = \"$ {prefix} /controller_plugins.xml\" /> Update the CMakeLists.txt file \u00b6 Go to the CMakeLists.txt file of your package. Find the add_library() and target_link_libraries() functions, and replace them with these: add_library ( my_controller_lib src / my_controller . cpp ) target_link_libraries ( my_controller_lib $ { catkin_LIBRARIES }) Build the controller \u00b6 Go to the catkin_ws directory and compile your package $ catkin_make Check that the controller has been properly registered: $ rospack plugins -- attrib = plugin controller_interface | grep my_controller You should get a response like this: my_controller / home / user / catkin_ws / src / my_controller / controller_plugins . xml 4. Launching the controller \u00b6 Let's change the controller of the head_pan_joint to use our new controller. Modify the configuration file \u00b6 Go to the controllers config file and modify the controller for the head_pan_joint to use our newly created one. head_pan_joint_position_controller : type : my_controller / MyPositionController joint : head_pan_joint gain : 0.1 Let's launch it! \u00b6 Launch it by going to Simulations->Select Launch file->main.launch . You can also launch it from a shell, by calling the launch file and the opening the Gazebo window (on Tools->Gazebo ). Launch the controllers: $ roslaunch pi_robot_pkg controllers . launch Check that the controller has been loaded properly: $ rosservice call / pi_robot / controller_manager / list_controllers \" {} \" Check the the joint works properly by sending to it a goal: $ rostopic pub / pi_robot / head_pan_joint_position_controller / command std_msgs / Float64 \"data: 1.0\" Mission completed!! \u00b6 Homework \u00b6 Add a neural controller for the left_shoulder_forward_joint joint of the Pi Robot and be able to make it move with it. the neural network takes as input the desired position and the current position takes as output the effort command to send to the joint You can use Tensorflow to build and train the network (here, a course on how to use Tensorflow with ROS ). You can generate the training data from a PID controller Send me your questions and results at rtellez@theconstructsim.com","title":"54 ROS Control Intro Build your own controller"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#54-ros-control-intro-build-your-own-controller","text":"\u8bfe\u7a0b\u7f51\u5740 This notebook is additional material for the ROS Developers Live Class n.54 created and provided for free by Alberto Ezquerro and Ricardo Tellez of The Construct . You can distribute this notebook as long as you provide copy of this paragraph with it.","title":"54\uff1a ROS Control Intro: Build your own controller"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#why-this-class","text":"Up to this point, you are using the default controllers that the ros_control packages provide, which is the most common practice. In some cases, it may be interesting to create a custom ROS controller that sends specific commands to your joints. In today's live class, we are going to learn the following contents: 1. How to create a ROS Controller for joints 2. How to use it in your robot Pre-requisites for this live class are: * Basic knowledge of ROS concepts such as topics, publish and subscribe, ROS Service using C++ . If you don't know about it, check this course * Knowledge of C++ * Knowledge of URDF format for robot definition . If you don't know about it, check this course . * Love for Robotics * ...that's it!!","title":"Why this class?"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#simulation-to-be-used-today","text":"We are going to use the Pi Robot simulation","title":"Simulation to be used today"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#how-to-use-this-rosject","text":"A ROSject is a ROS project packaged in such a way that all the material it contains ( ROS code, Gazebo simulations and Notebooks ) can be shared with any body using only a web link . That is what we did with all the attendants to the Live Class, we shared this ROSject with them (so they can have access to all the ROS material they contain). Check this webinar to learn more about ROSjects and how to create your own ROSjects . You will need to have a free account at the ROS Development Studio (ROSDS). Get the account and then follow the indications below.","title":"How to use this ROSject"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#0-requirements-for-the-controller","text":"It will be a controller to control effort based joints It is going to accept position values It is going to be called MyPositionController","title":"0. Requirements for the controller"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#1-creating-the-package","text":"Create a new package named my_controller with the following dependencies: roscpp , pluginlib , controller_interface , and hardware_interface . To do that, just execute the following command: $ cd ~/ catkin_ws / src $ catkin_create_pkg my_controller roscpp pluginlib controller_interface hardware_interface","title":"1. Creating the package"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#2-creating-the-source-code-of-the-controller","text":"Inside the src folder that was created in your new package, create a file named my_controller.cpp . Let's populate it!","title":"2. Creating the source code of the controller"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#add-the-required-include-files","text":"Include the libraries that allow us to define a new controller, a new hardware interface and a new plugin #include <controller_interface/controller.h> #include <hardware_interface/joint_command_interface.h> #include <pluginlib/class_list_macros.h> #include <std_msgs/Float64.h>","title":"Add the required include files"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#add-a-name-space-for-our-controller","text":"This namespace allow us to differentiate controllers that have the same name, but different implementation (so we do not confuse ourselves): namespace my_controller_ns { }","title":"Add a name space for our controller"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#create-the-class-of-the-controller","text":"Since we are creating an effort controller we are going to create our controller inheriting from the hardware interface EffortJointInterface . This means that our controller has to follow that interface in order to be able to properly communicate with an effort joint in the hardware. class MyPositionController : public controller_interface :: Controller < hardware_interface :: EffortJointInterface > { };","title":"Create the class of the controller"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#initialize-the-controller","text":"The init() function is called when your controller is loaded by the controller manager . Inside this function, you must: get the name of the joint that you will control from the Parameter Server first (so from the YAML file, which you will modify later) get the actual joint object that provides access to the resources of the joint. We will use that object in the realtime loop . get the value of the gain parameter start the subscriber for receiving desired joint positions bool init ( hardware_interface :: EffortJointInterface * hw , ros :: NodeHandle & n ) { std :: string my_joint ; if ( ! n . getParam ( \"joint\" , my_joint )) { ROS_ERROR ( \"Could not find joint name\" ); return false ; } joint_ = hw -> getHandle ( my_joint ); // throws on failure command_ = joint_ . getPosition (); // set the current joint goal to the current joint position // Load gain using gains set on parameter server if ( ! n . getParam ( \"gain\" , gain_ )) { ROS_ERROR ( \"Could not find the gain parameter value\" ); return false ; } // Start command subscriber sub_command_ = n . subscribe < std_msgs :: Float64 > ( \"command\" , 1 , & MyPositionController :: setCommandCB , this ); return true ; }","title":"Initialize the controller"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#create-the-update-loop","text":"The update loop is the control loop that is going to be executed by the controller . It is here where you put your controller code. Here you are defining the command that you are going to send to your joint. In this case, it's a product between an * error * variable and a * gain_ * variable. The error variable is defined as the difference between the current position (* joint_.getPosition() ) of the joint and the goal position ( setpoint_ *) of the joint. In this example we have put a very simple controller. You can create the controller as complex as possible, but remember not to put too much computation to prevent to break the controller loop time. void update ( const ros :: Time & time , const ros :: Duration & period ) { double error = command_ - joint_ . getPosition (); double commanded_effort = error * gain_ ; joint_ . setCommand ( commanded_effort ); } void setCommandCB ( const std_msgs :: Float64ConstPtr & msg ) { command_ = msg -> data ; }","title":"Create the update loop"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#add-the-start-and-stop-functions","text":"You need to add two functions that will be executed during the start and stop of the controller by the controller manager. Put in those the content you want to be done for initialization of the controller and for stopping of the controller . void starting ( const ros :: Time & time ) { } void stopping ( const ros :: Time & time ) { }","title":"Add the start and stop functions"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#add-some-required-class-members","text":"Those are required to make the class work private : hardware_interface :: JointHandle joint_ ; double gain_ ; double command_ ; ros :: Subscriber sub_command_ ;","title":"Add some required class members"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#register-this-library-as-a-controller-available","text":"Here, you are calling the special macro plugin PLUGINLIB_EXPORT_CLASS in order to allow this class to be dynamically loaded. PLUGINLIB_EXPORT_CLASS ( my_controller_ns :: MyPositionController , controller_interface :: ControllerBase ); More info about how the pluginlib works, here .","title":"Register this library as a controller available"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#the-full-controller-code","text":"At the end, the code of your controller should look like this: #include <controller_interface/controller.h> #include <hardware_interface/joint_command_interface.h> #include <pluginlib/class_list_macros.h> #include <std_msgs/Float64.h> namespace my_controller_ns { class MyPositionController : public controller_interface :: Controller < hardware_interface :: EffortJointInterface > { bool init ( hardware_interface :: EffortJointInterface * hw , ros :: NodeHandle & n ) { std :: string my_joint ; if ( ! n . getParam ( \"joint\" , my_joint )) { ROS_ERROR ( \"Could not find joint name\" ); return false ; } joint_ = hw -> getHandle ( my_joint ); // throws on failure command_ = joint_ . getPosition (); // Load gain using gains set on parameter server if ( ! n . getParam ( \"gain\" , gain_ )) { ROS_ERROR ( \"Could not find the gain parameter value\" ); return false ; } // Start command subscriber sub_command_ = n . subscribe < std_msgs :: Float64 > ( \"command\" , 1 , & MyPositionController :: setCommandCB , this ); return true ; } void update ( const ros :: Time & time , const ros :: Duration & period ) { double error = command_ - joint_ . getPosition (); double commanded_effort = error * gain_ ; joint_ . setCommand ( commanded_effort ); } void setCommandCB ( const std_msgs :: Float64ConstPtr & msg ) { command_ = msg -> data ; } void starting ( const ros :: Time & time ) { } void stopping ( const ros :: Time & time ) { } private : hardware_interface :: JointHandle joint_ ; double gain_ ; double command_ ; ros :: Subscriber sub_command_ ; }; PLUGINLIB_EXPORT_CLASS ( my_controller_ns :: MyPositionController , controller_interface :: ControllerBase ); }","title":"The full controller code"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#3-compiling-the-controller","text":"","title":"3. Compiling the controller"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#create-a-plugin-description-file","text":"Inside your package, create a new file named controller_plugins.xml . This file is a description of the controller plugin. It indicates the path where the library will be placed when we compile the controller, as well as the name, type, and class of the controller. Copy the following code into it: < library path = \"lib/libmy_controller_lib\" > < class name = \"my_controller/MyPositionController\" type = \"my_controller_ns::MyPositionController\" base_class_type = \"controller_interface::ControllerBase\" /> </ library >","title":"Create a plugin description file"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#update-the-packagexml-file","text":"This line indicates that our package will provide a plugin. This is very important because if we don't add this line, the controller manager won't be able to find our new controller and load it. Go to the package.xml file of your package. Inside the <export> tag, place the following line: < controller_interface plugin = \"$ {prefix} /controller_plugins.xml\" />","title":"Update the package.xml file"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#update-the-cmakeliststxt-file","text":"Go to the CMakeLists.txt file of your package. Find the add_library() and target_link_libraries() functions, and replace them with these: add_library ( my_controller_lib src / my_controller . cpp ) target_link_libraries ( my_controller_lib $ { catkin_LIBRARIES })","title":"Update the CMakeLists.txt file"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#build-the-controller","text":"Go to the catkin_ws directory and compile your package $ catkin_make Check that the controller has been properly registered: $ rospack plugins -- attrib = plugin controller_interface | grep my_controller You should get a response like this: my_controller / home / user / catkin_ws / src / my_controller / controller_plugins . xml","title":"Build the controller"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#4-launching-the-controller","text":"Let's change the controller of the head_pan_joint to use our new controller.","title":"4. Launching the controller"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#modify-the-configuration-file","text":"Go to the controllers config file and modify the controller for the head_pan_joint to use our newly created one. head_pan_joint_position_controller : type : my_controller / MyPositionController joint : head_pan_joint gain : 0.1","title":"Modify the configuration file"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#lets-launch-it","text":"Launch it by going to Simulations->Select Launch file->main.launch . You can also launch it from a shell, by calling the launch file and the opening the Gazebo window (on Tools->Gazebo ). Launch the controllers: $ roslaunch pi_robot_pkg controllers . launch Check that the controller has been loaded properly: $ rosservice call / pi_robot / controller_manager / list_controllers \" {} \" Check the the joint works properly by sending to it a goal: $ rostopic pub / pi_robot / head_pan_joint_position_controller / command std_msgs / Float64 \"data: 1.0\"","title":"Let's launch it!"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#mission-completed","text":"","title":"Mission completed!!"},{"location":"ROS/7-ROS%20Live%20Class/54-ROS%20Control%20Intro%20Build%20your%20own%20controller/#homework","text":"Add a neural controller for the left_shoulder_forward_joint joint of the Pi Robot and be able to make it move with it. the neural network takes as input the desired position and the current position takes as output the effort command to send to the joint You can use Tensorflow to build and train the network (here, a course on how to use Tensorflow with ROS ). You can generate the training data from a PID controller Send me your questions and results at rtellez@theconstructsim.com","title":"Homework"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/","text":"55\uff1a \u7406\u89e3 robot_state_publisher \u548c *joint_state_publisher*\u7684\u5dee\u5f02 \u00b6 \u82f1\u6587\u540d\uff1aROS Developers Live Class n55\uff1a ROS Control Intro: Understanding the differences between robot_state_publisher and joint_state_publisher https://www.youtube.com/watch?v=9BdAkrX4Xkg This notebook is additional material for the ROS Developers Live Class n.55 created and provided for free by Ricardo Tellez of The Construct . You can distribute this notebook as long as you provide copy of this paragraph with it. https://i-076c152f4690afa84.robotigniteacademy.com/e0dc1f26-2448-440c-b243-ba91a7982797/jupyter_rds/notebooks/live-class-55.ipynb# \u8fd9\u4e00\u8bfe\u7a0b\u7684\u6559\u5b66\u76ee\u7684 \u00b6 \u5982\u4e0b\u76ee\u7684\uff1a \u4ec0\u4e48\u662f Robot State Publisher /joint_states topic \u7684\u529f\u80fd \u4ec0\u4e48\u662f Joint State Publisher \u4ec0\u4e48\u65f6\u5019\u7528 Rviz**\u6765\u5bf9joint states\u8fdb\u884c\u53ef\u89c6\u5316\uff0c \u4ec0\u4e48\u65f6\u5019\u7528**Gazebo \u9884\u5907\u77e5\u8bc6\uff1a Basic knowledge of ROS concepts such as topics, publish and subscribe, ROS Service . If you don't know about it, check this course Basic knowledge of ROS Control . If you don't know about it, check this course Knowledge of URDF format for robot definition . If you don't know about it, check this course . Love for Robotics ...that's it!! How to use this ROSject \u00b6 A ROSject is a ROS project packaged in such a way that all the material it contains ( ROS code, Gazebo simulations and Notebooks ) can be shared with any body using only a web link . That is what we did with all the attendants to the Live Class, we shared this ROSject with them (so they can have access to all the ROS material they contain). Check this webinar to learn more about ROSjects and how to create your own ROSjects . You will need to have a free account at the ROS Development Studio (ROSDS). Get the account and then follow the indications below. 0. \u4f7f\u7528\u7684\u673a\u5668\u4eba\u6a21\u578b\u4ecb\u7ecd \u00b6 The structure of this robot is defined in the URDF file $ cat simulation_ws / src / pi_robot / pi_robot_pkg / urdf / pi_robot_v2 . urdf We can load the whole structure in the param server and use it for visualization in Rviz. For that, do the following steps: (1) Open a Webshell (top menu, Tools->Shell )and launch a roscore on it $ roscore (2) Open another webshell and load the URDF using the following command: $ rosparam load simulation_ws / src / pi_robot / pi_robot_pkg / urdf / pi_robot_v2 . urdf robot_description (3) Launch Rviz and load the RobotModel . For this: On the previous shell launch rviz on it Then go to Tools->Graphical Tools . You should see there the Rviz window. Then, on Rviz, click on Add and select from the list the RobotModel . Make sure that the Fixed frame is set to base_link You should get something like this 1. robot_state_publisher \u00b6 The robot_state_publisher uses the URDF specified by the parameter robot_description and the joint positions from the topic joint_states to calculate the forward kinematics of the robot and publish the results via tf . (definition from the official robot_state_publisher ROS wiki ). <launch> <param name= \"robot_description\" command= \"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\" /> </launch> Visualize in Rviz the state of the robot: There is nobody publishing the /joint_states $ rostopic info /joint_states Type: sensor_msgs/JointState Publishers: None Subscribers: * /robot_state_publisher ( http://rosds_computer:41816/ ) TIPS: bear in mind that we are not launching yet any simulation of the robot!!! 2. joint_state_publisher \u00b6 This package publishes sensor_msgs/JointState messages for a robot. The package reads the robot_description parameter, finds all of the non-fixed joints and publishes a JointState message with all those joints defined. (definition from the official joint_state_publisher ROS wiki ). <launch> <param name= \"robot_description\" command= \"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <!-- send fake joint values --> <node name= \"joint_state_publisher\" pkg= \"joint_state_publisher\" type= \"joint_state_publisher\" > <param name= \"use_gui\" value= \"TRUE\" /> </node> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\" /> </launch> TIPS: bear in mind that we are not launching yet any simulation of the robot!!! Now, the joint_state_publisher is publishing values in the /joint_states topic. $ rostopic info /joint_states Type: sensor_msgs/JointState Publishers: * /joint_state_publisher ( http://rosds_computer:43665/ ) Subscribers: * /robot_state_publisher ( http://rosds_computer:38212/ ) Because of that, the robot_state_publisher can build the whole robot structure. 2.1. The joint_state_publisher GUI \u00b6 Which values is the joint_state_publisher publishing? You can publish any value using the GUI TIPS: joint_state_publisher \u662f\u7528\u4e8e\u83b7\u53d6robot\u7684\u72b6\u6001\u7684\uff0c\u800c\u4e0d\u662f\u7528\u4e8e\u9a71\u52a8robot\u7684. the joint_state_publisher publishes in a topic that is not for commanding the robot, but to know the status of the robot!! This is not a simulation!! This is just a visualization of the URDF!! You can use the last launch file to check if the URDF of your robot is correct, and the joints are properly position and move correctly. ** There are no controllers here!!** 3. Launching the simulation \u00b6 3.1 First without controllers \u00b6 <launch> <param name= \"robot_description\" command= \"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <include file= \"$(find pi_robot_pkg)/launch/spawn_robot_v2.launch\" > <arg name= \"urdf_robot_file\" value= \"$(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <arg name= \"robot_name\" value= \"pi_robot\" /> </include> <!-- Load joint controller configurations from YAML file to parameter server --> <rosparam file= \"$(find pi_robot_pkg)/config/pirobot_control.yaml\" command= \"load\" /> <!-- send fake joint values --> <node name= \"joint_state_publisher\" pkg= \"joint_state_publisher\" type= \"joint_state_publisher\" > <param name= \"use_gui\" value= \"TRUE\" /> </node> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\" /> </launch> The robot has no control in its arms But the Rviz is showing proper control... why? 3.2 Second with joint controllers but no joint_state_controller \u00b6 <launch> <param name= \"robot_description\" command= \"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <include file= \"$(find pi_robot_pkg)/launch/spawn_robot_v2.launch\" > <arg name= \"urdf_robot_file\" value= \"$(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <arg name= \"robot_name\" value= \"pi_robot\" /> </include> <!-- Load joint controller configurations from YAML file to parameter server --> <rosparam file= \"$(find pi_robot_pkg)/config/pirobot_control.yaml\" command= \"load\" /> <!-- load the controllers --> <node name= \"controller_spawner\" pkg= \"controller_manager\" type= \"spawner\" respawn= \"false\" output= \"screen\" ns= \"/pi_robot\" args= \"head_pan_joint_position_controller head_tilt_joint_position_controller torso_joint_position_controller left_shoulder_forward_joint_position_controller right_shoulder_forward_joint_position_controller left_shoulder_up_joint_position_controller right_shoulder_up_joint_position_controller left_elbow_joint_position_controller right_elbow_joint_position_controller left_wrist_joint_position_controller right_wrist_joint_position_controller\" /> <!-- send fake joint values --> <node name= \"joint_state_publisher\" pkg= \"joint_state_publisher\" type= \"joint_state_publisher\" > <param name= \"use_gui\" value= \"TRUE\" /> </node> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\" /> </launch> The robot has control But Rviz does not show the current situation of the robot. Instead it show the one by joint_state_controller 3.3 Third, with joint controllers plus joint_state_controller and no joint_state_publisher \u00b6 < launch > < param name = \"robot_description\" command = \"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> < include file = \"$(find pi_robot_pkg)/launch/spawn_robot_v2.launch\" > < arg name = \"urdf_robot_file\" value = \"$(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> < arg name = \"robot_name\" value = \"pi_robot\" /> </ include > < ! -- Load joint controller configurations from YAML file to parameter server --> < rosparam file = \"$(find pi_robot_pkg)/config/pirobot_control.yaml\" command = \"load\" /> < ! -- load the controllers --> < node name = \"controller_spawner\" pkg = \"controller_manager\" type = \"spawner\" respawn = \"false\" output = \"screen\" ns = \"/pi_robot\" args = \"head_pan_joint_position_controller head_tilt_joint_position_controller torso_joint_position_controller left_shoulder_forward_joint_position_controller right_shoulder_forward_joint_position_controller left_shoulder_up_joint_position_controller right_shoulder_up_joint_position_controller left_elbow_joint_position_controller right_elbow_joint_position_controller left_wrist_joint_position_controller right_wrist_joint_position_controller joint_state_controller\" /> < ! -- send fake joint values --> < node name = \"joint_state_publisher\" pkg = \"joint_state_publisher\" type = \"joint_state_publisher\" > < remap from = \"/joint_states\" to = \"/pi_robot/joint_states\" /> < param name = \"use_gui\" value = \"TRUE\" /> </ node > < ! -- convert joint states to TF transforms for rviz , etc --> < node name = \"robot_state_publisher\" pkg = \"robot_state_publisher\" type = \"robot_state_publisher\" respawn = \"false\" output = \"screen\" > < remap from = \"/joint_states\" to = \"/pi_robot/joint_states\" /> </ node > < ! -- Show in Rviz --> < node name = \"rviz\" pkg = \"rviz\" type = \"rviz\" args = \"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\" /> </ launch > Thew robot has control Rviz shows the current state of the robot joint_state_controller has no effect on the robot, nor on Rviz (well actually, there is a conflict!) To have effect on the joints, you must publish joint goals for each separated joint in its specific joint/command topic / pi_robot / head_pan_joint_position_controller / command \u6211\u7684\u603b\u7ed3 \u00b6 rviz\u4ec5\u4ec5\u662f\u53ef\u89c6\u5316\uff0c\u800c\u4e0d\u662f\u4eff\u771f\u3002 \u5229\u7528joint state publisher\u7684gui\u53ef\u4ee5\u53d1\u5e03joint\u7684\u72b6\u6001\uff0c\u7136\u540erobot state publisher\u8ba2\u9605\u8fd9\u4e9b\u72b6\u6001\uff0c\u5e76\u8ba1\u7b97\u673a\u5668\u4eba\u7684\u72b6\u6001\uff0c\u6700\u7ec8rviz\u53ef\u4ee5\u6839\u636erobot state publisher\u53d1\u5e03\u7684\u72b6\u6001\u5bf9\u673a\u5668\u4eba\u8fdb\u884c\u663e\u793a\u66f4\u65b0\u3002 joint state publisher\u5e76\u4e0d\u662f\u7ed9\u673a\u5668\u4eba\u53d1\u9001\u72b6\u6001\u547d\u4ee4\uff0c\u800c\u5b9e\u9645\u4e0a\u662f\u83b7\u53d6\u673a\u5668\u4eba\u7684joint\u72b6\u6001\u3002 joint state publisher\u4e0d\u5177\u5907\u63a7\u5236\u529f\u80fd\u3002","title":"55 Understanding the differences between robot state publisher and joint state publisher"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#55-robot_state_publisher-joint_state_publisher","text":"\u82f1\u6587\u540d\uff1aROS Developers Live Class n55\uff1a ROS Control Intro: Understanding the differences between robot_state_publisher and joint_state_publisher https://www.youtube.com/watch?v=9BdAkrX4Xkg This notebook is additional material for the ROS Developers Live Class n.55 created and provided for free by Ricardo Tellez of The Construct . You can distribute this notebook as long as you provide copy of this paragraph with it. https://i-076c152f4690afa84.robotigniteacademy.com/e0dc1f26-2448-440c-b243-ba91a7982797/jupyter_rds/notebooks/live-class-55.ipynb#","title":"55\uff1a \u7406\u89e3 robot_state_publisher \u548c *joint_state_publisher*\u7684\u5dee\u5f02"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#_1","text":"\u5982\u4e0b\u76ee\u7684\uff1a \u4ec0\u4e48\u662f Robot State Publisher /joint_states topic \u7684\u529f\u80fd \u4ec0\u4e48\u662f Joint State Publisher \u4ec0\u4e48\u65f6\u5019\u7528 Rviz**\u6765\u5bf9joint states\u8fdb\u884c\u53ef\u89c6\u5316\uff0c \u4ec0\u4e48\u65f6\u5019\u7528**Gazebo \u9884\u5907\u77e5\u8bc6\uff1a Basic knowledge of ROS concepts such as topics, publish and subscribe, ROS Service . If you don't know about it, check this course Basic knowledge of ROS Control . If you don't know about it, check this course Knowledge of URDF format for robot definition . If you don't know about it, check this course . Love for Robotics ...that's it!!","title":"\u8fd9\u4e00\u8bfe\u7a0b\u7684\u6559\u5b66\u76ee\u7684"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#how-to-use-this-rosject","text":"A ROSject is a ROS project packaged in such a way that all the material it contains ( ROS code, Gazebo simulations and Notebooks ) can be shared with any body using only a web link . That is what we did with all the attendants to the Live Class, we shared this ROSject with them (so they can have access to all the ROS material they contain). Check this webinar to learn more about ROSjects and how to create your own ROSjects . You will need to have a free account at the ROS Development Studio (ROSDS). Get the account and then follow the indications below.","title":"How to use this ROSject"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#0","text":"The structure of this robot is defined in the URDF file $ cat simulation_ws / src / pi_robot / pi_robot_pkg / urdf / pi_robot_v2 . urdf We can load the whole structure in the param server and use it for visualization in Rviz. For that, do the following steps: (1) Open a Webshell (top menu, Tools->Shell )and launch a roscore on it $ roscore (2) Open another webshell and load the URDF using the following command: $ rosparam load simulation_ws / src / pi_robot / pi_robot_pkg / urdf / pi_robot_v2 . urdf robot_description (3) Launch Rviz and load the RobotModel . For this: On the previous shell launch rviz on it Then go to Tools->Graphical Tools . You should see there the Rviz window. Then, on Rviz, click on Add and select from the list the RobotModel . Make sure that the Fixed frame is set to base_link You should get something like this","title":"0. \u4f7f\u7528\u7684\u673a\u5668\u4eba\u6a21\u578b\u4ecb\u7ecd"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#1-robot_state_publisher","text":"The robot_state_publisher uses the URDF specified by the parameter robot_description and the joint positions from the topic joint_states to calculate the forward kinematics of the robot and publish the results via tf . (definition from the official robot_state_publisher ROS wiki ). <launch> <param name= \"robot_description\" command= \"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\" /> </launch> Visualize in Rviz the state of the robot: There is nobody publishing the /joint_states $ rostopic info /joint_states Type: sensor_msgs/JointState Publishers: None Subscribers: * /robot_state_publisher ( http://rosds_computer:41816/ ) TIPS: bear in mind that we are not launching yet any simulation of the robot!!!","title":"1. robot_state_publisher"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#2-joint_state_publisher","text":"This package publishes sensor_msgs/JointState messages for a robot. The package reads the robot_description parameter, finds all of the non-fixed joints and publishes a JointState message with all those joints defined. (definition from the official joint_state_publisher ROS wiki ). <launch> <param name= \"robot_description\" command= \"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <!-- send fake joint values --> <node name= \"joint_state_publisher\" pkg= \"joint_state_publisher\" type= \"joint_state_publisher\" > <param name= \"use_gui\" value= \"TRUE\" /> </node> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\" /> </launch> TIPS: bear in mind that we are not launching yet any simulation of the robot!!! Now, the joint_state_publisher is publishing values in the /joint_states topic. $ rostopic info /joint_states Type: sensor_msgs/JointState Publishers: * /joint_state_publisher ( http://rosds_computer:43665/ ) Subscribers: * /robot_state_publisher ( http://rosds_computer:38212/ ) Because of that, the robot_state_publisher can build the whole robot structure.","title":"2. joint_state_publisher"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#21-the-joint_state_publisher-gui","text":"Which values is the joint_state_publisher publishing? You can publish any value using the GUI TIPS: joint_state_publisher \u662f\u7528\u4e8e\u83b7\u53d6robot\u7684\u72b6\u6001\u7684\uff0c\u800c\u4e0d\u662f\u7528\u4e8e\u9a71\u52a8robot\u7684. the joint_state_publisher publishes in a topic that is not for commanding the robot, but to know the status of the robot!! This is not a simulation!! This is just a visualization of the URDF!! You can use the last launch file to check if the URDF of your robot is correct, and the joints are properly position and move correctly. ** There are no controllers here!!**","title":"2.1. The joint_state_publisher GUI"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#3-launching-the-simulation","text":"","title":"3. Launching the simulation"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#31-first-without-controllers","text":"<launch> <param name= \"robot_description\" command= \"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <include file= \"$(find pi_robot_pkg)/launch/spawn_robot_v2.launch\" > <arg name= \"urdf_robot_file\" value= \"$(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <arg name= \"robot_name\" value= \"pi_robot\" /> </include> <!-- Load joint controller configurations from YAML file to parameter server --> <rosparam file= \"$(find pi_robot_pkg)/config/pirobot_control.yaml\" command= \"load\" /> <!-- send fake joint values --> <node name= \"joint_state_publisher\" pkg= \"joint_state_publisher\" type= \"joint_state_publisher\" > <param name= \"use_gui\" value= \"TRUE\" /> </node> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\" /> </launch> The robot has no control in its arms But the Rviz is showing proper control... why?","title":"3.1 First without controllers"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#32-second-with-joint-controllers-but-no-joint_state_controller","text":"<launch> <param name= \"robot_description\" command= \"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <include file= \"$(find pi_robot_pkg)/launch/spawn_robot_v2.launch\" > <arg name= \"urdf_robot_file\" value= \"$(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> <arg name= \"robot_name\" value= \"pi_robot\" /> </include> <!-- Load joint controller configurations from YAML file to parameter server --> <rosparam file= \"$(find pi_robot_pkg)/config/pirobot_control.yaml\" command= \"load\" /> <!-- load the controllers --> <node name= \"controller_spawner\" pkg= \"controller_manager\" type= \"spawner\" respawn= \"false\" output= \"screen\" ns= \"/pi_robot\" args= \"head_pan_joint_position_controller head_tilt_joint_position_controller torso_joint_position_controller left_shoulder_forward_joint_position_controller right_shoulder_forward_joint_position_controller left_shoulder_up_joint_position_controller right_shoulder_up_joint_position_controller left_elbow_joint_position_controller right_elbow_joint_position_controller left_wrist_joint_position_controller right_wrist_joint_position_controller\" /> <!-- send fake joint values --> <node name= \"joint_state_publisher\" pkg= \"joint_state_publisher\" type= \"joint_state_publisher\" > <param name= \"use_gui\" value= \"TRUE\" /> </node> <!-- Combine joint values --> <node name= \"robot_state_publisher\" pkg= \"robot_state_publisher\" type= \"state_publisher\" /> <!-- Show in Rviz --> <node name= \"rviz\" pkg= \"rviz\" type= \"rviz\" args= \"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\" /> </launch> The robot has control But Rviz does not show the current situation of the robot. Instead it show the one by joint_state_controller","title":"3.2 Second with joint controllers but no joint_state_controller"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#33-third-with-joint-controllers-plus-joint_state_controller-and-no-joint_state_publisher","text":"< launch > < param name = \"robot_description\" command = \"cat $(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> < include file = \"$(find pi_robot_pkg)/launch/spawn_robot_v2.launch\" > < arg name = \"urdf_robot_file\" value = \"$(find pi_robot_pkg)/urdf/pi_robot_v2.urdf\" /> < arg name = \"robot_name\" value = \"pi_robot\" /> </ include > < ! -- Load joint controller configurations from YAML file to parameter server --> < rosparam file = \"$(find pi_robot_pkg)/config/pirobot_control.yaml\" command = \"load\" /> < ! -- load the controllers --> < node name = \"controller_spawner\" pkg = \"controller_manager\" type = \"spawner\" respawn = \"false\" output = \"screen\" ns = \"/pi_robot\" args = \"head_pan_joint_position_controller head_tilt_joint_position_controller torso_joint_position_controller left_shoulder_forward_joint_position_controller right_shoulder_forward_joint_position_controller left_shoulder_up_joint_position_controller right_shoulder_up_joint_position_controller left_elbow_joint_position_controller right_elbow_joint_position_controller left_wrist_joint_position_controller right_wrist_joint_position_controller joint_state_controller\" /> < ! -- send fake joint values --> < node name = \"joint_state_publisher\" pkg = \"joint_state_publisher\" type = \"joint_state_publisher\" > < remap from = \"/joint_states\" to = \"/pi_robot/joint_states\" /> < param name = \"use_gui\" value = \"TRUE\" /> </ node > < ! -- convert joint states to TF transforms for rviz , etc --> < node name = \"robot_state_publisher\" pkg = \"robot_state_publisher\" type = \"robot_state_publisher\" respawn = \"false\" output = \"screen\" > < remap from = \"/joint_states\" to = \"/pi_robot/joint_states\" /> </ node > < ! -- Show in Rviz --> < node name = \"rviz\" pkg = \"rviz\" type = \"rviz\" args = \"-d $(find pi_robot_pkg)/launch/pi_robot.rviz\" /> </ launch > Thew robot has control Rviz shows the current state of the robot joint_state_controller has no effect on the robot, nor on Rviz (well actually, there is a conflict!) To have effect on the joints, you must publish joint goals for each separated joint in its specific joint/command topic / pi_robot / head_pan_joint_position_controller / command","title":"3.3 Third, with joint controllers plus joint_state_controller and no joint_state_publisher"},{"location":"ROS/7-ROS%20Live%20Class/55-Understanding%20the%20differences%20between%20robot_state_publisher%20and%20joint_state_publisher/#_2","text":"rviz\u4ec5\u4ec5\u662f\u53ef\u89c6\u5316\uff0c\u800c\u4e0d\u662f\u4eff\u771f\u3002 \u5229\u7528joint state publisher\u7684gui\u53ef\u4ee5\u53d1\u5e03joint\u7684\u72b6\u6001\uff0c\u7136\u540erobot state publisher\u8ba2\u9605\u8fd9\u4e9b\u72b6\u6001\uff0c\u5e76\u8ba1\u7b97\u673a\u5668\u4eba\u7684\u72b6\u6001\uff0c\u6700\u7ec8rviz\u53ef\u4ee5\u6839\u636erobot state publisher\u53d1\u5e03\u7684\u72b6\u6001\u5bf9\u673a\u5668\u4eba\u8fdb\u884c\u663e\u793a\u66f4\u65b0\u3002 joint state publisher\u5e76\u4e0d\u662f\u7ed9\u673a\u5668\u4eba\u53d1\u9001\u72b6\u6001\u547d\u4ee4\uff0c\u800c\u5b9e\u9645\u4e0a\u662f\u83b7\u53d6\u673a\u5668\u4eba\u7684joint\u72b6\u6001\u3002 joint state publisher\u4e0d\u5177\u5907\u63a7\u5236\u529f\u80fd\u3002","title":"\u6211\u7684\u603b\u7ed3"},{"location":"markdown/markdown%E8%AF%AD%E6%B3%95/","text":"markdown\u8bed\u6cd5 \u00b6 mkdocs\u6587\u6863\u5f00\u53d1\u6559\u7a0b For full documentation visit mkdocs.org . \u57fa\u4e8emkdocs-material\u642d\u5efa\u4e2a\u4eba\u9759\u6001\u535a\u5ba2 mkdocs\u5e38\u7528\u547d\u4ee4 \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. \u5217\u8868 \u00b6 \u5217\u8868\u793a\u4f8b: and build configuration \u5217\u8868\u5d4c\u5957\u793a\u4f8b: \u7b2c\u4e00\u9879\uff1a \u7b2c\u4e00\u9879\u5d4c\u5957\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u7b2c\u4e00\u9879\u5d4c\u5957\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u7b2c\u4e8c\u9879\uff1a \u7b2c\u4e8c\u9879\u5d4c\u5957\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u7b2c\u4e8c\u9879\u5d4c\u5957\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u5f15\u7528 \u00b6 \u6d4b\u8bd5\u5f15\u7528 \u6d4b\u8bd5 \u8d85\u94fe\u63a5 \u00b6 \u8fd9\u662f\u4e00\u4e2a\u94fe\u63a5 mkdocs\u6587\u6863\u5f00\u53d1\u6559\u7a0b \u56fe\u7247 \u00b6 \u8868\u683c \u00b6 \u8868\u5934 \u8868\u5934 \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u516c\u5f0f \u00b6 \u516c\u5f0f: \\[y(n)=(f\\ast g)(n)=\\sum_{\\tau =\\infty}^{\\infty}f(\\tau )g(n-\\tau )d\\tau \\]","title":"markdown\u8bed\u6cd5"},{"location":"markdown/markdown%E8%AF%AD%E6%B3%95/#markdown","text":"mkdocs\u6587\u6863\u5f00\u53d1\u6559\u7a0b For full documentation visit mkdocs.org . \u57fa\u4e8emkdocs-material\u642d\u5efa\u4e2a\u4eba\u9759\u6001\u535a\u5ba2","title":"markdown\u8bed\u6cd5"},{"location":"markdown/markdown%E8%AF%AD%E6%B3%95/#mkdocs","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"mkdocs\u5e38\u7528\u547d\u4ee4"},{"location":"markdown/markdown%E8%AF%AD%E6%B3%95/#_1","text":"\u5217\u8868\u793a\u4f8b: and build configuration \u5217\u8868\u5d4c\u5957\u793a\u4f8b: \u7b2c\u4e00\u9879\uff1a \u7b2c\u4e00\u9879\u5d4c\u5957\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u7b2c\u4e00\u9879\u5d4c\u5957\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20 \u7b2c\u4e8c\u9879\uff1a \u7b2c\u4e8c\u9879\u5d4c\u5957\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 \u7b2c\u4e8c\u9879\u5d4c\u5957\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20","title":"\u5217\u8868"},{"location":"markdown/markdown%E8%AF%AD%E6%B3%95/#_2","text":"\u6d4b\u8bd5\u5f15\u7528 \u6d4b\u8bd5","title":"\u5f15\u7528"},{"location":"markdown/markdown%E8%AF%AD%E6%B3%95/#_3","text":"\u8fd9\u662f\u4e00\u4e2a\u94fe\u63a5 mkdocs\u6587\u6863\u5f00\u53d1\u6559\u7a0b","title":"\u8d85\u94fe\u63a5"},{"location":"markdown/markdown%E8%AF%AD%E6%B3%95/#_4","text":"","title":"\u56fe\u7247"},{"location":"markdown/markdown%E8%AF%AD%E6%B3%95/#_5","text":"\u8868\u5934 \u8868\u5934 \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c \u5355\u5143\u683c","title":"\u8868\u683c"},{"location":"markdown/markdown%E8%AF%AD%E6%B3%95/#_6","text":"\u516c\u5f0f: \\[y(n)=(f\\ast g)(n)=\\sum_{\\tau =\\infty}^{\\infty}f(\\tau )g(n-\\tau )d\\tau \\]","title":"\u516c\u5f0f"},{"location":"markdown/examples/","text":"Insiders \u00b6 Material for MkDocs follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders . Read on to learn how sponsorship works , and how easy it is to get access to Insiders . A demo is worth a thousand words \u2014 check it out at squidfunk.github.io/mkdocs-material-insiders How sponsorship works \u00b6 New features first land in Insiders, which means that sponsors will have access immediately . Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into Material for MkDocs and released for general availability. Bugfixes are always released simultaneously in both editions. 1 Don't want to sponsor? No problem, Material for MkDocs already has tons of features available, so chances are that most of your requirements are already satisfied. See the list of exclusive features to learn which features are currently only available to sponsors. How to become a sponsor \u00b6 You can become a sponsor using your individual or organization's GitHub account. Just visit squidfunk's sponsor profile , pick any tier from $10/month , and complete the checkout. Then, after a few hours, @squidfunk will add you as a collaborator to the super-secret private GitHub repositority containing the Insiders edition, which contains all brand new and exclusive features . Important : If you're sponsoring @squidfunk through a GitHub organization, please send a short email to sponsors@squidfunk.com with the name of your organization and the account that should be added as a collaborator. 2 You can cancel your sponsorship anytime. 3 Join our awesome sponsors If you sponsor publicly, you're automatically added here with a link to your profile and avatar to show your support for Material for MkDocs. Alternatively, if you wish to keep your sponsorship private, you'll be a silent +1. You can select visibility during checkout and change it afterwards. Exclusive features \u00b6 The following features are currently exclusively available to sponsors: Version warning Custom admonition icons Code block annotations Anchor tracking Section index pages Sticky navigation tabs Mermaid.js integration Search suggestions Search highlighting Search sharing Remove generator notice New features are added to this list every few weeks, so be sure to come back from time to time to learn about what's new, or follow @squidfunk on Twitter to stay updated. Funding \u00b6 Goals \u00b6 Following is a list of funding goals. When a funding goal is hit, the features that are tied to it are merged back into Material for MkDocs and released to the public for general availability. $ 2,500 \u2013 Biquinho Vermelho \u00b6 Search suggestions Search highlighting Search sharing $ 3,000 \u2013 Caribbean Red \u00b6 Sticky navigation tabs Section index pages Remove generator notice $ 4,000 \u2013 Ghost Pepper \u00b6 Anchor tracking Code block annotations Version warning $ 5,000 \u2013 Aji Panca \u00b6 Mermaid.js integration List of last searches Advanced routing for versioning $ 6,000 \u2013 Trinidad Scorpion \u00b6 Improved search result summaries Table of contents shows which sections have search results Advanced routing for multi-language sites $ 7,000 \u2013 Royal Gold \u00b6 Table of contents auto-collapse Table of contents follows active anchor Native lightbox integration $ 8,000 \u2013 Scotch Bonnet \u00b6 Custom admonition icons TBA TBA Future \u00b6 Material for MkDocs Live Edit New layouts and styles Code block palette toggle Goals completed \u00b6 $ 2,000 \u2013 Black Pearl \u00b6 Latest release tag Color palette toggle Back-to-top button $ 1,500 \u2013 Bhut Jolokia \u00b6 Admonition inline blocks Site language selection Versioning $ 1,000 \u2013 Prairie Fire \u00b6 Navigation sections Navigation expansion Hiding the sidebars Table of contents in navigation Header hides on scroll $ 500 \u2013 Madame Jeanette \u00b6 Improved search result grouping Improved search result relevance and scoring Missing query terms in search results Frequently asked questions \u00b6 Compatibility \u00b6 We're running an open source project and want to make sure that users can build the documentation without having access to Insiders. Is this still possible? Yes. Insiders is compatible with Material for MkDocs. All new features are implemented behind feature flags; all configuration changes are backward-compatible. This means that your users will be able to build the documentation locally with Material for MkDocs and when they push their changes, it can be built with Insiders (e.g. as part of GitHub Actions). Thus, it's recommended to install Insiders only in CI, as you don't want to expose your GH_TOKEN to users. Terms \u00b6 We're using Material for MkDocs to build the developer documentation of a commercial project. Can we use Insiders under the same terms and conditions? Yes. Whether you're an individual or a company, you may use Material for MkDocs Insiders precisely under the same terms as Material for MkDocs, which are given by the MIT license . However, we kindly ask you to respect the following guidelines: Please don't distribute the source code of Insiders. You may freely use it for public, private or commercial projects, fork it, mirror it, do whatever you want with it, but please don't release the source code, as it would counteract the sponsorware strategy. If you cancel your subscription, you're removed as a collaborator and will miss out on future updates of Insiders. However, you may use the latest version that's available to you as long as you like . Just remember that GitHub deletes private forks . You may ask yourself why you should pay for something that is Open Source. Doesn't that contradict the ethos of Open Source software? Yes and no. Yes, some features are locked behind a monthly subscription, which means they are only accessible when paying a small amount of money. No, the features are only exclusive for a short time until specific funding goals are hit. Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use Material for MkDocs, you can be sure that bugs are fixed quickly and new features are added regularly. \u21a9 It's currently not possible to grant access to each member of an organization, as GitHub only allows for adding users. Thus, after sponsoring, please send an email to sponsors@squidfunk.com , stating which account should become a collaborator of the Insiders repository. We're working on a solution which will make access to organizations much simpler. To ensure that access is not tied to a particular individual GitHub account, create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being added to the list of collaborators, the bot account can create a private fork of the private Insiders GitHub repository, and grant access to all members of the organizations. \u21a9 If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle, which ends at the 22 nd of a month for monthly sponsorships. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable. \u21a9","title":"Insiders"},{"location":"markdown/examples/#insiders","text":"Material for MkDocs follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders . Read on to learn how sponsorship works , and how easy it is to get access to Insiders . A demo is worth a thousand words \u2014 check it out at squidfunk.github.io/mkdocs-material-insiders","title":"Insiders"},{"location":"markdown/examples/#how-sponsorship-works","text":"New features first land in Insiders, which means that sponsors will have access immediately . Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into Material for MkDocs and released for general availability. Bugfixes are always released simultaneously in both editions. 1 Don't want to sponsor? No problem, Material for MkDocs already has tons of features available, so chances are that most of your requirements are already satisfied. See the list of exclusive features to learn which features are currently only available to sponsors.","title":"How sponsorship works"},{"location":"markdown/examples/#how-to-become-a-sponsor","text":"You can become a sponsor using your individual or organization's GitHub account. Just visit squidfunk's sponsor profile , pick any tier from $10/month , and complete the checkout. Then, after a few hours, @squidfunk will add you as a collaborator to the super-secret private GitHub repositority containing the Insiders edition, which contains all brand new and exclusive features . Important : If you're sponsoring @squidfunk through a GitHub organization, please send a short email to sponsors@squidfunk.com with the name of your organization and the account that should be added as a collaborator. 2 You can cancel your sponsorship anytime. 3 Join our awesome sponsors If you sponsor publicly, you're automatically added here with a link to your profile and avatar to show your support for Material for MkDocs. Alternatively, if you wish to keep your sponsorship private, you'll be a silent +1. You can select visibility during checkout and change it afterwards.","title":"How to become a sponsor"},{"location":"markdown/examples/#exclusive-features","text":"The following features are currently exclusively available to sponsors: Version warning Custom admonition icons Code block annotations Anchor tracking Section index pages Sticky navigation tabs Mermaid.js integration Search suggestions Search highlighting Search sharing Remove generator notice New features are added to this list every few weeks, so be sure to come back from time to time to learn about what's new, or follow @squidfunk on Twitter to stay updated.","title":"Exclusive features"},{"location":"markdown/examples/#funding","text":"","title":"Funding "},{"location":"markdown/examples/#goals","text":"Following is a list of funding goals. When a funding goal is hit, the features that are tied to it are merged back into Material for MkDocs and released to the public for general availability.","title":"Goals"},{"location":"markdown/examples/#2500-biquinho-vermelho","text":"Search suggestions Search highlighting Search sharing","title":"$ 2,500 \u2013 Biquinho Vermelho"},{"location":"markdown/examples/#3000-caribbean-red","text":"Sticky navigation tabs Section index pages Remove generator notice","title":"$ 3,000 \u2013 Caribbean Red"},{"location":"markdown/examples/#4000-ghost-pepper","text":"Anchor tracking Code block annotations Version warning","title":"$ 4,000 \u2013 Ghost Pepper"},{"location":"markdown/examples/#5000-aji-panca","text":"Mermaid.js integration List of last searches Advanced routing for versioning","title":"$ 5,000 \u2013 Aji Panca"},{"location":"markdown/examples/#6000-trinidad-scorpion","text":"Improved search result summaries Table of contents shows which sections have search results Advanced routing for multi-language sites","title":"$ 6,000 \u2013 Trinidad Scorpion"},{"location":"markdown/examples/#7000-royal-gold","text":"Table of contents auto-collapse Table of contents follows active anchor Native lightbox integration","title":"$ 7,000 \u2013 Royal Gold"},{"location":"markdown/examples/#8000-scotch-bonnet","text":"Custom admonition icons TBA TBA","title":"$ 8,000 \u2013 Scotch Bonnet"},{"location":"markdown/examples/#future","text":"Material for MkDocs Live Edit New layouts and styles Code block palette toggle","title":"Future"},{"location":"markdown/examples/#goals-completed","text":"","title":"Goals completed"},{"location":"markdown/examples/#2000-black-pearl","text":"Latest release tag Color palette toggle Back-to-top button","title":"$ 2,000 \u2013 Black Pearl"},{"location":"markdown/examples/#1500-bhut-jolokia","text":"Admonition inline blocks Site language selection Versioning","title":"$ 1,500 \u2013 Bhut Jolokia"},{"location":"markdown/examples/#1000-prairie-fire","text":"Navigation sections Navigation expansion Hiding the sidebars Table of contents in navigation Header hides on scroll","title":"$ 1,000 \u2013 Prairie Fire"},{"location":"markdown/examples/#500-madame-jeanette","text":"Improved search result grouping Improved search result relevance and scoring Missing query terms in search results","title":"$ 500 \u2013 Madame Jeanette"},{"location":"markdown/examples/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"markdown/examples/#compatibility","text":"We're running an open source project and want to make sure that users can build the documentation without having access to Insiders. Is this still possible? Yes. Insiders is compatible with Material for MkDocs. All new features are implemented behind feature flags; all configuration changes are backward-compatible. This means that your users will be able to build the documentation locally with Material for MkDocs and when they push their changes, it can be built with Insiders (e.g. as part of GitHub Actions). Thus, it's recommended to install Insiders only in CI, as you don't want to expose your GH_TOKEN to users.","title":"Compatibility"},{"location":"markdown/examples/#terms","text":"We're using Material for MkDocs to build the developer documentation of a commercial project. Can we use Insiders under the same terms and conditions? Yes. Whether you're an individual or a company, you may use Material for MkDocs Insiders precisely under the same terms as Material for MkDocs, which are given by the MIT license . However, we kindly ask you to respect the following guidelines: Please don't distribute the source code of Insiders. You may freely use it for public, private or commercial projects, fork it, mirror it, do whatever you want with it, but please don't release the source code, as it would counteract the sponsorware strategy. If you cancel your subscription, you're removed as a collaborator and will miss out on future updates of Insiders. However, you may use the latest version that's available to you as long as you like . Just remember that GitHub deletes private forks . You may ask yourself why you should pay for something that is Open Source. Doesn't that contradict the ethos of Open Source software? Yes and no. Yes, some features are locked behind a monthly subscription, which means they are only accessible when paying a small amount of money. No, the features are only exclusive for a short time until specific funding goals are hit. Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use Material for MkDocs, you can be sure that bugs are fixed quickly and new features are added regularly. \u21a9 It's currently not possible to grant access to each member of an organization, as GitHub only allows for adding users. Thus, after sponsoring, please send an email to sponsors@squidfunk.com , stating which account should become a collaborator of the Insiders repository. We're working on a solution which will make access to organizations much simpler. To ensure that access is not tied to a particular individual GitHub account, create a bot account (i.e. a GitHub account that is not tied to a specific individual), and use this account for the sponsoring. After being added to the list of collaborators, the bot account can create a private fork of the private Insiders GitHub repository, and grant access to all members of the organizations. \u21a9 If you cancel your sponsorship, GitHub schedules a cancellation request which will become effective at the end of the billing cycle, which ends at the 22 nd of a month for monthly sponsorships. This means that even though you cancel your sponsorship, you will keep your access to Insiders as long as your cancellation isn't effective. All charges are processed by GitHub through Stripe. As we don't receive any information regarding your payment, and GitHub doesn't offer refunds, sponsorships are non-refundable. \u21a9","title":"Terms"},{"location":"markdown/examples/abbreviations/","text":"Abbreviations \u00b6 Technical documentation often incurs the usage of a lot of acronyms, which may need additional explanation, especially for new user of your project. For these matters, Material for MkDocs uses a combination of Markdown extensions to enable site-wide glossaries. Configuration \u00b6 Abbreviations \u00b6 Source \u00b7 Extension The Abbreviations extension, which is part of the standard Markdown library, allows to add additional content to parts of the text which are then shown on hover , e.g. for glossaries: markdown_extensions : - abbr Snippets \u00b6 The Snippets extension, which is part of Python Markdown Extensions , allows to insert content from other files or other, regular content, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.snippets Usage \u00b6 Adding abbreviations \u00b6 When the Abbreviations extension is enabled, abbreviations can be defined with a special syntax similar to URLs and footnotes at any point in the Markdown document. Example : The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Result : The HTML specification is maintained by the W3C . Adding a glossary \u00b6 When Snippets is enabled, content from other files can be embedded, which is especially useful to include abbreviations from a central file \u2013 a glossary \u2013 and embed them into any other file. Example : docs/page.md The HTML specification is maintained by the W3C. --8<-- \"includes/abbreviations.md\" includes/abbreviations.md *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Result : The HTML specification is maintained by the W3C . Remember to locate the Markdown file containing the definitions outside of the docs folder (here includes is used), or MkDocs may complain about an unreferenced file.","title":"Abbreviations"},{"location":"markdown/examples/abbreviations/#abbreviations","text":"Technical documentation often incurs the usage of a lot of acronyms, which may need additional explanation, especially for new user of your project. For these matters, Material for MkDocs uses a combination of Markdown extensions to enable site-wide glossaries.","title":"Abbreviations"},{"location":"markdown/examples/abbreviations/#configuration","text":"","title":"Configuration"},{"location":"markdown/examples/abbreviations/#abbreviations_1","text":"Source \u00b7 Extension The Abbreviations extension, which is part of the standard Markdown library, allows to add additional content to parts of the text which are then shown on hover , e.g. for glossaries: markdown_extensions : - abbr","title":"Abbreviations"},{"location":"markdown/examples/abbreviations/#snippets","text":"The Snippets extension, which is part of Python Markdown Extensions , allows to insert content from other files or other, regular content, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.snippets","title":"Snippets"},{"location":"markdown/examples/abbreviations/#usage","text":"","title":"Usage"},{"location":"markdown/examples/abbreviations/#adding-abbreviations","text":"When the Abbreviations extension is enabled, abbreviations can be defined with a special syntax similar to URLs and footnotes at any point in the Markdown document. Example : The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Result : The HTML specification is maintained by the W3C .","title":"Adding abbreviations"},{"location":"markdown/examples/abbreviations/#adding-a-glossary","text":"When Snippets is enabled, content from other files can be embedded, which is especially useful to include abbreviations from a central file \u2013 a glossary \u2013 and embed them into any other file. Example : docs/page.md The HTML specification is maintained by the W3C. --8<-- \"includes/abbreviations.md\" includes/abbreviations.md *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Result : The HTML specification is maintained by the W3C . Remember to locate the Markdown file containing the definitions outside of the docs folder (here includes is used), or MkDocs may complain about an unreferenced file.","title":"Adding a glossary"},{"location":"markdown/examples/changing-the-colors/","text":"Changing the colors \u00b6 As any proper Material Design implementation, Material for MkDocs supports Google's original color palette , which can be easily configured through mkdocs.yml . Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables . Configuration \u00b6 Color palette \u00b6 Color scheme \u00b6 Source \u00b7 Default: default Material for MkDocs supports two color schemes : a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set via mkdocs.yml : theme : palette : scheme : default Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Primary color \u00b6 Source \u00b7 Default: indigo The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in mkdocs.yml to a valid color name: theme : palette : primary : indigo Click on a tile to change the primary color : red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) Accent color \u00b6 Source \u00b7 Default: indigo The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in mkdocs.yml by choosing a valid color name: theme : palette : accent : indigo Click on a tile to change the accent color : .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-accent\") document.body.setAttribute(\"data-md-color-accent\", attr) var name = document.querySelector(\"#__code_3 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) Accessibility \u2013 not all color combinations work well With 2 (color schemes) x 21 (primary colors) x 17 (accent color) = 714 combinations, it's impossible to ensure that all configurations provide a good user experience (e.g. yellow on light background ). Make sure that the color combination of your choosing provides enough contrast and tweak CSS variables where necessary. Color palette toggle \u00b6 It's also possible to add multiple color palettes, including a scheme , primary and accent color each, and let the user choose. A color palette toggle can be added via mkdocs.yml : theme : palette : # Light mode - media : \"(prefers-color-scheme: light)\" scheme : default primary : indigo accent : indigo toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode # Dark mode - media : \"(prefers-color-scheme: dark)\" scheme : slate primary : blue accent : blue toggle : icon : material/toggle-switch name : Switch to light mode In order to set a default theme based on user preference, add a valid media query to the media attribute. This will render a color palette toggle in the header next to the search bar: Light mode Dark mode A demo is worth a thousand words \u2014 check it out at squidfunk.github.io/mkdocs-material-insiders The toggle field allows to specify an icon and name for each palette. The toggle is rendered next to the search bar and will cycle through all defined color palettes: icon Default: none \u00b7 Required \u2013 This field must point to a valid icon path referencing any icon bundled with the theme , or the build will not succeed. Some popular combinations: + \u2013 material/toggle-switch-off-outline + material/toggle-switch + \u2013 material/weather-sunny + material/weather-night + \u2013 material/eye-outline + material/eye + \u2013 material/lightbulb-outline + material/lightbulb name Default: none \u00b7 Required \u2013 This field is used as the toggle's title attribute and should be set to a discernable name to improve accessibility. Customization \u00b6 Custom colors \u00b6 Source \u00b7 Difficulty: easy Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional stylesheet and tweak the values of the CSS variables. Let's say you're YouTube , and want to set the primary color to your brand's palette. Just add: : root { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } See the file containing the color definitions for a list of all CSS variables. Custom color schemes \u00b6 Source \u00b7 Difficulty: easy Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in the [ data-md-color-scheme = \"...\" ] attribute selector , which you can then set via mkdocs.yml as described in the color schemes section: [ data-md-color-scheme = \"youtube\" ] { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } Additionally, the slate color scheme defines all of it's colors via hsla color functions and deduces its colors from the --md-hue CSS variable. You can tune the slate theme with: [ data-md-color-scheme = \"slate\" ] { --md-hue : 210 ; /* [0, 360] */ }","title":"Changing the colors"},{"location":"markdown/examples/changing-the-colors/#changing-the-colors","text":"As any proper Material Design implementation, Material for MkDocs supports Google's original color palette , which can be easily configured through mkdocs.yml . Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables .","title":"Changing the colors"},{"location":"markdown/examples/changing-the-colors/#configuration","text":"","title":"Configuration"},{"location":"markdown/examples/changing-the-colors/#color-palette","text":"","title":"Color palette"},{"location":"markdown/examples/changing-the-colors/#color-scheme","text":"Source \u00b7 Default: default Material for MkDocs supports two color schemes : a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set via mkdocs.yml : theme : palette : scheme : default Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Color scheme"},{"location":"markdown/examples/changing-the-colors/#primary-color","text":"Source \u00b7 Default: indigo The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in mkdocs.yml to a valid color name: theme : palette : primary : indigo Click on a tile to change the primary color : red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) })","title":"Primary color"},{"location":"markdown/examples/changing-the-colors/#accent-color","text":"Source \u00b7 Default: indigo The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in mkdocs.yml by choosing a valid color name: theme : palette : accent : indigo Click on a tile to change the accent color : .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-accent\") document.body.setAttribute(\"data-md-color-accent\", attr) var name = document.querySelector(\"#__code_3 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) Accessibility \u2013 not all color combinations work well With 2 (color schemes) x 21 (primary colors) x 17 (accent color) = 714 combinations, it's impossible to ensure that all configurations provide a good user experience (e.g. yellow on light background ). Make sure that the color combination of your choosing provides enough contrast and tweak CSS variables where necessary.","title":"Accent color"},{"location":"markdown/examples/changing-the-colors/#color-palette-toggle","text":"It's also possible to add multiple color palettes, including a scheme , primary and accent color each, and let the user choose. A color palette toggle can be added via mkdocs.yml : theme : palette : # Light mode - media : \"(prefers-color-scheme: light)\" scheme : default primary : indigo accent : indigo toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode # Dark mode - media : \"(prefers-color-scheme: dark)\" scheme : slate primary : blue accent : blue toggle : icon : material/toggle-switch name : Switch to light mode In order to set a default theme based on user preference, add a valid media query to the media attribute. This will render a color palette toggle in the header next to the search bar: Light mode Dark mode A demo is worth a thousand words \u2014 check it out at squidfunk.github.io/mkdocs-material-insiders The toggle field allows to specify an icon and name for each palette. The toggle is rendered next to the search bar and will cycle through all defined color palettes: icon Default: none \u00b7 Required \u2013 This field must point to a valid icon path referencing any icon bundled with the theme , or the build will not succeed. Some popular combinations: + \u2013 material/toggle-switch-off-outline + material/toggle-switch + \u2013 material/weather-sunny + material/weather-night + \u2013 material/eye-outline + material/eye + \u2013 material/lightbulb-outline + material/lightbulb name Default: none \u00b7 Required \u2013 This field is used as the toggle's title attribute and should be set to a discernable name to improve accessibility.","title":"Color palette toggle"},{"location":"markdown/examples/changing-the-colors/#customization","text":"","title":"Customization"},{"location":"markdown/examples/changing-the-colors/#custom-colors","text":"Source \u00b7 Difficulty: easy Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional stylesheet and tweak the values of the CSS variables. Let's say you're YouTube , and want to set the primary color to your brand's palette. Just add: : root { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } See the file containing the color definitions for a list of all CSS variables.","title":"Custom colors"},{"location":"markdown/examples/changing-the-colors/#custom-color-schemes","text":"Source \u00b7 Difficulty: easy Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in the [ data-md-color-scheme = \"...\" ] attribute selector , which you can then set via mkdocs.yml as described in the color schemes section: [ data-md-color-scheme = \"youtube\" ] { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } Additionally, the slate color scheme defines all of it's colors via hsla color functions and deduces its colors from the --md-hue CSS variable. You can tune the slate theme with: [ data-md-color-scheme = \"slate\" ] { --md-hue : 210 ; /* [0, 360] */ }","title":"Custom color schemes"},{"location":"markdown/examples/getting-started/","text":"Getting started \u00b6 Material for MkDocs is a theme for MkDocs , a static site generator geared towards (technical) project documentation. If you're familiar with Python, you can install Material for MkDocs with pip , the Python package manager. If not, we recommended using docker . In case you're running into problems, consult the troubleshooting section. Installation \u00b6 with pip \u00b6 Material for MkDocs can be installed with pip : pip install mkdocs-material This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately. with docker \u00b6 The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material The mkdocs executable is provided as an entry point and serve is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections. The following plugins are bundled with the Docker image: mkdocs-minify-plugin mkdocs-redirects How to add plugins to the Docker image? Material for MkDocs bundles useful and common plugins while trying not to blow up the size of the official image. If the plugin you want to use is not included, create a new Dockerfile and extend the official Docker image with your custom installation routine: FROM squidfunk/mkdocs-material RUN pip install ... Next, you can build the image with the following command: docker build -t squidfunk/mkdocs-material . The new image can be used exactly like the official image. with git \u00b6 Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material . When cloning from git , you must install all required dependencies yourself: pip install -r mkdocs-material/requirements.txt","title":"Getting started"},{"location":"markdown/examples/getting-started/#getting-started","text":"Material for MkDocs is a theme for MkDocs , a static site generator geared towards (technical) project documentation. If you're familiar with Python, you can install Material for MkDocs with pip , the Python package manager. If not, we recommended using docker . In case you're running into problems, consult the troubleshooting section.","title":"Getting started"},{"location":"markdown/examples/getting-started/#installation","text":"","title":"Installation"},{"location":"markdown/examples/getting-started/#with-pip","text":"Material for MkDocs can be installed with pip : pip install mkdocs-material This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately.","title":"with pip"},{"location":"markdown/examples/getting-started/#with-docker","text":"The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material The mkdocs executable is provided as an entry point and serve is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections. The following plugins are bundled with the Docker image: mkdocs-minify-plugin mkdocs-redirects How to add plugins to the Docker image? Material for MkDocs bundles useful and common plugins while trying not to blow up the size of the official image. If the plugin you want to use is not included, create a new Dockerfile and extend the official Docker image with your custom installation routine: FROM squidfunk/mkdocs-material RUN pip install ... Next, you can build the image with the following command: docker build -t squidfunk/mkdocs-material . The new image can be used exactly like the official image.","title":"with docker"},{"location":"markdown/examples/getting-started/#with-git","text":"Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material . When cloning from git , you must install all required dependencies yourself: pip install -r mkdocs-material/requirements.txt","title":"with git"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/","text":"title: MkDocs\u7b14\u8bb0 author: mdeng li created: 2021-04-10 uid: 202104101115 tags: mkdocs MkDocs\u7b14\u8bb0 \u00b6 \u5b89\u88c5\u4e0e\u57fa\u672c\u64cd\u4f5c \u00b6 \u5728wsl bash\u4e0b\u5b89\u88c5\u548c\u521b\u5efa\u4e00\u4e2a my-project pip3 install mkdocs mkdocs -v mkdocs new my-project \u672c\u5730\u9884\u89c8 cd my-project mkdocs serve \u6253\u5f00 http://127.0.0.1:8000/ , \u5c31\u53ef\u4ee5\u5728\u672c\u5730\u9884\u89c8\u4e86 \u5982\u679c\u9700\u8981\u751f\u6210html,\u5219 mkdocs build \u5c31\u53ef\u4ee5\u4e86 \u5982\u679c\u9700\u8981\u53d1\u5e03\u5230github\u4e0a, \u5219\u9700\u8981 mkdocs gh-deploy , \u8be6\u89c1 \u540e\u6587[[MkDocs\u7b14\u8bb0#^a2d1bd|\u6211\u7684mkdocs\u5b9e\u8df5\u53ca\u53d1\u5e03]] \u4e3b\u9898\u5b89\u88c5\u4e0e\u4f7f\u7528 \u00b6 \u4ee5 rtd-dropdown \u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e pip3 install mkdocs-rtd-dropdown \u7136\u540e\u5728yaml\u6587\u4ef6\u4e2d\u6dfb\u52a0 theme: rtd-dropdown \u5c31\u53ef\u4ee5\u4e86 \u5176\u4ed6\u4e3b\u9898: pip3 install mkdocs-bootswatch \u4e3a\u4e3b\u9898\u96c6\u5408, \u8be5\u96c6\u5408\u542b\u6709\u7684\u4e3b\u9898\u5982\u4e0b: amelia cerulean cosmo cyborg flatly journal readable simplex slate spacelab united yeti mkdocs_material \u4e3b\u9898: pip3 install mkdocs mkdocs-material pip3 install mkdocs-redirects pip3 install mkdocs-minify-plugin TIPS: : 1. \u53ef\u4ee5\u628a mkdocs-material \u4ed3\u5e93\u76f4\u63a5clone\u4e0b\u6765\u4f5c\u4e3ademo, \u9884\u89c8 ; \u8be5\u4e3b\u9898\u751f\u6210\u7684html\u652f\u6301\u4e2d\u6587\u641c\u7d22 \u63d2\u4ef6 \u00b6 \u591a\u4e2ayml\u5d4c\u5957\u7684\u63d2\u4ef6 \u00b6 pip install mkdocs-monorepo-plugin \u6392\u9664\u6587\u4ef6\u7684\u63d2\u4ef6 \u00b6 mkdocs-exclude \u8fd8\u6ca1\u8bd5 MkDocs Awesome Pages Plugin \u00b6 MkDocs Awesome Pages Plugin \u5b89\u88c5 \u00b6 pip3 install mkdocs-awesome-pages-plugin \u5178\u578b\u4f7f\u7528 \u00b6 \u5728 mkdocs.yml \u91cc\u8bbe\u7f6e\u5982\u4e0b: # Plugins plugins: - search - awesome-pages: filename: .pages.yml # \u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u540d\uff0c\u9ed8\u8ba4\u6587\u4ef6\u540d\u662f .pages collapse_single_pages: false # \u5f53\u76ee\u5f55\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6\u65f6\u662f\u5426\u6536\u7f29\u76ee\u5f55 strict: false # \u5f53 arrange \u914d\u7f6e\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u662f\u662f\u5426\u62a5\u9519 nav: - \u9996\u9875: index.md - ... \u5c31\u4f1a\u81ea\u52a8\u6839\u636e\u5b50\u76ee\u5f55, \u751f\u6210\u6587\u6863. \u6d4b\u8bd5\u8868\u660e: - \u4e0d\u5199 .pages.yml \u4e5f\u662f\u6ca1\u6709\u5173\u7cfb\u7684 - \u6ce8\u610f\u4e8b\u9879 \u00b6 \u5f53 mkdocs.yml \u91cc\u6709 nav \u548c pages \u5165\u53e3\u7684\u8bdd, \u8be5\u63d2\u4ef6\u4e0d\u8d77\u4f5c\u7528. \u89e3\u51b3\u65b9\u5f0f\u6709\u4e24\u79cd: 1. \u5220\u9664\u8fd9\u4e9b\u5165\u53e3 2. \u6dfb\u52a0 ... \u5165\u53e3 \u8c03\u7528\u5916\u90e8\u6587\u4ef6\u5939\u4e2d\u7684\u6e90\u6587\u4ef6 \u00b6 \u5b89\u88c5 markdown-include pip3 install markdown-include \u7136\u540e\u5728yml\u91cc\u8bbe\u7f6e: markdown_extensions: - markdown_include.include: base_path: docs \u6bd4\u5982\u8981\u6709\u5982\u4e0b\u76ee\u5f55 . \u251c\u2500\u2500 mkdocs/docs \u251c\u2500\u2500 v1/c.md \u2514\u2500\u2500 v2 \u9700\u8981\u5c06 v1 \u76ee\u5f55\u4e0b\u7684 c.md \u52a0\u5230\u7f51\u9875\u91cc, \u5219\u53ea\u7528\u5728docs\u4e0b\u5efa\u7acb\u4e00\u4e2a c.md , \u5176\u4e2d c.md \u7684\u5185\u5bb9\u4e3a: `` \u5c31\u53ef\u4ee5\u4e86. \u4e0a\u9762\u7ed9\u51fa\u7684\u662fmd\u6587\u4ef6\u76f8\u5bf9\u4e8edocs\u7684\u8def\u5f84 \u53c2\u8003\u8d44\u6599 \u8bbe\u7f6e\u5bc6\u7801\u4fdd\u62a4 \u00b6 mkdocs-encryptcontent-plugin \u5b89\u88c5 pip3 install mkdocs-encryptcontent-plugin \u5728 mkdocs.yml \u91cc\u8bbe\u7f6e\u5168\u5c40\u5bc6\u7801: plugins: - encryptcontent: global_password: 'your_password' \u63d2\u4ef6\u8d44\u6e90 \u00b6 MkDocs Plugins yml\u914d\u7f6e \u00b6 \u516c\u5f0f\u652f\u6301 \u00b6 ^ac27f3 \u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u6dfb\u52a0 extra_javascript: - 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML' \u53c2\u8003 \u8bbe\u7f6e\u6e90\u6587\u4ef6\u76ee\u5f55 \u00b6 docs_dir: 'docs' \u6211\u7684demo \u00b6 material-mkdocs-github , \u652f\u6301\u5982\u4e0b\u529f\u80fd: \u4e2d\u6587\u641c\u7d22 \u516c\u5f0f\u663e\u793a \u591a\u7ea7yml\u5d4c\u5957 (\u5b89\u88c5\u4e86 mkdocs-monorepo-plugin ) js\u914d\u7f6e \u00b6 \u652f\u6301\u663e\u793a\u4e94\u7ebf\u8c31 \u00b6 ^f27725 \u4e0b\u8f7d abcjs-plugin-min.js , \u5e76\u5c06\u8be5\u6587\u4ef6\u653e\u5165\u5230 docs/javascripts \u76ee\u5f55\u4e0b \u7136\u540e mkdocs.yml \u91cc\u6dfb\u52a0: extra_javascript: - 'javascripts/abcjs-plugin-min.js' \u5c31\u53ef\u4ee5\u6e32\u67d3md\u4e2d\u7684\u4e94\u7ebf\u8c31\u4e86,\u793a\u4f8b\u5982\u4e0b: ```abc X: 1 T: Cooley's M: 4/4 L: 1/8 K: Emins |:D2|\"Em\"EB{c}BA B2 EB|~B2 AB dBAG|\\ \"D\"FDAD BDAD|FDAD dAFD| DD DD \"D\"afe^c dBAF|\"Em\"DEFD E2:| \"D\"afe^c dBAF|\"Em\"DEFD E2:| ``` \u6211\u7684mkdocs \u00b6 ^c7ac78 \u4f4d\u4e8e material-mkdocs-github_pub.txt \u53d1\u5e03\u5230github\u7684\u6d41\u7a0b \u00b6 ^a2d1bd \u9996\u5148\u5728github\u521b\u5efa\u4e00\u4e2a\u4ed3\u5e93\u540d\u4e3amkdocs, \u9009\u4e2d Add a README file , wsl\u4e0b\u5728 knowldegBase \u76ee\u5f55\u4e0b git clone https://github.com/\u6211\u7684\u8d26\u53f7/mkdocs.git bash\u4e0b cd mkdocs \u5728 mkdocs \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a docs \u7528\u4e8e\u5b58\u653e\u53d1\u5e03\u7528\u7684md\u6587\u4ef6; \u5c06docs\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u90fd\u590d\u5236\u5230 docs \u4e2d \u5728 knowldegBase\\mkdocs \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a mkdocs.yml \u8bbe\u7f6e\u6e90\u6587\u4ef6\u76ee\u5f55 docs_dir: 'docs' mkdocs gh-deploy \u53d1\u5e03\u7f51\u9875\u5230github\u4e0a. \u6253\u5f00 https://\u6211\u7684\u8d26\u53f7.github.io/mkdocs/ \u5373\u53ef TIPS: 1. \u6211\u90fd\u662f\u5728wsl\u4e0b\u64cd\u4f5c\u7684 2. docs_dir \u76ee\u5f55\u4e0b\u7684\u6240\u6709md\u6587\u4ef6\u90fd\u4f1a\u88ab\u8f6c\u6362, \u5373\u4f7f\u6ca1\u6709\u5728yml\u91cc\u6ca1\u6709\u7ed9\u51fa\u94fe\u63a5. 3. \u53ef\u4ee5\u5229\u7528 pip3 install mkdocs-monorepo-plugin \u63d2\u4ef6\u5b9e\u73b0\u591a\u4e2ayml\u7684\u5d4c\u5957 ( Notes : \u975e\u6700\u65b0\u72b6\u6001) nav: - \u9996\u9875: index.md - \u5174\u8da3: - Installation: getting-started.md - \u5de5\u4f5c: - Changing the colors: setup/changing-the-colors.md - \u529e\u516c: - Abbreviations: reference/abbreviations.md - mkdocs: mkdocs\u8bed\u6cd5.md - Insiders: - Sponsorship: insiders/index.md - v1: '!include ./v1/mkdocs.yml' - v2: '!include ./v2/mkdocs.yml' \u5b9e\u9645\u7684\u76ee\u5f55\u5982\u4e0b: . \u251c\u2500\u2500 docs \u251c\u2500\u2500 material-mkdocs-github.txt \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 site \u251c\u2500\u2500 v1 \u2514\u2500\u2500 v2 \u5176\u4e2d v1 \u548c v2 \u76ee\u5f55\u4e0b\u542b\u6709 yml \u6587\u4ef6\u548c doc \u6587\u4ef6\u5939. \u53d1\u5e03\u5230gitee\u7684\u6d41\u7a0b \u00b6 \u5047\u8bbe\u5df2\u7ecf\u53ef\u4ee5\u53d1\u5e03\u5230GitHub\u4e86, \u8fd9\u91cc\u9700\u8981\u540c\u6b65\u53d1\u5e03\u5230gitee, \u6b65\u9aa4\u5982\u4e0b: gitee\u4e0a\u5efa\u4e2a\u4ed3\u5e93 mkdocs bash\u4e0b\u8fdb\u884c\u6dfb\u52a0gitee\u4ed3\u5e93 git remote -v git remote add gitee https://gitee.com/mdeng1985/mkdocs.git 4. \u7f16\u8bd1\u7f51\u9875 mkdocs build 5. \u66f4\u65b0site\u6587\u4ef6\u5939\u5185\u5bb9 ```bash git add site git commit -m up ``` \u63a8\u9001\u5230gitee: git push -u gitee gitee\u7684\u9875\u9762\u64cd\u4f5c: mkdocs\u4ed3\u5e93\u9875\u9762-\u670d\u52a1-gitee pages, \u8bbe\u7f6e\u90e8\u7f72\u5206\u652f(\u6211\u7684\u5206\u652f\u662fmain)\u548c\u90e8\u7f72\u76ee\u5f55\u5373\u53ef. \u90e8\u7f72\u76ee\u5f55\u586bsite\u76ee\u5f55. \u6253\u5f00\u6211\u7684\u7f51\u9875\u5373\u53ef: http://mdeng1985.gitee.io/mkdocs/ \u603b\u7ed3: 1. github\u5206\u652f\u662fgp-pages 2. gitee\u5206\u652f\u662fmain\u5206\u652f. \u53c2\u8003\u8d44\u6599 \u5c06\u4e00\u4e2a\u9879\u76ee\u540c\u65f6\u6258\u7ba1\u81f3gitee\u548cgithub # 070 \u90e8\u7f72mkdocs \u5230\u7801\u4e91(gitee) \u76f8\u5173\u914d\u7f6e \u00b6 \u5b89\u88c5 MkDocs Awesome Pages Plugin , \u8be5\u63d2\u4ef6\u7684\u4f5c\u7528\u5c31\u662f\u4e0d\u7528\u5728 mkdocs.yml \u91cc\u5bf9\u6e90\u6587\u4ef6\u8fdb\u884c\u7ec4\u7ec7. yml \u7684\u548c\u8be5\u63d2\u4ef6\u76f8\u5173\u7684\u5185\u5bb9\u5982\u4e0b: plugins: - awesome-pages: filename: .pages.yml # \u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u540d\uff0c\u9ed8\u8ba4\u6587\u4ef6\u540d\u662f .pages collapse_single_pages: false # \u5f53\u76ee\u5f55\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6\u65f6\u662f\u5426\u6536\u7f29\u76ee\u5f55 strict: false # \u5f53 arrange \u914d\u7f6e\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u662f\u662f\u5426\u62a5\u9519 nav: - \u9996\u9875: index.md - ... \u6ce8\u610f: .pages.yml \u53ef\u5199\u53ef\u4e0d\u5199. \u5b89\u88c5 markdown-include \u63d2\u4ef6, \u8be5\u63d2\u4ef6\u7684\u4f5c\u7528\u5c31\u662f\u5728docs\u76ee\u5f55\u4e0b\u53ef\u4ee5\u8c03\u7528\u5916\u90e8\u7684markdown\u6587\u4ef6, \u5177\u4f53\u7528\u6cd5\u89c1[[MkDocs\u7b14\u8bb0#^c7ac78]] \u5b89\u88c5 abcjs-plugin-min.js , \u8be5js\u7684\u4f5c\u7528\u662f\u6b63\u786e\u663e\u793a\u4e94\u7ebf\u8c31, \u8be6\u7ec6\u7528\u6cd5[[MkDocs\u7b14\u8bb0#^f27725]] yml \u8bbe\u7f6e\u516c\u5f0f\u652f\u6301, \u89c1[[MkDocs\u7b14\u8bb0#^ac27f3]] \u53c2\u8003\u8d44\u6599 \u00b6 \u5b98\u65b9\u4e3b\u9875 yml\u5d4c\u5957\u53ca\u9ad8\u9636\u4f7f\u7528","title":"MkDocs\u7b14\u8bb0"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#mkdocs","text":"","title":"MkDocs\u7b14\u8bb0"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_1","text":"\u5728wsl bash\u4e0b\u5b89\u88c5\u548c\u521b\u5efa\u4e00\u4e2a my-project pip3 install mkdocs mkdocs -v mkdocs new my-project \u672c\u5730\u9884\u89c8 cd my-project mkdocs serve \u6253\u5f00 http://127.0.0.1:8000/ , \u5c31\u53ef\u4ee5\u5728\u672c\u5730\u9884\u89c8\u4e86 \u5982\u679c\u9700\u8981\u751f\u6210html,\u5219 mkdocs build \u5c31\u53ef\u4ee5\u4e86 \u5982\u679c\u9700\u8981\u53d1\u5e03\u5230github\u4e0a, \u5219\u9700\u8981 mkdocs gh-deploy , \u8be6\u89c1 \u540e\u6587[[MkDocs\u7b14\u8bb0#^a2d1bd|\u6211\u7684mkdocs\u5b9e\u8df5\u53ca\u53d1\u5e03]]","title":"\u5b89\u88c5\u4e0e\u57fa\u672c\u64cd\u4f5c"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_2","text":"\u4ee5 rtd-dropdown \u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e pip3 install mkdocs-rtd-dropdown \u7136\u540e\u5728yaml\u6587\u4ef6\u4e2d\u6dfb\u52a0 theme: rtd-dropdown \u5c31\u53ef\u4ee5\u4e86 \u5176\u4ed6\u4e3b\u9898: pip3 install mkdocs-bootswatch \u4e3a\u4e3b\u9898\u96c6\u5408, \u8be5\u96c6\u5408\u542b\u6709\u7684\u4e3b\u9898\u5982\u4e0b: amelia cerulean cosmo cyborg flatly journal readable simplex slate spacelab united yeti mkdocs_material \u4e3b\u9898: pip3 install mkdocs mkdocs-material pip3 install mkdocs-redirects pip3 install mkdocs-minify-plugin TIPS: : 1. \u53ef\u4ee5\u628a mkdocs-material \u4ed3\u5e93\u76f4\u63a5clone\u4e0b\u6765\u4f5c\u4e3ademo, \u9884\u89c8 ; \u8be5\u4e3b\u9898\u751f\u6210\u7684html\u652f\u6301\u4e2d\u6587\u641c\u7d22","title":"\u4e3b\u9898\u5b89\u88c5\u4e0e\u4f7f\u7528"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_3","text":"","title":"\u63d2\u4ef6"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#yml","text":"pip install mkdocs-monorepo-plugin","title":"\u591a\u4e2ayml\u5d4c\u5957\u7684\u63d2\u4ef6"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_4","text":"mkdocs-exclude \u8fd8\u6ca1\u8bd5","title":"\u6392\u9664\u6587\u4ef6\u7684\u63d2\u4ef6"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#mkdocs-awesome-pages-plugin","text":"MkDocs Awesome Pages Plugin","title":"MkDocs Awesome Pages Plugin"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_5","text":"pip3 install mkdocs-awesome-pages-plugin","title":"\u5b89\u88c5"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_6","text":"\u5728 mkdocs.yml \u91cc\u8bbe\u7f6e\u5982\u4e0b: # Plugins plugins: - search - awesome-pages: filename: .pages.yml # \u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u540d\uff0c\u9ed8\u8ba4\u6587\u4ef6\u540d\u662f .pages collapse_single_pages: false # \u5f53\u76ee\u5f55\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6\u65f6\u662f\u5426\u6536\u7f29\u76ee\u5f55 strict: false # \u5f53 arrange \u914d\u7f6e\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u662f\u662f\u5426\u62a5\u9519 nav: - \u9996\u9875: index.md - ... \u5c31\u4f1a\u81ea\u52a8\u6839\u636e\u5b50\u76ee\u5f55, \u751f\u6210\u6587\u6863. \u6d4b\u8bd5\u8868\u660e: - \u4e0d\u5199 .pages.yml \u4e5f\u662f\u6ca1\u6709\u5173\u7cfb\u7684 -","title":"\u5178\u578b\u4f7f\u7528"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_7","text":"\u5f53 mkdocs.yml \u91cc\u6709 nav \u548c pages \u5165\u53e3\u7684\u8bdd, \u8be5\u63d2\u4ef6\u4e0d\u8d77\u4f5c\u7528. \u89e3\u51b3\u65b9\u5f0f\u6709\u4e24\u79cd: 1. \u5220\u9664\u8fd9\u4e9b\u5165\u53e3 2. \u6dfb\u52a0 ... \u5165\u53e3","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_8","text":"\u5b89\u88c5 markdown-include pip3 install markdown-include \u7136\u540e\u5728yml\u91cc\u8bbe\u7f6e: markdown_extensions: - markdown_include.include: base_path: docs \u6bd4\u5982\u8981\u6709\u5982\u4e0b\u76ee\u5f55 . \u251c\u2500\u2500 mkdocs/docs \u251c\u2500\u2500 v1/c.md \u2514\u2500\u2500 v2 \u9700\u8981\u5c06 v1 \u76ee\u5f55\u4e0b\u7684 c.md \u52a0\u5230\u7f51\u9875\u91cc, \u5219\u53ea\u7528\u5728docs\u4e0b\u5efa\u7acb\u4e00\u4e2a c.md , \u5176\u4e2d c.md \u7684\u5185\u5bb9\u4e3a: `` \u5c31\u53ef\u4ee5\u4e86. \u4e0a\u9762\u7ed9\u51fa\u7684\u662fmd\u6587\u4ef6\u76f8\u5bf9\u4e8edocs\u7684\u8def\u5f84 \u53c2\u8003\u8d44\u6599","title":"\u8c03\u7528\u5916\u90e8\u6587\u4ef6\u5939\u4e2d\u7684\u6e90\u6587\u4ef6"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_9","text":"mkdocs-encryptcontent-plugin \u5b89\u88c5 pip3 install mkdocs-encryptcontent-plugin \u5728 mkdocs.yml \u91cc\u8bbe\u7f6e\u5168\u5c40\u5bc6\u7801: plugins: - encryptcontent: global_password: 'your_password'","title":"\u8bbe\u7f6e\u5bc6\u7801\u4fdd\u62a4"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_10","text":"MkDocs Plugins","title":"\u63d2\u4ef6\u8d44\u6e90"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#yml_1","text":"","title":"yml\u914d\u7f6e"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_11","text":"^ac27f3 \u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u6dfb\u52a0 extra_javascript: - 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML' \u53c2\u8003","title":"\u516c\u5f0f\u652f\u6301"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_12","text":"docs_dir: 'docs'","title":"\u8bbe\u7f6e\u6e90\u6587\u4ef6\u76ee\u5f55"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#demo","text":"material-mkdocs-github , \u652f\u6301\u5982\u4e0b\u529f\u80fd: \u4e2d\u6587\u641c\u7d22 \u516c\u5f0f\u663e\u793a \u591a\u7ea7yml\u5d4c\u5957 (\u5b89\u88c5\u4e86 mkdocs-monorepo-plugin )","title":"\u6211\u7684demo"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#js","text":"","title":"js\u914d\u7f6e"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_13","text":"^f27725 \u4e0b\u8f7d abcjs-plugin-min.js , \u5e76\u5c06\u8be5\u6587\u4ef6\u653e\u5165\u5230 docs/javascripts \u76ee\u5f55\u4e0b \u7136\u540e mkdocs.yml \u91cc\u6dfb\u52a0: extra_javascript: - 'javascripts/abcjs-plugin-min.js' \u5c31\u53ef\u4ee5\u6e32\u67d3md\u4e2d\u7684\u4e94\u7ebf\u8c31\u4e86,\u793a\u4f8b\u5982\u4e0b: ```abc X: 1 T: Cooley's M: 4/4 L: 1/8 K: Emins |:D2|\"Em\"EB{c}BA B2 EB|~B2 AB dBAG|\\ \"D\"FDAD BDAD|FDAD dAFD| DD DD \"D\"afe^c dBAF|\"Em\"DEFD E2:| \"D\"afe^c dBAF|\"Em\"DEFD E2:| ```","title":"\u652f\u6301\u663e\u793a\u4e94\u7ebf\u8c31"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#mkdocs_1","text":"^c7ac78 \u4f4d\u4e8e material-mkdocs-github_pub.txt","title":"\u6211\u7684mkdocs"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#github","text":"^a2d1bd \u9996\u5148\u5728github\u521b\u5efa\u4e00\u4e2a\u4ed3\u5e93\u540d\u4e3amkdocs, \u9009\u4e2d Add a README file , wsl\u4e0b\u5728 knowldegBase \u76ee\u5f55\u4e0b git clone https://github.com/\u6211\u7684\u8d26\u53f7/mkdocs.git bash\u4e0b cd mkdocs \u5728 mkdocs \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a docs \u7528\u4e8e\u5b58\u653e\u53d1\u5e03\u7528\u7684md\u6587\u4ef6; \u5c06docs\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u90fd\u590d\u5236\u5230 docs \u4e2d \u5728 knowldegBase\\mkdocs \u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a mkdocs.yml \u8bbe\u7f6e\u6e90\u6587\u4ef6\u76ee\u5f55 docs_dir: 'docs' mkdocs gh-deploy \u53d1\u5e03\u7f51\u9875\u5230github\u4e0a. \u6253\u5f00 https://\u6211\u7684\u8d26\u53f7.github.io/mkdocs/ \u5373\u53ef TIPS: 1. \u6211\u90fd\u662f\u5728wsl\u4e0b\u64cd\u4f5c\u7684 2. docs_dir \u76ee\u5f55\u4e0b\u7684\u6240\u6709md\u6587\u4ef6\u90fd\u4f1a\u88ab\u8f6c\u6362, \u5373\u4f7f\u6ca1\u6709\u5728yml\u91cc\u6ca1\u6709\u7ed9\u51fa\u94fe\u63a5. 3. \u53ef\u4ee5\u5229\u7528 pip3 install mkdocs-monorepo-plugin \u63d2\u4ef6\u5b9e\u73b0\u591a\u4e2ayml\u7684\u5d4c\u5957 ( Notes : \u975e\u6700\u65b0\u72b6\u6001) nav: - \u9996\u9875: index.md - \u5174\u8da3: - Installation: getting-started.md - \u5de5\u4f5c: - Changing the colors: setup/changing-the-colors.md - \u529e\u516c: - Abbreviations: reference/abbreviations.md - mkdocs: mkdocs\u8bed\u6cd5.md - Insiders: - Sponsorship: insiders/index.md - v1: '!include ./v1/mkdocs.yml' - v2: '!include ./v2/mkdocs.yml' \u5b9e\u9645\u7684\u76ee\u5f55\u5982\u4e0b: . \u251c\u2500\u2500 docs \u251c\u2500\u2500 material-mkdocs-github.txt \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 site \u251c\u2500\u2500 v1 \u2514\u2500\u2500 v2 \u5176\u4e2d v1 \u548c v2 \u76ee\u5f55\u4e0b\u542b\u6709 yml \u6587\u4ef6\u548c doc \u6587\u4ef6\u5939.","title":"\u53d1\u5e03\u5230github\u7684\u6d41\u7a0b"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#gitee","text":"\u5047\u8bbe\u5df2\u7ecf\u53ef\u4ee5\u53d1\u5e03\u5230GitHub\u4e86, \u8fd9\u91cc\u9700\u8981\u540c\u6b65\u53d1\u5e03\u5230gitee, \u6b65\u9aa4\u5982\u4e0b: gitee\u4e0a\u5efa\u4e2a\u4ed3\u5e93 mkdocs bash\u4e0b\u8fdb\u884c\u6dfb\u52a0gitee\u4ed3\u5e93 git remote -v git remote add gitee https://gitee.com/mdeng1985/mkdocs.git 4. \u7f16\u8bd1\u7f51\u9875 mkdocs build 5. \u66f4\u65b0site\u6587\u4ef6\u5939\u5185\u5bb9 ```bash git add site git commit -m up ``` \u63a8\u9001\u5230gitee: git push -u gitee gitee\u7684\u9875\u9762\u64cd\u4f5c: mkdocs\u4ed3\u5e93\u9875\u9762-\u670d\u52a1-gitee pages, \u8bbe\u7f6e\u90e8\u7f72\u5206\u652f(\u6211\u7684\u5206\u652f\u662fmain)\u548c\u90e8\u7f72\u76ee\u5f55\u5373\u53ef. \u90e8\u7f72\u76ee\u5f55\u586bsite\u76ee\u5f55. \u6253\u5f00\u6211\u7684\u7f51\u9875\u5373\u53ef: http://mdeng1985.gitee.io/mkdocs/ \u603b\u7ed3: 1. github\u5206\u652f\u662fgp-pages 2. gitee\u5206\u652f\u662fmain\u5206\u652f. \u53c2\u8003\u8d44\u6599 \u5c06\u4e00\u4e2a\u9879\u76ee\u540c\u65f6\u6258\u7ba1\u81f3gitee\u548cgithub # 070 \u90e8\u7f72mkdocs \u5230\u7801\u4e91(gitee)","title":"\u53d1\u5e03\u5230gitee\u7684\u6d41\u7a0b"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_14","text":"\u5b89\u88c5 MkDocs Awesome Pages Plugin , \u8be5\u63d2\u4ef6\u7684\u4f5c\u7528\u5c31\u662f\u4e0d\u7528\u5728 mkdocs.yml \u91cc\u5bf9\u6e90\u6587\u4ef6\u8fdb\u884c\u7ec4\u7ec7. yml \u7684\u548c\u8be5\u63d2\u4ef6\u76f8\u5173\u7684\u5185\u5bb9\u5982\u4e0b: plugins: - awesome-pages: filename: .pages.yml # \u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u540d\uff0c\u9ed8\u8ba4\u6587\u4ef6\u540d\u662f .pages collapse_single_pages: false # \u5f53\u76ee\u5f55\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6\u65f6\u662f\u5426\u6536\u7f29\u76ee\u5f55 strict: false # \u5f53 arrange \u914d\u7f6e\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u662f\u662f\u5426\u62a5\u9519 nav: - \u9996\u9875: index.md - ... \u6ce8\u610f: .pages.yml \u53ef\u5199\u53ef\u4e0d\u5199. \u5b89\u88c5 markdown-include \u63d2\u4ef6, \u8be5\u63d2\u4ef6\u7684\u4f5c\u7528\u5c31\u662f\u5728docs\u76ee\u5f55\u4e0b\u53ef\u4ee5\u8c03\u7528\u5916\u90e8\u7684markdown\u6587\u4ef6, \u5177\u4f53\u7528\u6cd5\u89c1[[MkDocs\u7b14\u8bb0#^c7ac78]] \u5b89\u88c5 abcjs-plugin-min.js , \u8be5js\u7684\u4f5c\u7528\u662f\u6b63\u786e\u663e\u793a\u4e94\u7ebf\u8c31, \u8be6\u7ec6\u7528\u6cd5[[MkDocs\u7b14\u8bb0#^f27725]] yml \u8bbe\u7f6e\u516c\u5f0f\u652f\u6301, \u89c1[[MkDocs\u7b14\u8bb0#^ac27f3]]","title":"\u76f8\u5173\u914d\u7f6e"},{"location":"mkdocs/MkDocs%E7%AC%94%E8%AE%B0/#_15","text":"\u5b98\u65b9\u4e3b\u9875 yml\u5d4c\u5957\u53ca\u9ad8\u9636\u4f7f\u7528","title":"\u53c2\u8003\u8d44\u6599"},{"location":"%E9%92%A2%E7%90%B4/0-%E9%92%A2%E7%90%B4%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/","text":"title: \u94a2\u7434\u5b66\u4e60\u7b14\u8bb01--\u8981\u70b9123 author: mdeng li created: 2021-04-16 uid: 202104162138 description: tags: \u94a2\u7434 \u94a2\u7434\u57fa\u7840\u77e5\u8bc6 \u00b6 20201227 simply piano \u97f3\u7b26\u7684\u957f\u5ea6 \u00b6 X: 1 M:4/4 L:1/8 T:1/8\u97f3\u7b26~\u5168\u97f3\u7b26 C1,|C2|C3,|C4|C8 \u4ece\u5de6\u5230\u53f3\u8fb9: \u215b\u97f3\u7b26\uff0c\u00bc\u97f3\u7b26\uff0c\u215c\u97f3\u7b26\uff08\u00bc\u9644\u70b9\u97f3\u7b26\uff09\uff0c\u00bd\u97f3\u7b26\uff0c\u5168\u97f3\u7b26 music-abc \u8bed\u6cd5demo \u00b6 X:1 T:The Legacy Jig M:6/8 L:1/8 R:jig K:G GFG BAB | gfg gab | GFG BAB | d2A AFD | GFG BAB | gfg gab | age edB |1 dBA AFD :|2 dBA ABd |: efe edB | dBA ABd | efe edB | gdB ABd | efe edB | d2d def | gfe edB |1 dBA ABd :|2 dBA AFD |] Chorus music \u548c\u5f26 X: 1 T: Chorus V: T1 clef=treble name=\"Soprano\" V: T2 clef=treble name=\"Alto\" V: B1 clef=bass name=\"Tenor\" V: B2 clef=bass name=\"Bass\" L:1/8 K:G P:First Part [V: T1]\"C\"ed\"Am\"ed \"F\"cd\"G7\"gf | [V: T2]GGAA- A2BB | [V: B1]C3D- DF,3 | [V: B2]C,2A,,2 F,,2G,,2 | \u6b63\u6587text \u6b63\u6587text","title":"0 \u94a2\u7434\u57fa\u672c\u77e5\u8bc6"},{"location":"%E9%92%A2%E7%90%B4/0-%E9%92%A2%E7%90%B4%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/#_1","text":"20201227 simply piano","title":"\u94a2\u7434\u57fa\u7840\u77e5\u8bc6"},{"location":"%E9%92%A2%E7%90%B4/0-%E9%92%A2%E7%90%B4%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/#_2","text":"X: 1 M:4/4 L:1/8 T:1/8\u97f3\u7b26~\u5168\u97f3\u7b26 C1,|C2|C3,|C4|C8 \u4ece\u5de6\u5230\u53f3\u8fb9: \u215b\u97f3\u7b26\uff0c\u00bc\u97f3\u7b26\uff0c\u215c\u97f3\u7b26\uff08\u00bc\u9644\u70b9\u97f3\u7b26\uff09\uff0c\u00bd\u97f3\u7b26\uff0c\u5168\u97f3\u7b26","title":"\u97f3\u7b26\u7684\u957f\u5ea6"},{"location":"%E9%92%A2%E7%90%B4/0-%E9%92%A2%E7%90%B4%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/#music-abc-demo","text":"X:1 T:The Legacy Jig M:6/8 L:1/8 R:jig K:G GFG BAB | gfg gab | GFG BAB | d2A AFD | GFG BAB | gfg gab | age edB |1 dBA AFD :|2 dBA ABd |: efe edB | dBA ABd | efe edB | gdB ABd | efe edB | d2d def | gfe edB |1 dBA ABd :|2 dBA AFD |] Chorus music \u548c\u5f26 X: 1 T: Chorus V: T1 clef=treble name=\"Soprano\" V: T2 clef=treble name=\"Alto\" V: B1 clef=bass name=\"Tenor\" V: B2 clef=bass name=\"Bass\" L:1/8 K:G P:First Part [V: T1]\"C\"ed\"Am\"ed \"F\"cd\"G7\"gf | [V: T2]GGAA- A2BB | [V: B1]C3D- DF,3 | [V: B2]C,2A,,2 F,,2G,,2 | \u6b63\u6587text \u6b63\u6587text","title":"music-abc \u8bed\u6cd5demo"},{"location":"%E9%92%A2%E7%90%B4/1-%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%8C%87%E6%B3%95/","text":"title: 1-\u4e00\u4e9b\u57fa\u672c\u6307\u6cd5 author: mdeng li created: 2021-04-16 uid: 202104162140 description: tags: \u94a2\u7434 1-\u4e00\u4e9b\u57fa\u672c\u6307\u6cd5 \u00b6 CDEFG \u00b6 \u6307\u6cd5\u91cc\u76841\u5747\u4e3a\u5927\u62c7\u6307 \u53f3\u624b\u6307\u6cd5 X: 1 T:\u53f3\u624bCDEFG L:1/8 \"1\"\"C\"CDE\"4\"\"F\"F\"5\"\"G\"G T:\u53f3\u624bCDEFG \"1\"\"C\"CDE\"4\"\"F\"F\"5\"\"G\"G \u7b80\u8c31\u540d: CDEFG \u6307\u6cd5\uff1a12345 \u5de6\u624b\u6307\u6cd5 X: 1 T:\u5de6\u624bCDEFG L:1/8 V: B2 clef=bass [V: B2] \"5\"\"C\"1C,1D,1E,\"2\"\"F\"1F,\"1\"\"G\"1G, | CDEFGA \u00b6 \u53f3\u624b\u6307\u6cd5 X: 1 T:\u53f3\u624bCDEFGA L:1/8 \"1\"\"C\"CDE\"4\"\"F\"F\"5\"\"G\"G|\"5\"\"A\"A \u7b80\u8c31\u540d: CDEFGA \u6307\u6cd5\uff1a123455 \u5bf9\u5e94\u8981\u70b92\u7684\u201d\u6d1b\u57fa\u4e3b\u9898\u66f2\u201c\u90a3\u4e00\u8282\u53ca\u4ee5\u524d \u5de6\u624b\u6307\u6cd5 X: 1 T:\u5de6\u624bCDEFGA L:1/8 V: B2 clef=bass [V: B2] \"5\"\"C\"1C,1D,1E,\"2\"\"F\"1F,\"1\"\"G\"1G,\"1\"\"A\"1A, | \u5bf9\u5e94\u8981\u70b92\u7684\u201d\u53f3\u624bF\u4f4d\u7f6e\u201c\u524d\u9762\u76843\u8282 \u53ef\u4ee5\u7ec3\u4e60\u7684\u6b4c\u66f2\u6709\uff1a \u4e00\u95ea\u4e00\u95ea\u4eae\u6676\u6676 ( simply piano ) FGABC \u00b6 \u53f3\u624b\u6307\u6cd5 X: 1 T:\u53f3\u624bFGABC L:1/8 V: B1 clef=treble \"1\"\"F\"F1\"2\"\"G\"G1\"3\"\"A\"A1\"4\"\"B\"B1\"5\"\"C\"c1| \u7b80\u8c31\u540d: FGABC \u6307\u6cd5\uff1a12345 \u5230\u8fd9\u4e00\u6b65\uff0c simply piano \u8981\u70b92\u5c31\u5b66\u4e60\u5b8c\u4e86\u3002\u53ef\u4ee5\u5f39\u594f\u7684\u6b4c\u66f2: perfect \uff08\u7b80\u5355\u7248\uff09 \u5de6\u624b\u624b\u6307\u6cd5 X: 1 T:\u5de6\u624bFGABC V: B2 clef=bass [V: B2] \"5\"\"F\"1F,\"4\"\"G\"1G, \"3\"\"A\"A, \"2\"\"B\"B,\"1\"\"C\"c,| \u5bf9\u5e94\u8981\u70b93\uff1a \u5347\u8c03\u7b80\u4ecb \u524d\u9762\u7684\u90a3\u4e9b\u5c0f\u7ed3 X: 1 T:\u5de6\u624bFAC V: B2 clef=bass [V: B2] \"5\"\"F\"1F, \"3\"\"A\"A, \"1\"\"C\"c,| CDEF#G \u00b6 \u5e26#\u8868\u793a\u5347\u534a\u8c03\uff0c\u5bf9\u5e94\u767d\u952e\u53f3\u8fb9\u7684\u9ed1\u952e \u53f3\u624b\u6307\u6cd5 X: 1 T:\u53f3\u624bCDEFG \"1\"\"C\"CDE\"4\u9ed1\"\"F\"^F\"5\"\"G\"G \u7b80\u8c31\u540d: CDEFG \u6307\u6cd5\uff1a12345 \u5de6\u624b\u6307\u6cd5 X: 1 T:\u5de6\u624bCDEFG V: B2 clef=bass [V: B2] \"5\"\"C\"1C,1D,1E,\"2\u9ed1\"\"F\"1^F,\"1\"\"G\"1G, | FG \\(\\text{A}_b\\) BC \u00b6 \u964dB \u5e26b\u8868\u793a\u964d\u534a\u8c03\uff0c\u5bf9\u5e94\u767d\u952e\u5de6\u8fb9\u7684\u9ed1\u952e \u5347\u8c03\u548c\u964d\u8c03\u7684\u4f5c\u7528\u57df\u90fd\u662f\u4e00\u5c0f\u8282 \u53f3\u624b\u6307\u6cd5 \u964dB T:\u53f3\u624bFGABC L:1/8 V: B1 clef=treble \"1\"\"F\"F1\"2\"\"G\"G1\"3\"\"A\"A1\"4\"\"B\"_B\"5\"\"C\"c1| \u7b80\u8c31\u540d: FGABC \u6307\u6cd5\uff1a12345 \u5de6\u624b\u6307\u6cd5 \u964dB T:\u5de6\u624bFGABC V: B2 clef=bass [V: B2] \"5\"\"F\"1F,\"4\"\"G\"1G, \"3\"\"A\"A, \"2\"\"B\"_B,\"1\"\"C\"c,| C \\(\\text{D}_b\\) EFG \u00b6 \u964dE \u53f3\u624b\u6307\u6cd5 T:\u53f3\u624bCDEFG \"1\"\"C\"CD_E\"4\"\"F\"F\"5\"\"G\"G \u7b80\u8c31\u540d: CDEFG \u6307\u6cd5\uff1a12345 \u5de6\u624b\u6307\u6cd5 T:\u5de6\u624bCDEFG V: B2 clef=bass [V: B2] \"5\"\"C\"1C,1D,1_E,\"2\"\"F\"1F,\"1\"\"G\"1G, |","title":"1 \u4e00\u4e9b\u57fa\u672c\u6307\u6cd5"},{"location":"%E9%92%A2%E7%90%B4/1-%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%8C%87%E6%B3%95/#1-","text":"","title":"1-\u4e00\u4e9b\u57fa\u672c\u6307\u6cd5"},{"location":"%E9%92%A2%E7%90%B4/1-%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%8C%87%E6%B3%95/#cdefg","text":"\u6307\u6cd5\u91cc\u76841\u5747\u4e3a\u5927\u62c7\u6307 \u53f3\u624b\u6307\u6cd5 X: 1 T:\u53f3\u624bCDEFG L:1/8 \"1\"\"C\"CDE\"4\"\"F\"F\"5\"\"G\"G T:\u53f3\u624bCDEFG \"1\"\"C\"CDE\"4\"\"F\"F\"5\"\"G\"G \u7b80\u8c31\u540d: CDEFG \u6307\u6cd5\uff1a12345 \u5de6\u624b\u6307\u6cd5 X: 1 T:\u5de6\u624bCDEFG L:1/8 V: B2 clef=bass [V: B2] \"5\"\"C\"1C,1D,1E,\"2\"\"F\"1F,\"1\"\"G\"1G, |","title":"CDEFG"},{"location":"%E9%92%A2%E7%90%B4/1-%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%8C%87%E6%B3%95/#cdefga","text":"\u53f3\u624b\u6307\u6cd5 X: 1 T:\u53f3\u624bCDEFGA L:1/8 \"1\"\"C\"CDE\"4\"\"F\"F\"5\"\"G\"G|\"5\"\"A\"A \u7b80\u8c31\u540d: CDEFGA \u6307\u6cd5\uff1a123455 \u5bf9\u5e94\u8981\u70b92\u7684\u201d\u6d1b\u57fa\u4e3b\u9898\u66f2\u201c\u90a3\u4e00\u8282\u53ca\u4ee5\u524d \u5de6\u624b\u6307\u6cd5 X: 1 T:\u5de6\u624bCDEFGA L:1/8 V: B2 clef=bass [V: B2] \"5\"\"C\"1C,1D,1E,\"2\"\"F\"1F,\"1\"\"G\"1G,\"1\"\"A\"1A, | \u5bf9\u5e94\u8981\u70b92\u7684\u201d\u53f3\u624bF\u4f4d\u7f6e\u201c\u524d\u9762\u76843\u8282 \u53ef\u4ee5\u7ec3\u4e60\u7684\u6b4c\u66f2\u6709\uff1a \u4e00\u95ea\u4e00\u95ea\u4eae\u6676\u6676 ( simply piano )","title":"CDEFGA"},{"location":"%E9%92%A2%E7%90%B4/1-%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%8C%87%E6%B3%95/#fgabc","text":"\u53f3\u624b\u6307\u6cd5 X: 1 T:\u53f3\u624bFGABC L:1/8 V: B1 clef=treble \"1\"\"F\"F1\"2\"\"G\"G1\"3\"\"A\"A1\"4\"\"B\"B1\"5\"\"C\"c1| \u7b80\u8c31\u540d: FGABC \u6307\u6cd5\uff1a12345 \u5230\u8fd9\u4e00\u6b65\uff0c simply piano \u8981\u70b92\u5c31\u5b66\u4e60\u5b8c\u4e86\u3002\u53ef\u4ee5\u5f39\u594f\u7684\u6b4c\u66f2: perfect \uff08\u7b80\u5355\u7248\uff09 \u5de6\u624b\u624b\u6307\u6cd5 X: 1 T:\u5de6\u624bFGABC V: B2 clef=bass [V: B2] \"5\"\"F\"1F,\"4\"\"G\"1G, \"3\"\"A\"A, \"2\"\"B\"B,\"1\"\"C\"c,| \u5bf9\u5e94\u8981\u70b93\uff1a \u5347\u8c03\u7b80\u4ecb \u524d\u9762\u7684\u90a3\u4e9b\u5c0f\u7ed3 X: 1 T:\u5de6\u624bFAC V: B2 clef=bass [V: B2] \"5\"\"F\"1F, \"3\"\"A\"A, \"1\"\"C\"c,|","title":"FGABC"},{"location":"%E9%92%A2%E7%90%B4/1-%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%8C%87%E6%B3%95/#cdefg_1","text":"\u5e26#\u8868\u793a\u5347\u534a\u8c03\uff0c\u5bf9\u5e94\u767d\u952e\u53f3\u8fb9\u7684\u9ed1\u952e \u53f3\u624b\u6307\u6cd5 X: 1 T:\u53f3\u624bCDEFG \"1\"\"C\"CDE\"4\u9ed1\"\"F\"^F\"5\"\"G\"G \u7b80\u8c31\u540d: CDEFG \u6307\u6cd5\uff1a12345 \u5de6\u624b\u6307\u6cd5 X: 1 T:\u5de6\u624bCDEFG V: B2 clef=bass [V: B2] \"5\"\"C\"1C,1D,1E,\"2\u9ed1\"\"F\"1^F,\"1\"\"G\"1G, |","title":"CDEF#G"},{"location":"%E9%92%A2%E7%90%B4/1-%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%8C%87%E6%B3%95/#fgtexta_bbc","text":"\u964dB \u5e26b\u8868\u793a\u964d\u534a\u8c03\uff0c\u5bf9\u5e94\u767d\u952e\u5de6\u8fb9\u7684\u9ed1\u952e \u5347\u8c03\u548c\u964d\u8c03\u7684\u4f5c\u7528\u57df\u90fd\u662f\u4e00\u5c0f\u8282 \u53f3\u624b\u6307\u6cd5 \u964dB T:\u53f3\u624bFGABC L:1/8 V: B1 clef=treble \"1\"\"F\"F1\"2\"\"G\"G1\"3\"\"A\"A1\"4\"\"B\"_B\"5\"\"C\"c1| \u7b80\u8c31\u540d: FGABC \u6307\u6cd5\uff1a12345 \u5de6\u624b\u6307\u6cd5 \u964dB T:\u5de6\u624bFGABC V: B2 clef=bass [V: B2] \"5\"\"F\"1F,\"4\"\"G\"1G, \"3\"\"A\"A, \"2\"\"B\"_B,\"1\"\"C\"c,|","title":"FG\\(\\text{A}_b\\)BC"},{"location":"%E9%92%A2%E7%90%B4/1-%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%8C%87%E6%B3%95/#ctextd_befg","text":"\u964dE \u53f3\u624b\u6307\u6cd5 T:\u53f3\u624bCDEFG \"1\"\"C\"CD_E\"4\"\"F\"F\"5\"\"G\"G \u7b80\u8c31\u540d: CDEFG \u6307\u6cd5\uff1a12345 \u5de6\u624b\u6307\u6cd5 T:\u5de6\u624bCDEFG V: B2 clef=bass [V: B2] \"5\"\"C\"1C,1D,1_E,\"2\"\"F\"1F,\"1\"\"G\"1G, |","title":"C\\(\\text{D}_b\\)EFG"}]}